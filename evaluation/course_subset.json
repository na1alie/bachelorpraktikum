[
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=455630&pOrgNr=1",
        "name": "Einführung in die Informatik",
        "kennung": "IN0001",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die wesentlichen Konzepte der Informatik auf einem grundlegenden, praxis-orientierten, aber wissenschaftlichen Niveau und können mit ihnen verantwortungsvoll umgehen.\nKonzepte dieser Art sind etwa: Algorithmen, Syntax und Semantik, sowie Effizienz im Hinblick auf Speicherverbrauch oder Zeit.\nDie Teilnehmer sind dann in der Lage, in Java oder einer ähnlichen objektorientierten Sprache überschaubare algorithmische Probleme zu lösen und einfache verteilte und nebenläufige Anwendungen zu programmieren. Sie verstehen die diesen Programmiersprachen zugrundeliegenden Konzepte und Modelle und sind deshalb in der Lage, andere zuweisungs- und objektorientierte Programmiersprachen eigenständig zu erlernen.",
        "inhalt": "In dem Modul IN0001 werden beispielhaft folgende Inhalte behandelt:\n- Einführung\n++ Grundlegende Begriffe: Problem - Algorithmus - Programm\n++ Imperative Programmkonstrukte\n- Syntax und Semantik\n++ Syntax von Programmiersprachen: reguläre Ausdrücke und kontextfreie Grammatiken\n++ Semantik von Programmen: Kontrollfluss-Diagramme\n- Grundlegende Datenstrukturen I:\n++ Zahlen, Strings, Felder\n++ Sortieren durch Einfügen\n- Rekursion\n++ Binäre Suche\n++ Rekursionsarten\n- Grundlegende Datenstrukturen II:\n++ Objekte, Klassen, Methoden\n++ Listen, Keller und Schlangen\n- Objektorientierte Programmierung\n++ Vererbung\n++ abstrakte Klassen und Interfaces\n++ Polymorphie\n- Programmieren im Großen (Ausblick und Einbettung in ökonomische, gesellschaftliche und ethische Zusammenhänge)\n- Nebenläufige Programmierung und Threads",
        "voraussetzungen": "Praktikum: Grundlagen der Programmierung (IN0002) sollte gleichzeitig besucht werden",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "problem solve",
            "Algorithms",
            "Programming",
            "Syntax",
            "Semantics",
            "Efficiency",
            "Java",
            "Object-Oriented Programming",
            "Recursion",
            "Data Structures",
            "Inheritance",
            "Polymorphism",
            "Concurrency",
            "Distributed Computing",
            "Ethics"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452812&pOrgNr=1",
        "name": "Einführung in die Rechnerarchitektur",
        "kennung": "IN0004",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Nach Teilnahme an diesem Modul sind die Studierenden in der Lage, Rechnersysteme als geschichtete, abstrakte Maschinen zu verstehen. Sie haben einen ersten Einblick in das Fachgebiet der Rechnerarchitektur gewonnen und beherrschen die nachfolgend genannten, einzelnen Fähigkeiten:\nSie haben die wesentlichen Konzepte von maschinennaher Programmierung, Mikroprogrammierung und Schaltungsentwurf erlernt und können diese anwenden. Sie haben den Maschinenbefehlszyklus auf Basis der Vorgänge in der Hardware auf Registertransferebene verstanden und sind in der Lage Rechnerarchitekturen zu klassifizieren. Sie haben die Grundsätze moderner Rechnerarchitekturen erlernt.",
        "inhalt": "- Funktion und Aufbau von Rechnersystemen aus technischer Sicht: Von-Neumann-Rechner, Maschinenbefehlszyklus, Hardware-Software-Schnittstelle\n- Die Instruction Set Architecture (ISA): Funktionsweise und maschinennahes Assembler Programmieren, Aufrufkonventionen\n- Implementierung von Maschinenbefehlen durch Mikroprogrammierung\n- Schaltungen, Schaltwerke, Schaltwerksentwurf mittels einer formalen Sprache am Beispiel von VHDL\n- Einführung in die Rechnerarchitektur: Mikroprozessorarchitekturen und Systemarchitekturen, parallele und verteilte Systeme, Speichersysteme und E/A",
        "voraussetzungen": "keine",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "Hardware-software integration",
            "Instruction Set Architecture",
            "Assembly Programming",
            "Microprogramming",
            "Digital Circuit Design",
            "hardware architecture",
            "Distributed Systems",
            "Memory Systems",
            "Input/Output"
        ]
    },

    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452806&pOrgNr=1",
        "name": "Grundlagenpraktikum: Programmierung",
        "kennung": "IN0002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolreicher Teilnahme an diesem Modul beherrschen die Studierenden die Programmiersprache Java oder eine ähnliche objekt-orientierte Programmiersprache und das Programmieren im Kleinen. Sie können Programme eigenständig entwickeln und dabei wesentliche Konzepte der Informatik auf einem grundlegenden, praxis-orientierten, aber wissenschaftlichen Niveau anwenden, wie sie im Modul IN0001 gelehrt werden.",
        "inhalt": "Begleitend zum Modul IN0001 behandelt das Praktikum\nAufgaben, die u.a. die kreative Verwendung von:\n- grundlegenden Datenstrukturen\n- Rekursion\n- Objekten, Klassen und Methoden\n- Listen, Warteschlangen und Bäumen\n- höheren Konzepten der objektorientierten Programmierung\n- Nebenläufigkeit\nzur Problemlösung einüben.",
        "voraussetzungen": "Einführung in die Informatik 1 (IN0001) sollte gleichzeitig besucht werden",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "problem solve",
            "Programming",
            "Object-Oriented Programming",
            "Data Structures",
            "Recursion",
            "Concurrency",
            "algorithm design",
            "software development",
            "critical thinking",
            "analytical skill",
            "Creativity",
            "project management",
            "Communication",
            "Teamwork",
            "Adaptability"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452816&pOrgNr=1",
        "name": "Einführung in die Softwaretechnik",
        "kennung": "IN0006",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an dem Modul kennen die Studierenden die Konzepte und Methoden für die verschiedenen Phasen eines Projekts, z.B. Modellierung des Problems, Wiederverwendung von Klassen und Komponenten, und Auslieferung der Software. Sie sind in der Lage für konkrete Probleme die geeigneten Konzepte und Methoden auszuwählen und anzuwenden.\n\nDie Studierenden kennen die wichtigsten Begriffe und Vorgehensweisen der Softwaretechnik und können gegebene Probleme daraufhin analysieren und bewerten. Darüber hinaus haben sie die Fähigkeit konkrete Problemstellungen in der Softwaretechnik, z.B. mit Hilfe von Entwurfsmustern, zu lösen.",
        "inhalt": "Software-Engineering wendet systematische Konstruktionsprinzipien auf die Softwareentwicklung an, die den gesamten Lebenszyklus der Softwareerstellung umfassen, von der Definition der Anforderungen und dem Entwurf der Architektur bis hin zu Codierung, Testung, Bereitstellung, Überwachung und laufender Wartung.\n\nVorlesungseinheiten:\n\nL01 Einführung: Diese Vorlesung gibt einen grundlegenden Überblick über Software-Engineering speziell für Cloud-Umgebungen. Sie behandelt grundlegende Konzepte wie Softwareentwicklungsmethoden, Systemmodellierungstechniken, und Abstraktionsprinzipien. Darüber hinaus werden die Grundlagen des Cloud Computing, einschließlich Cloud-Infrastruktur und Dienstmodelle behandelt.\n\nL02 Systementwurfsanforderungen und Softwarearchitekturen: Diese Lerneinheit konzentriert sich auf die kritischen Aspekte des Requirements Engineering und unterscheidet zwischen funktionalen und nicht-funktionalen Anforderungen. Anschließend werden verschiedene Softwarearchitekturen wie Client-Server-, Schichten-, monolithische und Microservice-Architekturen untersucht, wobei deren Kommunikationsmechanismen und Bereitstellungsüberlegungen detailliert erläutert werden.\n\nL03 Systementwurf I: Modularität und Datenmanagement: Diese Vorlesung befasst sich mit der Komplexität des Systementwurfs, wobei der Schwerpunkt auf Modularität, Datenmanagement und Entwurfsmustern liegt. Außerdem werden verschiedene Lösungen für die Datenverwaltung untersucht.\n\nL04 Systementwurf II: Leistung, Gleichzeitigkeit und Skalierbarkeit: Diese Einheit befasst sich mit Leistungsoptimierung, Gleichzeitigkeitsmanagement und Skalierbarkeitsstrategien.\n\nL05 Systementwurf III: Sicherheit, Zuverlässigkeit und Verfügbarkeit: Diese Vorlesung konzentriert sich auf den Entwurf sicherer, zuverlässiger und hochverfügbarer Systeme.\n\nL06 Software-Tests: In dieser Einheit werden verschiedene Softwaretestmethoden zur Gewährleistung von Softwarequalität und -zuverlässigkeit untersucht. Sie deckt Unit-Tests, Integrationstests, automatisierte groß angelegte Testtechniken, Mock-Tests und Testverdopplungen ab.\n\nL07 Programmanalyse: Statische und dynamische Analyse: Diese Vorlesung behandelt Techniken der Programmanalyse, einschließlich statischer und dynamischer Analyse.\n\nL08 Softwaremanagement, Build-Systeme und DevOps: Diese Einheit deckt die wichtigsten Praktiken des Softwaremanagements ab, einschließlich Quellcodeverwaltung, Build-Systeme, Release-Management und kontinuierliche Integration/Lieferung/Deployment (CI/CD) sowie kontinuierliche Tests.\n\nL09 Software-Bereitstellung und -Überwachung: Diese Vorlesung befasst sich mit Cloud-Bereitstellungsmodellen, containerbasierter Entwicklung und Orchestrierung sowie der Überwachung von Cloud-Systemen.\n\nL10 Softwarequalität und Projektmanagement: Diese Lerneinheit umfasst Techniken der Software-Qualitätssicherung (Code-Reviews, Refactoring, formale Verifizierung) und Grundsätze des Projektmanagements.",
        "voraussetzungen": "IN0002 Grundlagenpraktikum: Programmierung",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch/Englisch",
        "gültig bis": "",
        "matching": [
            "problem solve",
            "software design",
            "software architecture",
            "Modeling",
            "Reuse",
            "Deployment",
            "Testing",
            "Program Analysis",
            "Software Management",
            "continuous integration",
            "Continuous Deployment",
            "Monitoring",
            "quality assurance",
            "project management",
            "Scalability"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452818&pOrgNr=1",
        "name": "Grundlagen: Algorithmen und Datenstrukturen",
        "kennung": "IN0007",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer beherrschen die oben genannten grundlegende Algorithmen und Datenstrukturen. Sie sind in der Lage, diese eigenständig in ihrer Komplexität zu analysieren und die entsprechenden Analysekonzepte auf verwandte algorithmische Probleme anzuwenden. Ferner sind die Teilnehmer in der Lage, die behandelten Algorithmen und Datenstrukturen einzusetzen, sie ggf. zu modifizieren und verschiedene Lösungen in ihrer Güte zu vergleichen.",
        "inhalt": "Das Modul behandelt zunächst die Grundlagen der Analyse von Effizienz bzw. Komplexität. Es werden grundlegende Begriffe, Komplexitätsmaße, die Landau-Symbole sowie verschiedene Maschinenmodelle eingeführt. Danach studiert das Modul grundlegende Datenstrukturen und algorithmische Probleme.\n- Datenstrukturen für Sequenzen: Untersucht werden dynamische Arrays, Listen, Stapel und Warteschlangen. Dabei wird jeweils die Komplexität der einzelnen Operationen hergeleitet.\n- Hashing: Im Kern werden Hashing mit Verkettung, universelles Hashing sowie verschiedenen Sondierverfahren vorgestellt. Das Modul behandelt optional perfektes Hashing und hash-basierte Algorithmen, zum Beispiel für das Problem des Mengendurchschnitts.\n- Sortieren: Das Modul wiederholt zunächst einfache Verfahren wie InsertionSort, SelectionSort und BubbleSort. Anschließend werden fortgeschrittene Verfahren wie MergeSort, HeapSort und QuickSort analysiert. Optional werden sortierbasierte Algorithmen, die untere Schranke für vergleichsbasiertes Sortieren, Rang-Selektion, RadixSort sowie externes Sortieren vorgestellt.\n- Prioritätswarteschlangen: Das Modul untersucht binäre Heaps und Binomialheaps.\n- Suchbäume: Das Modul behandelt binäre Suchbäume, AVL-Bäume und (a,b)-Bäume.\n- Graphalgorithmen: Das Modul studiert verschiedene Graphrepräsentation, Traversierungstechniken per DFS/BFS, die Berechnung von Zweifachzusammenhangskomponenten und starken Zusammenhangskomponenten, topologische Sortierung, die Berechnung von kürzesten Wegen und minimalen Spannbäumen. Optional werden Lösungsverfahren für das Traveling Salesman Problem (TSP) vorgestellt.\nIm Stoffspektrum des Moduls sind optional Datenkompressionverfahren (Huffman, Lempel-Ziv) und einfache Algorithmen für das Problem des Pattern Matchings vorgesehen.",
        "voraussetzungen": "IN0001 Einführung in die Informatik 1, IN0015 Diskrete Strukturen",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "problem solve",
            "Data Structures",
            "Algorithms",
            "Complexity Analysis",
            "Efficiency",
            "UX optimization",
            "Sorting",
            "Searching",
            "Hashing",
            "Graphs",
            "Trees",
            "Traversal",
            "Compression",
            "Pattern Matching",
            "Modeling"
        ]
    },

    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2916139&pOrgNr=1",
        "name": "Grundlagenpraktikum: Rechnerarchitektur",
        "kennung": "IN0005",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, im Kontext moderner Rechensysteme (moderne x86-64 Prozessoren, GPUs) die Performanzcharakteristiken von Programmen zu analysieren, mithilfe dieser Ergebnisse zielgerichtete Optimierungen zu entwickeln und damit auch komplexe Hardware sowohl zeit- als auch energieeffizient zu programmieren und eigene Implementierungen zu bewerten.",
        "inhalt": "- Techniken zur Performanzanalyse\n- Benchmarkingtechniken\n- Profiling-Tools, u.a. perf, gprof, Callgrind\n- Nutzung von Hardware Performance Countern\n- Grundlagen C-Programmierung\n- Datenstrukturen, Funktionen, Strings, Pointer-Arithmetik, I/O\n- Makefiles, Debugging-Techniken, GDB, Assertions\n- Grundlagen Compiler-Optimierungen\n- Rahmenbedingungen: Application Binary Interface, definiertes\nVerhalten\n- Einfluss von Programmannotationen (Pointer-Aliasing, Alignment,\netc.) auf Performanz\n- Grundlegende Modelle zur parallelen Programmierung, Flynn'sche\nKlassifikation\n- Optimierung von Instruktionsparallelismus\n- Spezialisierung im Rahmen der Projektarbeit in einer der folgenden\nBereiche:\n- Ausnutzung von Vektoreinheiten moderner Prozessoren\n- SIMD-Instruktionen in Maschinencode\n- SIMD-Intrinsics in höheren Programmiersprachen\n- Multi-Threading mit Pthreads oder OpenMP\n- Synchronisierung, atomare Operationen\n- Cache-Optimierungen\n- Programmiermodelle für heterogene Systeme (u.a. GPUs, FPGAs)",
        "voraussetzungen": "IN0004: Einführung in die Rechnerarchitektur",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "performance analysis",
            "Benchmarking",
            "Profiling",
            "Hardware Performance Counters",
            "C Programming",
            "Data Structures",
            "Functions",
            "Strings",
            "Pointers",
            "I/O",
            "Makefiles",
            "Debugging",
            "Compiler Design",
            "Application Binary Interface",
            "Parallel Computing",
            "Instruction-Level Parallelism",
            "SIMD Instructions",
            "Multithreading",
            "Synchronization",
            "Cache Optimization",
            "Heterogeneous Systems"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452820&pOrgNr=1",
        "name": "Grundlagen: Datenbanken",
        "kennung": "IN0008",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden können die wesentlichen Konzepte von relationalen Datenbanksystemen anwenden und können sie systematisch und qualifiziert nutzen und bewerten.\nDie Studierenden beherrschen die systematische Nutzung eines Datenbanksystems vom konzeptuellen Entwurf über den Implementationsentwurf zum physischen Entwurf. Sie können auch komplexe Anfragen in SQL formulieren und haben ein Grundverständnis der logischen und physischen Optimierung auf der Grundlage der Relationenalgebra. Weiterhin haben sie den sicheren Betrieb hinsichtlich Recovery, Mehrbenutzersynchronisation und Autorisierung verstanden.",
        "inhalt": "SQL, Datenintegrität, relationale Entwurfstheorie, physische Datenorganisation (Speicherorganisation, Indexstrukturen), Anfragebearbeitung, Transaktionsverwaltung, Grundzüge der Fehlerbehandlung (Recovery, Backup) und der Mehrbenutzersynchronisation, Sicherheitsaspekte (Autorisierung), XML-Datenmodellierung (optional)",
        "voraussetzungen": "IN0015 Diskrete Strukturen, IN0001 Einführung in die Informatik 1",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "database design",
            "SQL",
            "data integrity",
            "Relational Theory",
            "Data Organization",
            "Query Processing",
            "Transaction Management",
            "Error handling",
            "Concurrency",
            "Authorization",
            "XML Modeling"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2916168&pOrgNr=1",
        "name": "Grundlagen: Betriebssysteme und Systemsoftware",
        "kennung": "IN0009",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach Abschluss des Moduls sind die Studierenden in der Lage, die Grundlagen, Probleme und Lösungen von Betriebssystemen und der Systemsoftware zu verstehen und die aktuellen Entwicklungen einzuschätzen. Zudem verstehen sie die einzelnen Komponenten, wie zum Beispiel die Prozess- und die Speicherverwaltung, und sie können die unterschiedlichen Strategien und Verfahren analysieren und bewerten. Sie sind zudem in die Lage, die erworben Grundlagenkenntnisse direkt auf neue Entwicklungen im Bereich der Betriebssysteme sowie der Systemsoftware anzuwenden, indem sie Betriebssystemkomponenten und andere Systemsoftware selber entwickeln.",
        "inhalt": "Grundkonzepte: Betriebssysteme; Nebenläufigkeit; Parallele Programmierung; Systemnahe Programmierung (Prozesse, Speicher, Kommunikation, BM-Verwaltung; Modelle (abstrakt, formal) für Nebenläufigkeit, u.a. Petrinetze; Wechselseitiger Ausschluss, Synchronisation, Deadlocks; Compiler/Linker/Loader mit Integration von Bibliotheken, Übergang auf (geeignete) Hardware-Basis, maschinennahe Programmierung und C; I/O insbesondere zur Vorbereitung der Vernetzung)",
        "voraussetzungen": "IN0001 Einführung in die Informatik 1 und IN0004 Einführung in die Rechnerarchitektur werden empfohlen",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "critical thinking",
            "problem solve",
            "software development",
            "Parallel Computing",
            "Process Management",
            "memory management",
            "Communication",
            "Concurrency",
            "Synchronization",
            "Deadlock Avoidance",
            "Compiler Design",
            "Linker",
            "Loader",
            "Library Integration",
            "Hardware-software integration"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2911725&pOrgNr=1",
        "name": "IT-Sicherheit",
        "kennung": "IN0042",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die grundlegenden Konzepte, Methoden und Protokolle zum Schutz von Daten und Systemen vor Manipulation und Missbrauch auf einem grundlegenden, praxisorientierten, wissenschaftlichen Niveau. Sie verstehen die Ursachen von Sicherheits-Problemen heutiger Systeme, können die Zusammenhänge zwischen Schutzmechanismen und den damit adressierten Problemen wiedergeben und auf Fallbeispiele anwenden. Sie beherrschen zudem grundlegende Methoden des betrieblichen IT-Sicherheitsmanagements.",
        "inhalt": "- Grundlegende Begriffe der IT-Sicherheit,\n- Ausgewählte Sicherheitsprobleme heutiger Systeme und ausgewählte Angriffe,\n- Grundlagen und praxisrelevante Verfahren der angewandten Kryptographie\n- Grundlegende Konzepte und Protokolle zur Identifizierung/Authentisierung, zur Zugriffskontrolle und zur Systemsicherheit\n- Grundlagen der Netzwerksicherheit: Firewallkonzepte und praxisrelevante Protokolle zur Netzwerksicherheit\n- Methoden des betrieblichen IT-Risiko- und Sicherheitsmanagements (ISM)",
        "voraussetzungen": "IN0001 Einführung in die Informatik und IN0004 Einführung in die Rechnerarchitektur werden empfohlen",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "Data Protection",
            "risk management",
            "access control",
            "network security",
            "Cryptography",
            "Authentication",
            "security system",
            "Cybersecurity",
            "incident response",
            "Vulnerability Analysis",
            "Penetration Testing",
            "threat modeling",
            "Secure Communication Protocols",
            "security manage",
            "Compliance"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458318&pOrgNr=1",
        "name": "Grundlagen: Rechnernetze und Verteilte Systeme",
        "kennung": "IN0010",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Nach dem Modul \"Grundlagen: Rechnernetze und Verteilte Systeme\" sind die Studierenden in der Lage, die Technologien und Methoden von Rechnernetzen und Verteilten Systemen zu verstehen, und anhand wesentlicher Protokolle der geschichteten Netzarchitektur zu erläutern, welche Protokollmechanismen in den einzelnen Schichten eingesetzt werden, und wie diese funktionieren. Zudem verstehen sie, wie verteilte Anwendungen wie z.B. das World Wide Web mit Hilfe der Internetprotokolle realisiert sind, und wie Rechnernetze aufgebaut sind. Darüber hinaus sind die Studierenden in der Lage, die Leistungsfähigkeit ausgewählter Netze und verteilter Anwendungen zu bestimmen, sowie einzelne Protokollmechanismen zu implementieren.",
        "inhalt": "- Rechnernetze\n++ Überblick: Computernetze und das Internet\n+++ Komponenten (Router, Switches, Clients, Server)\n+++ Aufbau (Topologien, Routing, Pakete gegenüber virtuelle Verbindungen)\n+++ Schichtenmodell (OSI und Internet)\n+++ Geschichtlicher Hintergrund\n++ Schichtenübergreifende Konzepte (innerhalb der Schichten behandelt):\n+++ Adressierung\n+++ Fehlererkennung\n+++ Codierung und Modulation\n+++ Medienzugriffsverfahren\n+++ Flusskontrolle\n+++ Verbindungsmanagement\n+++ Paketvermittlung gegenüber virtuelle Verbindungen\n++ Schichten:\n+++ Anwendungsprotokolle und Anwendungen (application layer)\n++++ Aufgaben und Interface\n++++ Beispiele: HTTP, DNS, SMTP (Mail), Peer-to-Peer-Protokolle\n+++ Transportschicht\n++++ Aufgabe und Interface\n++++ Beispiele: TCP und UDP\n+++ Vermittlungsschicht\n++++ Aufgaben und Interface\n++++ Routing: Link State gegenüber Distance Vector Protokolle\n++++ Adressierung: IP Adressen\n++++ Beispiele: IP, Routing im Internet\n+++ Sicherungsschicht\n++++ Aufgaben und Interface\n++++ Beispiele: Ethernet, Wireless LAN\n+++ Bitübertragungsschicht\n++++ Aufgaben und Interface\n++++ Beispiele\n- Verteilte Systeme:\n++ Middleware, z.B. RPC\n++ Web Services\n- Übergreifende Aufgaben:\n++ Netzmanagement\n++ IT-Sicherheit\n+++ Kryptographische Mechanismen und Dienste\n+++ Authentifizierung, Vertraulichkeit, Integrität\n+++ Protokolle mit Sicherheitsmechanismen, z.B.: IPsec, PGP, Kerberos, SSL, SSH, ...\n+++ Firewalls, Intrusion Detection\n\nInhalt der Übung:\nDie Übung behandelt Rechenaufgaben zur Bestimmung der Leistungsfähigkeit von Protokollen und Mechanismen einzelner Schichten (Physical Layer, Data Link Layer, Network Layer, Transport Layer).\nIn Programmierübungen wird die Implementierung einzelner Protokollmechanismen geübt.",
        "voraussetzungen": "IN0001 Einführung in die Informatik 1, IN0003 Einführung in die Informatik 2 bzw. ab WiSe 2018/19 Funktionale Programmierung und Verifikation, IN0002 Praktikum: Grundlagen der Programmierung",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "network architecture",
            "Distributed Systems",
            "Protocols",
            "performance analysis",
            "Layered Architecture",
            "Addressing",
            "error analysis",
            "Coding and Modulation",
            "access control",
            "Flow Control",
            "Connection Management",
            "Packet Switching",
            "Protocols",
            "Protocols",
            "route protocol",
            "Cryptography"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=454045&pOrgNr=1",
        "name": "Einführung in die Theoretische Informatik",
        "kennung": "IN0011",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die wesentlichen Konzepte der Theoretischen Informatik auf einem grundlegenden, aber wissenschaftlichen Niveau. Teilnehmer wissen, was reguläre Ausdrücke, kontextfreie Grammatiken, die Chomsky Hierarchy, endliche Automaten und Turingmaschinen sind. Sie können gegebene formale Sprachen mit dem passenden Beschreibungsmittel definieren und sie können zeigen, falls sich eine gegebene Sprache nicht mit einem bestimmten Beschreibungsmittel definieren lässt. Sie können beweisen, dass bestimmte Beschreibungsmittel äquivalent sind und können verschiedene Beschreibungen algorithmisch ineinander transformieren. Sie können die grundlegenden Konzepte der Komplexitätstheorie erklären und können Entscheidungsprobleme unter gegebenen Komplexitätsschranken algorithmisch aufeinander reduzieren.",
        "inhalt": "Formale Sprachen, Grammatiken, Chomsky Hierarchy.\n\nReguläre Sprachen: DFA, NFA mit und ohne ε-Transitionen, reguläre Ausdrücke und Übersetzungen dazwischen; Systeme von Gleichungen zwischen Sprachen; Abschluss unter Booleschen Operationen; Ardens Lemma; Pumping Lemma; Entscheidungsprobleme; Minimierung; Satz von Myhill-Nerode.\n\nCFLs: PDAs und Übersetzungen zw. CFGs und PDAs; Beweis, dass DPDAs schwächer als PDAs sind; Abschlusseigenschaften; CYK Algorithmus; Pumping Lemma; Chomsky und Greibach Normalformen.\n\nKontextsensitive Sprachen und LBAs.\n\nBerechenbarkeit: Berechenbarkeit, Entscheidbarkeit, Halb-Entscheidbarkeit, rekursive Aufzählbarkeit und ihre Beziehungen; Existenz nichtberechenbarer Funktionen; Turing Maschinen, akzeptierte Sprachen und Typ-0 Sprachen; Äquivalenz von Turing Maschinen, While-Programmen und Goto-Programmen; Primitive und µ-rekursive Funktionen; Reduktionen zwischen Problemen; das Halteproblem; universelle Turing Maschinen; Satz von Rice und Satz von Rice-Shapiro; Unentscheidbarkeit des Postschen Korrespondenzproblems und wichtiger Probleme auf CFGs.\n\nKomplexitätstheorie: Zeit und Platzkomplexitätsklassen; Polynomialzeitreduktionen; die Klassen P und NP; NP-Vollständigkeit; Satz von Cook; wichtige NP-vollständige Probleme und Reduktionen zwischen ihnen.\n\nAlle Beweise werden behandelt.",
        "voraussetzungen": "IN0015 Diskrete Strukturen, MA0901 Lineare Algebra für Informatik, MA0902 Analysis für Informatik",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "Formal Languages",
            "Automata Theory",
            "Computability",
            "Complexity Analysis",
            "Formal Grammars",
            "Regular Expressions",
            "Finite Automata",
            "Pushdown Automata",
            "Turing Machines",
            "Complexity Classes",
            "Polynomial Reductions",
            "Decidability",
            "Algorithmic Transformations",
            "Proof Techniques",
            "Problem Reduction"
        ]
    },

    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1334293&pOrgNr=1",
        "name": "Introduction to Deep Learning",
        "kennung": "IN2346",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of this module, students will have acquired theoretical concepts behind neural networks, and in particular Convolutional Neural Networks, as well as experience on solving practical real-world problems with deep learning. They will be able to solve tasks such as digit recognition or image classification.",
        "inhalt": "- Introduction to the history of Deep Learning and its applications.\n- Machine learning basics 1: linear classification, maximum likelihood\n- Machine learning basics 2: logistic regression, perceptron\n- Introduction to neural networks and their optimization\n- Stochastic Gradient Descent (SGD) and Back-propagation\n- Training Neural Networks Part 1:\nregularization, activation functions, weight initialization, gradient flow, batch normalization, hyperparameter optimization\n- Training Neural Networks Part 2: parameter updates, ensembles, dropout\n- Convolutional Neural Networks, ConvLayers, Pooling, etc.\n- Applications of CNNs: e.g., object detection (from MNIST to ImageNet), visualizing CNN (DeepDream)\n- Overview and introduction to Recurrent networks and LSTMs\n- Recent developments in deep learning in the community\n- Overview of research and introduction to advanced deep learning lectures.",
        "voraussetzungen": "Programming knowledge is expected. At least one programming language should be known, preferably Python.\n\nMA0902 Analysis for Informatics\nMA0901 Linear Algebra for Informatics",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Machine Learning",
            "Neural Networks",
            "UX optimization",
            "Gradient Descent",
            "Backpropagation",
            "Regularization",
            "Activation Functions",
            "Batch Normalization",
            "Hyperparameter Optimization",
            "Dropout",
            "Convolutional Neural Networks",
            "object detection",
            "Data Visualization",
            "Recurrent Networks",
            "Deep Learning"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456537&pOrgNr=1",
        "name": "Machine Learning",
        "kennung": "IN2064",
        "organisation": "Department Computer Science",
        "anmerkung": "ab WS12/13 8 Credits",
        "lernergebnisse": "Nach dem Bestehen des Moduls verstehen die Teilnehmer und Teilnehmerinnen die probabilistischen Grundlagen des maschinellen Lernens und verfügen über Kenntnisse zu essentiellen Lernalgorithmen; sie sind in der Lage, bei gegebener Problemstellung geeignete Algorithmen auszuwählen, zu beschreiben und herzuleiten.",
        "inhalt": "Wahrscheinlichkeitstheorie; kNN & k-means; lineare Methoden; Bayes-Regel, MLE-Schätzer, MAP-Schätzer, Erwartungs-Maximierung, nichtlineare neuronale Netze und Fehlerpropagierung, Mixturmodelle, Stützvektormaschinen, stochastische Suche, unüberwachtes Lernen",
        "voraussetzungen": "MA0901 Lineare Algebra für Informatik, MA0902 Analysis für Informatik, IN0018 Diskrete Wahrscheinlichkeitstheorie",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Probability Theory",
            "Machine Learning",
            "Algorithm Selection",
            "Algorithm Description",
            "Algorithm Derivation",
            "k-Nearest Neighbors",
            "k-Means Clustering",
            "Linear Methods",
            "Bayes Rule",
            "Maximum Likelihood Estimation",
            "Maximum A Posteriori Estimation",
            "Expectation-Maximization",
            "Neural Networks",
            "Support Vector Machines",
            "Stochastic Search"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3106358&pOrgNr=1",
        "name": "Fundamentals of Artificial Intelligence",
        "kennung": "IN2406",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "After attending the module, you are able to create artificial intelligence on a basic level using search techniques, logics, probability theory and decision theory. Your learned abilities will be the foundation for more advanced topics in artificial intelligence. In particular, you will acquire the following skills:\n- You can analyze problems of artificial intelligence and judge how difficult it is to solve them.\n- You can recall the basic concepts of intelligent agents and know possible task environments.\n- You can formalize, apply, and understand search problems.\n- You understand the difference between constraint satisfaction and classical search problems as well as apply and evaluate various constraint satisfaction approaches.\n- You can critically assess the advantages and disadvantages of logics in artificial intelligence.\n- You can formalize problems using propositional and first-order logic.\n- You can apply automatic reasoning techniques in propositional and first-order logic.\n- You understand the advantages and disadvantages of probabilistic and logic-based reasoning.\n- You can apply and critically asses methods for probabilistic reasoning with Bayesian networks and Hidden Markov Models.\n- You understand and know how to compute rational decisions.\n- You have a basic understanding on how a machine learns.\n- You know the basic areas and concepts in robotics.",
        "inhalt": "- Task environments and the structure of intelligent agents.\n- Solving problems by searching: breadth-first search, uniform-cost search, depth-first search, depth-limited search, iterative deepening search, greedy best-first search, A* search.\n- Constraint satisfaction problems: defining constraint satisfaction problems, backtracking search for constraint satisfaction problems, heuristics for backtracking search, interleaving search and inference, the structure of constraint satisfaction problems.\n- Logical agents: propositional logic, propositional theorem proving, syntax and semantics of first-order logic, using first-order logic, knowledge engineering in first-order logic, reducing first-order inference to propositional inference, unification and lifting, forward chaining, backward chaining, resolution.\n- Bayesian networks: acting under uncertainty, basics of probability theory, Bayesian networks, inference in Bayesian networks, approximate inference in Bayesian networks.\n- Hidden Markov models: time and uncertainty, inference in hidden Markov models (filtering, prediction, smoothing, most likely explanation), approximate inference in hidden Markov models.\n- Rational decisions: introduction to utility theory, utility functions, decision networks, the value of information, Markov decision processes, value iteration, policy iteration, partially observable Markov decision processes.\n- Learning: types of learning, supervised learning, learning decision trees, reinforcement learning.\n- Introduction to robotics: robot hardware, robotic perception, path planning, planning uncertain movements, control of movements, application domains.",
        "voraussetzungen": "Previous attendance of\n- IN0007 Fundamentals of Algorithms and Data Structures\n- IN0015 Discrete Structures\n- IN0018 Discrete Probability Theory\nis beneficial. However, all content is taught from ground up and the listed lectures are not essential. Students who have not attended these lectures will have to invest additional time.",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "problem solve",
            "Constraint Satisfaction",
            "Logical Reasoning",
            "Probabilistic Reasoning",
            "Decision Theory",
            "Machine Learning",
            "Robotics"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1528428&pOrgNr=1",
        "name": "Visual Data Analytics",
        "kennung": "IN2026",
        "organisation": "Department Computer Science",
        "anmerkung": "auf 5 Credits erhöht ab WiSe 13/14",
        "lernergebnisse": "After successful completion of the module, the students have gained advanced knowledge concerning the visualization pipeline, ranging from data acquisition to the final image of the data. This includes knowledge about the application specific data representations, data interpolation and approximation techniques for discrete data sets, data filtering techniques like convolution, as well as the final mapping stage to generate a renderable representation from the data. The students know the common methods which are used in information visualization to graphically depict abstract data, and in scientific visualization to graphically depict 2D and 3D scalar and vector fields, including isocontouring, direct volume rendering, flow visualization, and terrain rendering. They can analyze and categorize available techniques in terms of quality, efficiency, and suitability for a particular data type, and they can model and develop new approaches considering application-specific requirements. In the practical exercises the student learn about the functionality of commonly used visualization tools, they can evaluate available tools based on their functionality, and they can apply these tools to create own visualizations of given data sets.",
        "inhalt": "Visualization pipeline (data acquisition, filtering, display), information visualization vs. scientific visualization, grids and grid construction (Delaunay triangulation), interpolation in grids (inverse distance weighting, radial basis functions), discretization aspects, visualization of scalar fields (color coding, iso-contours and iso-surfaces, volume rendering, vector field visualization (particle-based visualization, line integral convolution, topological approaches), terrain rendering including adaptive meshing techniques and hierarchical data representations using quadtree and octrees.",
        "voraussetzungen": "None.",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Data Visualization",
            "Information Visualization",
            "Scientific Visualization",
            "Data Interpolation",
            "Data Filtering",
            "Scalar Field Visualization",
            "Vector Field Visualization",
            "Terrain Rendering",
            "Adaptive Meshing",
            "Hierarchical Data Representation",
            "Quadtree",
            "Octree",
            "Data Acquisition",
            "Data mapping",
            "Rendering"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1254188&pOrgNr=1",
        "name": "Data Analysis and Visualization in R",
        "kennung": "IN2339",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students are able to:\n- 1. produce scripts that automatically generate data analysis report\n- 2. import data from various sources into R\n- 3. apply the concepts of tidy data to clean and organize a dataset\n- 4. decide which plot is appropriate for a given question about the data\n- 5. generate such plots\n- 6. know the methods of hierarchical clustering, k-means, PCA\n- 7. apply the above methods and interpret their outcome on real-life datasets\n- 8. know the concept of statistical testing\n- 9. devise and implement resampling procedures to assess statistical significance\n- 10. know the conditions of applications and how to perform in R the following statistical tests: Fisher test, Wilcoxon test, T-test.\n- 11. know the concept of regression and classification\n- 12 apply regression and classification algorithms in R\n- 13. know the concept of error in generalization, cross-validation\n- 14. implement in R a cross-validation scheme.\n- 15. know the concepts of sensitivity, specificity, ROC curves\n- 16. assess the latter in R",
        "inhalt": "R programming basics 1\nR programming basics 2 (including report generation with R markdown)\nData importing\nCleaning and organizing data: Tidy data 1\nCleaning and organizing data: Tidy data 2\nBase plot\nGrammar of graphics 1\nGrammar of graphics 2\nUnsupervised learning (hierarchical clustering, k-means, PCA)\nCase study I\nDrawing robust interpretations 1: empirical testing by sampling\nDrawing robust interpretations 2: classical statistical tests\nSupervised learning 1: regression, cross-validation\nSupervised learning 2: classification, ROC curve, precision, recall\nCase study II",
        "voraussetzungen": "",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Data Analysis",
            "Data Visualization",
            "Scripting",
            "Data Import",
            "Data Cleaning",
            "Data Wrangling",
            "Data Visualization",
            "Clustering",
            "Principal Component Analysis",
            "Statistical Testing",
            "Resampling",
            "regression analysis",
            "Classification",
            "Cross-Validation",
            "Evaluation Metrics"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456372&pOrgNr=1",
        "name": "Augmented Reality",
        "kennung": "IN2018",
        "organisation": "Department Computer Science",
        "anmerkung": "Ab WS13/14 6 Credits",
        "lernergebnisse": "At the end of the module students are able to describe and analyze the underlying mathematical and programming aspects (tracking and rendering) of AR systems, and they can extend them towards own, further-reaching solutions. They can also evaluate existing input and output devices regarding their suitability for special application scenarios.",
        "inhalt": "Foundations of Augmented Reality\n- Geometric transformations (homogeneous matrices, projective geometry, scene graph)\n- Three-dimensional information presentation (OpenGL, 3D APIs)\n- Head-mounted displays and other display devices\n- Physical foundations of several tracking devices\n- Mathematical foundations of optical tracking, sensor fusion and device calibration\n- Concepts: augmented reality in comparison with mixed reality, ubiquitous computing, etc.",
        "voraussetzungen": "IN0001 Introduction to Informatics, IN0006 Introduction to Software Engineering, IN0007 Fundamentals of Algorithms and Data Structures, MA0901 Linear Algebra for Informatics, Basic mathematical and programming skills.",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Geometric Transformations",
            "Projective Geometry",
            "3D Rendering",
            "Display Technology",
            "Tracking Systems",
            "Sensor Fusion",
            "Device Calibration",
            "Augmented Reality",
            "Mixed Reality",
            "Ubiquitous Computing",
            "problem solve",
            "critical thinking",
            "Technical Communication"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2917510&pOrgNr=1",
        "name": "Concept Art und Game Design",
        "kennung": "IN2401",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme am Modul können die Studierenden wichtige gestalterische, technische und organisatorische Grundlagen zur praxisbezogenen Konzeption und Umsetzung digitaler Spiele umsetzen. Sie sind in der Lage, wichtige gestalterische Grundprinzipien, wie beispielsweise die grafische Darstellung, Bildkomposition und die Bildwahrnehmung beim Game Design einzusetzen. Insbesondere beherrschen sie den gestalterischen Entwurf und die technische Umsetzung von 3D Game Charakteren und 3D Spielumgebungen. Die Studierenden verstehen die Gestaltung dieser Elemente innerhalb des professionellen Workflows (Pipeline) in der Spieleentwicklung. Sie erlernen, diese Abläufe mit den üblichen Softwarepaketen gestalterisch, technisch und organisatorisch umzusetzen und die Arbeit in einem Team erfolgreich zu koordinieren.",
        "inhalt": "Im Zentrum des Moduls steht die Auseinandersetzung mit gestalterischen, technischen und organisatorischen Grundlagen für die professionelle Spieleentwicklung. Es werden notwendiges theoretisches Wissen und Kenntnisse der Konzeption und praktischen Umsetzung von Computerspielen behandelt. In Form eines Praxisprojekts erfolgt die Bearbeitung anhand ausgesuchter Projektarbeit in kleinen Teams.\n\nThemenschwerpunkte sind: Concept Art, Game Environments und 3D Character Design. Dazu gehören Projektionsarten, Perspektivische Projektion, Bildgestaltung und Bildkomposition, Bildwahrnehmung, Bildformat und \"Gleichgewicht\", Figur und Grund, Gestalt und Bildtiefe, wahrgenommene \"Bewegung\" im Bild, Mensch und Raum, Figur und Proportion, Character Design für Film und Games, 3D Modeling, Texturing, Lighting und Rendering, Lichtfarbe und Farbgestaltung, Lichtrichtung und Bildwirkung, Rigging and Animation, Game Engine Integration, sowie der professionelle Workflow (Pipeline and Stages in Lean Game Development) und Datenaustausch im 3D Game Development.\n\nDie Lehrveranstaltung nutzt die Software Blender und eine Game Engine (Unity, Unreal Engine). Die Lehrveranstaltung gliedert sich in neun Workshops und sechs Projektwochen. In den Projektwochen haben die Studierenden die Gelegenheit, die erworbenen Kenntnisse in einem praktischen Projekt umzusetzen. Alle Workshopergebnisse werden gesammelt und abschließend präsentiert.\n\nNeben der universitätseigenen Hardware bringen alle Teilnehmer auch jeweils eigene Hardware (Notebooks etc.) mit vorinstallierten Softwarepaketen in der jeweils aktuellen Version mit.",
        "voraussetzungen": "IN0031 Einführung in Informatik für Games Engineering, IN0038 Echtzeit-Computergrafik, IN0033 Interaktionsmethoden und -geräte",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "graphic design",
            "Visual Composition",
            "3D Modeling",
            "Texturing",
            "Lighting",
            "Rendering",
            "Color Theory",
            "Rigging",
            "Animation",
            "Game Engine Integration",
            "Teamwork",
            "project management",
            "Communication",
            "problem solve",
            "critical thinking"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1517636&pOrgNr=1",
        "name": "Echtzeit-Computergrafik",
        "kennung": "IN0038",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer erwerben vertiefende Kenntnisse im Bereich der Spieleentwicklung mit dem Fokus auf Echtzeitgrafik, physikalische Bewegungssimulation und Kollisionsdetektion. Nach dem Besuch des Moduls kennen die Teilnehmer die wesentlichen Komponenten von Game Engines und verstehen deren Zusammenspiel. Sie verstehen die grundlegenden Prinzipien der Rasterisierungs-basierten Rendering-Pipeline, sind mit einfachen Methoden zur Simulation von Partikelbewegungen vertraut und kennen die grundlegenden Methoden zur Detektion von Kollisionen zwischen dynamischen Körpern. Die Studierenden demonstrieren die Fähigkeit, die erlernten Konzepte und Methoden anzuwenden und anwendungsspezifisch zu erweitern.",
        "inhalt": "Das Modul ist begleitend zum Modul IN0039 Praktikum Echtzeit-Computergrafik. In der Vorlesung werden grundlegende Algorithmen der Echtzeit-Grafikprogrammierung und der Simulation der Bewegungsdynamik starrer Körper besprochen. Themen sind: Polygon-Modelle, Beleuchtungssimulation und Shading, Texture-Mapping, Rasterisierungs-basierte Graphikpipeline, Bewegungsdynamik, Partikel-Systeme, Kollisionsdetektion und -Auflösung.",
        "voraussetzungen": "Einführung in die Programmierung und gleichzeitiger Besuch des Moduls IN0039 Praktikum: Echtzeit-Computergrafik",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch/Englisch",
        "gültig bis": "",
        "matching": [
            "problem solve",
            "critical thinking",
            "computer graphic",
            "Simulation",
            "Rendering",
            "Modeling",
            "Lighting",
            "Texturing",
            "Rasterization",
            "Dynamics",
            "Particle Systems",
            "Collision Detection",
            "Collision Resolution",
            "Game Development",
            "Software Engineering"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456656&pOrgNr=1",
        "name": "Cloud Computing",
        "kennung": "IN2073",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "The students know the goals of Cloud and Grid computing. They can present application scenarios in different domains. They are familiar with the fundamental techniques in the areas security, application development and resource management. They can identify the differences and similarities between Cloud and Grid computing and istributed systems. They are able to participate in Cloud and Grid-related research projects.",
        "inhalt": "The lecture starts with an introduction and a presentation of the base technologies for Cloud and Grid computing. The layered architecture of Grids and the base services are presented. Cloud Computing is then introduced and the different models SaaS, PaaS, IaaS. The list of base services is extended for Cloud Computing. The lecture also covers a discussion of legal issues.",
        "voraussetzungen": "Knowledge in computer architectures and distributed systems would be helpful.",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Cloud Computing",
            "application development",
            "resource planning",
            "Security",
            "Distributed Systems",
            "Research",
            "Presentation"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4132629&pOrgNr=1",
        "name": "DevOps: Engineering for Deployment and Operations",
        "kennung": "CIT423001",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "This module focuses on the practical application of the covered content. After completing the course, students will be able to:\n• Explain DevOps Principles: Critically examine and differentiate between the cultural and organizational aspects of DevOps to optimize the software development lifecycle.\n• Apply Virtualization and Cloud Integration: Implement and execute virtualization and cloud technologies to enhance operational efficiency.\n• Design Deployment Strategies: Construct continuous integration and delivery pipelines using systematic planning and creative problem-solving.\n• Evaluate Monitoring and User Feedback: Assess monitoring strategies and interpret user feedback to refine and improve the development process.\n• Apply Security and Compliance Best Practices: Integrate security processes and compliance measures by incorporating cross-cutting security aspects to facilitate risks.\n• Create Microservices and Scalable Architectures: Design and develop scalable microservice architectures, applying innovative solutions to complex system requirements.\n• Operate Production Environments: Configure deployment software measures, apply best practices for incident management and resolve problem, e.g. rollbacks.\n• Investigate Advanced DevOps Topics: Explore and research advanced concepts and current trends in DevOps to foresee the impact on future methodologies and practices.",
        "inhalt": "DevOps is an integrative approach to software engineering, blending development (Dev) and operations (Ops) to optimize the software development lifecycle, enhance collaboration, and streamline workflows. It emphasizes the use of automated processes, continuous integration, and deployment strategies to improve the efficiency and quality of software systems. It has become a widely adopted practice in the software industry, since it leads to shorter release cycles of software while achieving high quality. Key topics in DevOps include, among others:\n• Introduction and Overview of DevOps\n• DevOps Culture and Organization\n• Software Engineering in DevOps\n• Virtualization, Containers, and Cloud Integration\n• Deployment Strategies and Continuous Delivery\n• Monitoring, Feedback, and User-Centric Approaches\n• Security, Risk Management, and Compliance\n• Microservices and Scalable Architectures\n• Post-Production Management\n• Advanced Topics and Emerging Trends",
        "voraussetzungen": "This module is designed for students with an advanced understanding of computer science or information systems, typically acquired through a computer science-oriented bachelor's program. To ensure readiness for this course, students should possess the following foundational knowledge and skills:\n1. Solid Programming Background: Familiarity with fundamental programming concepts and techniques is essential. Relevant coursework includes \"Fundamentals of Programming\" (IN0002).\n2. Understanding of Internet/Networking Protocols: A grasp of the basics in computer networking and distributed systems is crucial. This can be achieved through courses like \"Introduction to Computer Networking and Distributed Systems\" (IN0010).\n3. Basic Software Engineering and Architecture Knowledge: An understanding of software engineering principles, including distributed version control and software architecture, is required. Suitable courses include \"Introduction to Software Engineering\" (e.g., IN0006) and \"Software Architectures\" (e.g., IN2088).\n\nAdditionally, familiarity with the following areas will be beneficial, though not mandatory:\n• Cloud Technologies: Knowledge of cloud computing, virtual machines, and containers (e.g., Cloud Computing, IN2073).\n• Internet Security: Understanding of the key concepts and challenges related to internet security (e.g., IT Security, IN0042).\n• Software Development Methodologies: Familiarity with approaches to software development and project management.\n• Deployment and Operation: Insights into the processes involved in the deployment and operation of software systems.",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "critical thinking",
            "problem solve",
            "Process Improvement",
            "Collaboration",
            "Communication",
            "Automation",
            "continuous integration",
            "Deployment",
            "Monitoring",
            "Security",
            "Compliance",
            "Microservices",
            "Scalability",
            "Incident Management",
            "Research"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456996&pOrgNr=1",
        "name": "Network Security",
        "kennung": "IN2101",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmenden verstehen Sicherheitsziele für das Internet und die Komponenten, in denen Kommunikationsprotokolle implementiert werden. Sie verstehen die Möglichkeiten, die Angreifern im Netz zur Verfügung stehen. Sie verstehen den Schutz, den kryptographische Verfahren und Mechanismen der Netzsicherheit bieten, und verfügen über das Wissen, Protokolle für die Netzsicherheit anzuwenden und Architekturen umzusetzen, mit denen sich konkrete Sicherheitsziele erreichen lassen.",
        "inhalt": "Diese Vorlesung bietet eine Einführung in das Feld der Netzsicherheit. Mögliche Bedrohungsszenarien bilden den Ausgangspunkt und liefern die Anforderungen für den Entwurf sicherer Netze. Nach einer Einführung in die Grundlagen wird die Integration von Sicherheitsmaßnahmen in Netzwerkarchitekturen und Netzwerkprotokolle diskutiert. Sicherheitslücken bestehender Systeme werden ebenfalls thematisiert.\nAls Grundlage zur Realisierung von Sicherheitsmechanismen werden kryptografische Basiskonzepte (insb. symmetrische und asymmetrische Verschlüsselung sowie kryptographische Hash-Funktionen) behandelt. Anschließend werden die Grundlagen und Methoden für Sicherheitsprotokolle zur Authentisierung, Autorisierung, Zugriffkontrolle, Integritätssicherung, Vertraulichkeit und Nichtabstreitbarkeit diskutiert. Anschließend werden konkrete Sicherheitstechniken insbesondere in der TCP/IP-Protokollfamilie behandelt. Die Beispiele aus der Praxis beinhalten PKI, Kerberos, IPSec, TLS sowie Firewall-Architekturen und Intrusion Detection Systeme.",
        "voraussetzungen": "IN0009 Grundlagen: Betriebssysteme und Systemsoftware, IN0010 Grundlagen: Rechnernetze und Verteilte Systeme",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Cryptography",
            "network security",
            "Protocols",
            "Security Architecture Review",
            "Secure Communication Protocols",
            "threat assessment"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460596&pOrgNr=1",
        "name": "Security Engineering",
        "kennung": "IN2178",
        "organisation": "Department Computer Engineering",
        "anmerkung": "Erhöhung auf 5 Credits ab SoSe 2014",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, Prozesse und Techniken für Analyse, Design, Evaluierung und Betrieb sicherer IT-Anwendungen, sowie Design Umsetzung, und Verifikation sicherer Software zu verstehen und anzuwenden. Damit werden die Studierenden befähigt, die IT-Sicherheit von Anwendungen zu analysieren und zu bewerten, sowie angemessene IT-Sicherheitslösungen systematisch zu entwickeln und darzustellen.",
        "inhalt": "Eine sichere IT-Anwendung erfordert sowohl die Anwesenheit erwünschter Sicherheitsfunktionalität (Beispiel: Zugriffskontrolle), als auch die Abwesenheit unerwünschter Sicherheitsmängel (Beispiel: Verarbeitung ungeprüfter Benutzereingaben).\n\nWir besprechen grundlegende Begriffe (Beispiel: Security versus Safety), sowie Sicherheitsziele und sichere Designprinzipien (Beispiel: Least Privilege). Wir lernen den Entstehungsprozess sicherheitskritischer Anwendungen kennen.\n\nSchwerpunkte bilden Systemanalyse, Bedrohungs- und Risikoanalyse, Ableitung der Sicherheitsanforderungen, und Empfehlung von möglichen Sicherheitsmaßnahmen, auch unter Berücksichtigung von wirtschaftlichen Aspekten. Wir lernen, wie Sicherheitsrichtlinien definiert werden und wie sie sich in einer Sicherheitsarchitektur im Rahmen der Gesamtsystemarchitektur widerspiegeln. Wir betrachten exemplarisch grundlegende Sicherheitsmechanismen (Beispiel: PKI). Wir adressieren Methoden zur Validierung und Bewertung sicherer Anwendungen (Beispiel: Common Criteria) und beschäftigen uns mit Konzepten zum IT-Sicherheitsmanagement (Beispiel: ISO 2700x) und zum sicheren Betrieb von Anwendungen. Ein weiterer Schwerpunkt ist die Entwicklung sicherer Software. Wir sprechen die grundlegenden Angriffs-Vektoren von Hackern, Crackern und Schadsoftware-Autoren an. Wir erfahren, wie unsichere Programmierung Verwundbarkeiten eröffnet (Beispiel: Cross-Site-Scripting). Wir lernen, wie man systematisch nach solchen Schwachstellen sucht. Wir untersuchen den professionellen Umgang mit Sicherheitsvorfällen, und die Arbeit von \"Computer Emergency Response Teams\" (CERTs). Wir adressieren Prinzipien und Richtlinien sicheren Software-Entwurfs und sicherer Programmierung, sowie entsprechende Verifikationsmethoden. Wir betrachten exemplarisch den \"Security Development Cycle\" von Microsoft, sowie Modelle zur Bestimmung der Güte eines sicheren Software-Entwicklungsprozesses und zu seiner Verbesserung (Beispiel: SSE-CMM).",
        "voraussetzungen": "IN2209 IT Sicherheit",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Cybersecurity",
            "Risk Assessment",
            "threat assessment",
            "Security Requirements",
            "Security",
            "Security Architecture Review",
            "software security",
            "Vulnerability Analysis",
            "incident response",
            "Secure Application Design",
            "Secure Programming",
            "Security Verification",
            "Security Metrics and Reporting",
            "security manage",
            "Security Operations"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3260506&pOrgNr=1",
        "name": "Strategic IT Management",
        "kennung": "CIT4230000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After participating in the module, students will be able to understand the key challenges, concepts, methods and decision areas of strategic IT management and their interactions. Furthermore, students will understand the relationship between strategic IT management, enterprise architecture management, scaled agile software development and IT governance. Moreover, after participating in the module, students have in-depth knowledge of patterns and frameworks of enterprise architecture management and scaled agile software development in the areas of models, methods, metrics and visualizations, among others.",
        "inhalt": "1. IT Strategy and IT Management Frameworks\n2. IT Governance and IT Organisation\n3. Enterprise Architecture Management\n3.1 Schools of EAM\n3.2 Foundations of EAM\n3.3 Capability Based Planning\n3.4 Agile EAM and EAM Patterns\n4. Large-scale Agile Software Development\n4.1 Foundations and Frameworks of LSAD\n4.2 Selected Topics of LSAD\n5. Case Studies",
        "voraussetzungen": "Bachelor in Informatics or Information Systems, specifically:\n- Fundamentals of Business Information Systems\n- Databases\n- Software Engineering\n- Business Process Management",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Strategic Management",
            "it service management",
            "enterprise architecture",
            "Agile Methodologies",
            "Governance",
            "Organization Design",
            "Capability Planning",
            "Metrics",
            "Data Visualization",
            "decision make",
            "Frameworks",
            "Models",
            "Methods",
            "Patterns",
            "Interaction"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2809336&pOrgNr=1",
        "name": "Requirements Engineering",
        "kennung": "IN2394",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with the basic concepts and methods of Requirements Engineering. They have the ability to analyse typical scenarios and identify typical challenges. Furthermore, students can apply and evaluate suitable concepts and methods for concrete problems.",
        "inhalt": "Requirements Engineering (RE) as a first and ongoing activity of a development project, is crucial for the success of every project, as its outcome determines the further course of the project.\n\nIn this activity, the stakeholders are identified. Their goals are analysed and conflicting goals resolved. A variety of elicitation methods and decomposition techniques are applied to deduce concrete requirements. Depending on the context of the project, different methods to formulate these requirements are necessary. Continuous quality control is essential to mitigate the risk of project failure due to ill-formulated or invalid specifications.\nFurthermore, non-functional requirements need to be formulated with great care to minimize subjectiveness. One major challenge in the context of RE is to manage permanently occurring change. This change can happen due to moving goals of the stakeholders or changes in the environment of the system under construction.\n\nThe lecture \"Requirements Engineering\" covers all important topics of Requirements Engineering (RE), especially the RE-Tasks, different types of requirements, requirement extraction, negotiation, documentation, and management. It is shown how the first, mostly informal, requirements are described, concretized, potentially formalized, managed, and evolved. This lecture considers different process models that are used for and within RE.\nThis forms a solid basis for students to become active in both industrial requirements engineering and RE research.",
        "voraussetzungen": "IN0006 Introduction to Software Engineering",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Requirements Analysis",
            "stakeholder management",
            "Goal Identification",
            "Conflict Resolution",
            "Elicitation Techniques",
            "Decomposition Methods",
            "Requirement Formulation",
            "quality assurance",
            "change management",
            "Non-functional Requirements",
            "Technical Documentation",
            "Business Negotiation",
            "Process Modeling",
            "project management",
            "Communication"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4390207&pOrgNr=1",
        "name": "AI Governance",
        "kennung": "CIT323002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After attending this class, students can understand, assess, and contextualize different facets of AI governance based on the EU AI Act and its operationalization at the level of university education.",
        "inhalt": "As AI technologies increasingly permeate various sectors, it is crucial for future developers to understand the ethical, legal, and social dimensions of their work. The lecture series “AI Governance” will invite experts to talk about topics ranging from responsible AI over participatory AI to the European AI Act. The structure of the lecture series is provided by the EU AI Act's obligations to high-risk AI system providers, including data and data governance, transparency, human oversight, or risk management. The lecture series will provide students with both theoretical and practical approaches to AI governance based on the European legal framework.\nAll lectures will link to \"Responsible AI\" and “Participatory AI”, covering principles such as fairness, accountability, and transparency, and exploring the role of diverse stakeholders in the AI development process. Thereby, methods for engaging communities and ensuring that AI solutions reflect a wide range of perspectives and needs will be highlighted. With a focus on regulatory frameworks, particularly the EU AI Act, students will learn about risk assessment, compliance, and the responsibilities of AI practitioners in adhering to the AI Act.\n\nThe lecture series will include sessions on:\n- The context of the EU AI Act\n- The EU AI Act as legal framework\n- Risk Management (Art 9)\n- Risk Management (e.g., NIST)\n- Data and Data Governance (Art 10)\n- Record-Keeping (Art 12)\n- Transparency (Art 13)\n- Human Oversight (Art 14)\n- Accuracy and Robustness (Art 15)\n- Cybersecurity (Art 15)\n- Post-Market Monitoring (Art 72)\n- Quality Management System (Art 17)\n- AI literacy (Art 4)\n- Fundamental Rights Impact Assessment (Art 27)\n- AI Audits",
        "voraussetzungen": "Basic understanding of the fundamentals of artificial intelligence",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "critical thinking",
            "Ethics",
            "Compliance",
            "risk management",
            "Data Governance",
            "Transparency",
            "Human-AI Interaction",
            "Stakeholder Engagement",
            "Fairness",
            "Accountability",
            "Responsible AI",
            "Participatory Design",
            "Regulatory Frameworks",
            "Cybersecurity",
            "quality assurance"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1231549&pOrgNr=1",
        "name": "Foundations in Data Engineering",
        "kennung": "IN2326",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden können die wesentlichen Konzepte von verteilter Datenhaltung anwenden und charakterisieren. Sie kennen Analysealgorithmen auf sehr großen, verteilten Datenmengen und können sie systematisch und qualifiziert nutzen, implementieren und bewerten. Sie können die Techniken zur Optimierung der Analyseprozesse einschätzen und kombinieren und sind in der Lage, diese für unterschiedliche Randbedingungen (z.B. Datencharakteristik, Systemarchitektur) weiter zu entwickeln. Sie wissen um die gesellschaftliche Bedeutung der erlernten Techniken.",
        "inhalt": "Datenorganisation, effiziente Analyse großer Datenmengen, verteilte Datenhaltung (abhängig von der Systemarchitektur, z.B. Mehrkernsysteme, Multiprozessorsysteme, Cluster), verteilte und parallele Datenanalyse, Statistik-gestützte Optimierung von Analyseprozessen (z.B. durch Dimensionsreduktion), map/reduce Techniken und ihre Verallgemeinerung zur verteilten Anfrageverarbeitung, Anwendungen in Systemen wie Hadoop und in NoSQL Systemen, gesellschaftliche Auswirkungen, Bedeutung von Datenschutz",
        "voraussetzungen": "IN0001 Einführung in die Informatik 1, IN0008 Grundlagen: Datenbanken, IN0007 Grundlagen: Algorithmen und Datenstrukturen",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Data Analysis",
            "Data Engineering",
            "Data Processing",
            "Data Structures",
            "Distributed Computing",
            "Distributed Systems",
            "Optimization Techniques",
            "Parallel Computing",
            "Programming",
            "Query Processing",
            "Statistics",
            "system architecture",
            "system design",
            "Data Visualization"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1534926&pOrgNr=1",
        "name": "Fundamentals of Human-Centered Robotics",
        "kennung": "EI04014",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Nach Abschluss dieses Moduls sind die Studierenden in der Lage die verschiedenen Methoden und Technologien der sicheren physikalischen Mensch-Roboter-Interaktion zu verstehen und zu bewerten. Sie wissen die theoretischen Grundlagen der Robotersteuerung für eine sichere Mensch-Roboter-Interaktion anzuwenden. Sie können selbst Programme von Robotern auf den Grundlagen neuester Methoden zur globalen Bewegungsplanung in dynamischen Umgebungen entwickeln. Darüber hinaus haben sie einen Überblick über Bewegungsplanungsalgorithmen zur Kollisionsvermeidung und können diese praktisch in der Robotik umsetzen. Sie könne, von einer spezifischen Problemstellung ausgehend, sichere und menschen-freundliche Programme zur physikalischen Mensch-Roboter-Interaktion entwickeln und praktisch umsetzen und evaluieren.",
        "inhalt": "Die Vorlesung Human-Centered Robotics umfasst eine gründliche Einführung in die Technologie und die intelligente Steuerung von kollaborativen Robotersystemen. Die theoretischen Grundlagen und Anwendungsmöglichkeiten von interagierenden Robotern werden ausführlich diskutiert. Tutorials vertiefen das konzeptionelle Verständnis der interaktiven Robotik und der entsprechenden Softwaretools. Die Studenten lernen die Grundlagen der Robotersicherheit, der menschenfreundlichen, KI-basierten Aufgaben- und Wegplanung in dynamischen Umgebungen. Um praktische Erfahrungen zu sammeln und die Kurskonzepte in modernster Robotertechnik anzuwenden, werden Robothons angeboten, die darauf abzielen, reale Herausforderungen mit hochmotivierten Studierendenteams aus 4-6 Mitgliedern aus verschiedenen Disziplinen zu lösen.\nDie Kursskizze ist unten abgebildet.\n\nI. Einführung\n- Eine kurze Geschichte der Robotik\n- Was ist menschenfreundliche Robotik?\n\nII. Mechanisches Design und dynamische Modellierung für Sicherheit und Leistung\n- Steife Roboter\n- Roboter mit flexiblen Elementen\n- Intrinsisch nachgiebige Roboter\n- Sicherheit für die physische Mensch-Roboter-Interaktion\n\nIII. Roboterregelung für unbekannte Umgebungen und Mensch-Roboter-Interaktion\n- Perzeption und Aktuierung für die interaktive Robotik\n- Bewegungssteuerung\n- Kraft- und Impedanzregelung\n- Kollisionserkennung und -reaktion\n\nIV. Echtzeit-Bewegungsplanung\n- Echtzeit-Trajektorienplanung\n- Umgebungserfassung und -wahrnehmung\n- reaktive Bewegungsplanung in Echtzeit und Kollisionsvermeidung\n- Hierarchische Bewegungssteuerung\n\n\nDie Übungen konzentrieren sich auf folgende Themen:\n- Robotermodellierung - Einführung in die Modellierung von starren und flexiblen Gelenkrobotern\n- Robotersteuerung - Einführung in die angewandte Robotersteuerung in dynamischen Umgebungen mit Fokus auf die Sicherheit des Menschen.\n- Bewegungsplanung - Entwurf und Durchführung einer sicheren dynamischen Trajektorienplanung\n\nWährend des Robothon sammeln die Studenten praktische Erfahrungen bei der Lösung realer Probleme mit Robotersystemen. Die Studierenden arbeiten in interdisziplinären Teams zusammen, in denen jedes Team eine gewünschte Roboteraufgabe zur Umsetzung auswählt, wobei der Schwerpunkt auf der Zusammenarbeit zwischen Mensch und Roboter liegt. Die Studierenden sind verantwortlich für die Leitung des gesamten Projekts, die Erstellung des Projektplans, die Durchführung des Projekts in einem interdisziplinären Team, die termingerechte Fertigstellung des Projekts und die Präsentation der Ergebnisse vor den Kursteilnehmern. Projektbeispiele aus früheren Robothons in Hannover finden Sie unter: https://www.roboterfabrik.uni-hannover.de",
        "voraussetzungen": "Regelungssysteme 1\nRobotik",
        "modulniveau": "Bachelor",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Physical Human-Robot Interaction",
            "Robotic Control",
            "Motion Planning",
            "Collision Avoidance",
            "Robotics Safety",
            "Perception and Actuation",
            "Force and Impedance Control",
            "Real-time Trajectory Planning",
            "Environmental Awareness",
            "Interdisciplinary Teamwork",
            "project management",
            "Presentation Skills",
            "Dynamic Environments",
            "Flexible Robotics",
            "Compliant Robotics"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1734330&pOrgNr=1",
        "name": "Concepts of C++ Programming",
        "kennung": "IN2377",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer beherrschen die unten genannten Konzepte der C++ Programmierung. Sie sind in der Lage, diese eigenständig zu analysieren und die entsprechenden Analysen auf verwandte Probleme der Programmierung anzuwenden. Ferner sind die Teilnehmer in der Lage, die behandelten C++ Programmierkonzepte einzusetzen, sie ggf. zu modifizieren und verschiedene Lösungen in ihrer Güte zu vergleichen.",
        "inhalt": "Das Modul behandelt zunächst die grundlegenden Konzepte der C++ Programmiersprache (Syntax, starke Typisierung, Typableitungen, Fokus auf Laufzeiteffizienz). Danach werden in dem Modul die zentralen, modernen C++ Programmierkonzepte vorgestellt.\n- Konzepte für das effiziente Ressourcen Management: Das Modul behandelt RAII, smart pointers, universelle Referenzen, Eigentümer und Kopieren/Bewegen.\n- Konzepte der prozeduralen Programmierung: Das Modul behandelt die C++ Mechanismen zur prozeduralen Programmierung, wie Funktionen, Parameterübergabe, Lambdas, Überladung, und Fehlerbehandlung.\n- Konzepte der objektorientierten Programmierung: Das Modul untersucht Klassen, Vererbung (einfach und mehrfach), Polymorphie, und RTTI.\n- Konzepte der generischen Programmierung: Das Modul behandelt Templates, Variadische Templates und Fold Expressions, Expression Templates für lazy evaluation, und typische Patterns wie CRTP\n- Konzepte der Compile-time Programmierung: Das Modul untersucht Konzepte wie Template Rekursion, constexpr und type traits.\n- Konzepte für Container, Iteratoren und Ranges: Das Modul behandelt die STL Standard-Container, Algorithmen und Laufzeitgarantien, Iteratoren-Konzepte sowie Views und Ranges.\n- Konzepte für Build-Systeme und Abhängigkeitsmanagement: Untersucht werden Konzepte zum automatischen Kompilieren, Linken sowie Management von Abhängigkeiten. Ausserdem werden Konzepte zum kontinuierlichen Testen und Integrieren behandelt.\n- Optional werden Konzepte zur parallelen Programmierung behandelt, wie Threads, Atomics und async/futures.\nIm Stoffspektrum des Moduls ist auch ein Ausblick auf zukünftige C++ Konzepte vorgesehen, wie Modules, Concepts und Metaklassen.",
        "voraussetzungen": "IN0001: Einführung in die Informatik\nIN0002: Praktikum: Grundlagen der Programmierung\nIN0007: Grundlagen: Algorithmen und Datenstrukturen",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "2024S",
        "matching": [
            "Programming",
            "Object-Oriented Programming",
            "Generic Programming",
            "Compile-Time Programming",
            "Resource Management",
            "Procedural Programming",
            "Error handling",
            "Containers",
            "Iterators",
            "Ranges",
            "Build Systems",
            "Dependency Management",
            "Parallel Computing",
            "Concurrency",
            "Asynchronous programming"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1329289&pOrgNr=1",
        "name": "System Design for the Internet of Things",
        "kennung": "EI71013",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of the module, the participants are able to make informed design decisions for the development of Internet of Things (IoT) devices and applications. They will be able to evaluate, compare and apply different platforms, algorithms, protocols and system architectures for IoT applications, considering sensing, computation, communication and energy aspects. They will be able to apply the learned design methodologies, algorithms and protocols to develop new applications based on examples from, e.g., the smart energy domain which are presented in the course. Critical reflection on the societal impact of the IoT together with safety, security and privacy aspects will be encouraged.",
        "inhalt": "Introduction to embedded and cyber-physical systems and the IoT; application scenarios for IoT; wireless sensor networks and IoT; design and modeling of embedded platforms; sensors, actuators and computation/control; processing of large data sets; energy supply and constraints; architectures of distributed systems; Internet principles; communication frameworks and protocols; consumer-producer and publisher-subscriber communication patterns; safety, information security and privacy concepts; software design patterns for dependable systems; system simulation and validation; application examples, among others, from the smart energy, smart manufacturing and automotive domains.",
        "voraussetzungen": "Basic principles of embedded systems, internet communication, programming.",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "system design",
            "Internet of Things",
            "Embedded IT Systems",
            "Cyber-Physical Systems",
            "Wireless Sensor Networks",
            "Embedded Platforms",
            "Sensors",
            "Actuators",
            "Data Processing",
            "Energy Systems",
            "Distributed Systems",
            "Protocols",
            "software design",
            "System Simulation",
            "software validation"
        ]
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1150616&pOrgNr=1",
        "name": "Connected Mobility Basics",
        "kennung": "IN2324",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students will remember the basic elements that constitute connected mobile systems and understand the (technical) issues relevant to mobile system and service design and their evaluation. They recognize challenges arising from mobility and mobile networking. They understand the requirements for and the limitations of simulation-based evaluation of mobile services. They have an overview of the different components and techniques at their disposal to realize mobile services. They understand the principles of these underlying methods, know their advantages and disadvantages and can apply methods of design, modeling, and evaluation to simple example cases.",
        "inhalt": "The module IN2324 offers a broad introduction, including the following topics:\n- Introduction to mobile systems\n- Mobile systems by example\n- Mobility: models and simulations\n- Wireless networking technologies\n- Architectures and protocols for mobile networks\n- Architectures for mobile services and systems\n- Mobile measurements\n- Security and privacy",
        "voraussetzungen": "Recommended requirements are basics in computer networks and distributed systems (IN0010 or equivalent knowledge) as well as command of the Java programming language.",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1498591&pOrgNr=1",
        "name": "Software Architecture for Distributed Embedded Systems",
        "kennung": "EI71036",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of the module, the participants are able to explain, apply and develop software architectures for embedded and distributed systems. The students are able to discuss and evaluate different architectural design patterns and design paradigms for such systems. They are able use the learned methods for both the choice of appropriate software architectures and to solve specific problems for applications based on the insights provided in this course, as well as to apply the methods and architectural concepts in system design processes.",
        "inhalt": "Introduction to object oriented software development; Unified Markup Language (UML) representation; basic principles of pattern-oriented software design; specific requirements for embedded systems; challenges of distributed architectures; selected structural, behavioral and creational \"gang of four\" design patterns which are relevant to the targeted applications; design patterns in the context of resource constrained embedded systems: hardware access, concurrency and resource management, safety and reliability; patterns for event handling, service access, configuration and concurrency of distributed applications.",
        "voraussetzungen": "Principles of embedded computing systems, object oriented programming.",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Object Oriented Concepts",
            "software architecture",
            "Design Patterns",
            "Embedded IT Systems",
            "Distributed Systems",
            "UML",
            "system design",
            "Concurrency",
            "resource planning",
            "event management",
            "Service Access",
            "system configuration",
            "safety assurance",
            "Reliability",
            "problem solve"
        ]
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1357575&pOrgNr=1",
        "name": "Business Analytics (Doktorat)",
        "kennung": "IN2351",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul kennen Studierende verbreitete Verfahren für Klassifikation, numerische Vorhersage und Clustering. Sie kennen die Annahmen verschiedener Verfahren und verstehen deren Funktionsweise und typische betriebswirtschaftliche Einsatzgebiete. Teilnehmer können Datensätze mit der Programmiersprache R analysieren und die Ergebnisse der Analysen interpretieren.",
        "inhalt": "Inferential Statistics, Multi-linear Regression, Logistic and Poisson Regression, Naïve Bayes and Bayes Nets, Decision Tree Classifiers, Data Preparation, Evaluation of Classifiers and Learning Theory, Ensemble Methods and Clustering, Dimensionality Reduction, Association Rules",
        "voraussetzungen": "IN0007 Grundlagen: Algorithmen und Datenstrukturen, IN0008 Grundlagen: Datenbanken",
        "modulniveau": "",
        "sprache": "Englisch",
        "gültig bis": ""
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456521&pOrgNr=1",
        "name": "Anwendungen Wissenbasierter Methoden",
        "kennung": "IN2058",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "The participants attain detailed knowledge about current techniques for designing and realizing knowledge-based systems and their applications to real-world problems, especially in the context of the world-wide web and the control of intelligent software systems. In the accompanying exercises, participants will gain knowledge about the design and realization of central components of such systems.",
        "inhalt": "The lecture course teaches state-of-the-art techniques for implementing knowledge-based systems and applying them to real problems, in particular in the contexts of the World Wide Web and controlling intelligent systems. The lecture course covers the following topics:\n- description logics: representation of taxonomic knowledge and reasoning about it;\n- principles of the Semantic Web: Semantic Markup Languages, Inference mechanisms and engines for the Semantic Web;\n- information systems in the WWW: data integration from distributed information sources; wrappers and wrapper learning; planning mechanisms for data integration; global-as-view and local-as-view abstractions;\n- Semantic Web Services and planning complex services;\n- selected examples of intelligent web services;\n- grounded knowledge representation: principles of data mining and the integration of data mining mechanisms into knowledge-based systems",
        "voraussetzungen": "IN2062 Techniques in Artificial Intelligence, basic courses in informatics",
        "modulniveau": "Bachelor/Master",
        "sprache": "Deutsch/Englisch",
        "gültig bis": ""
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=487473&pOrgNr=1",
        "name": "Tracking and Detection in Computer Vision",
        "kennung": "IN2210",
        "organisation": "Department Computer Science",
        "anmerkung": "seit WS15 7 Credits und 6 SWS",
        "lernergebnisse": "In the end, the students will have a thorough description of the most important tracking and detection techniques. They should be able to understand and implement those solutions and apply them in reasonably complex problems. The concepts described in this course will be accompanied with brief explanations of the necessary mathematical tools. The participants of this course will be given an important basis to follow the vast and growing Computer Vision literature and use the acquired knowledge to solve new practical problems.",
        "inhalt": "Computer Vision, as a relatively young research area, has emerged as a key discipline in computer science.\nThis is not only evident by a growing and highly competitive research community with a high impact factor in computer science, but also by the emergence of numerous vision companies turning research ideas into a myriad of commercial applications. Besides well-known studies of 3D geometry and camera models, object tracking and detection in images and videos becomes one of the principal research directions of modern Computer Vision. The main objective of this course is to provide students with a gradual introduction to modern tracking, detection and recognition techniques developed in the last years. The course will provide in-depth knowledge of image features, their detection and description, matching techniques, key-point recognition, basic and advanced tracking algorithms based on image features and image intensities, basics of probabilistic and machine learning methods for tracking and object detection. Note that every year the course content is refreshed with new the most promising and potentially the most influential works in the field.\nThe following topics will be handled\n\n- Introduction (overview of the course)\n- Convolution and filtering:\n-- Basic of image formation\n-- Convolution and correlation\n-- Non-linear filtering\n-- Gaussian Filtering\n-- Image Derivatives\n-- Edge Detection\n- Local invariant feature detectors:\n-- Harris corner\n-- Harris Laplace/Affine\n-- Hessian, Hessian-Laplace/Affine\n-- FAST\n- Feature descriptors:\n-- Difference of Gaussians and SIFT\n-- Integral images and SURF\n-- Histogram of Oriented Gradients (HOG)\n- Keypoint recognition:\n-- Randomized trees\n-- FERNS\n-- Keypoint signatures\n- Face detection\n-- Haar features\n-- Ada-boost\n-- Viola-Jones Face Detection\n- Camera models and projections\n-- Model based tracking\n-- Pose estimation from 2D-3D coresspondencies (DLT, P-n-P)\n-- Rotation parametrization\n- Non-linear optimisation\n-- Robust estimators\n-- RANSAC\n- Template tracking methods:\n-- Lucas-Kanade,\n-- Compositional Alg.\n-- Inverse Compositional\n-- ESM\n-- Linear Predictor\n- Mean-shift tracking\n-- mean-shift for pdf estimation\n-- mean-shift for segmentation\n-- mean-shift for object tracking\n-- multi-scale\n- Template matching approaches\n-- basic correlation methods (SAD, NCC etc.)\n-- DOT(Dominant Orientation Template)\n-- LineMod (LINEarizing the memory multiMODal template matching)\n- Kalman and particle filtering\n-- basics Kalman filer\n-- basics Particle filer\n-- applications to visual tracking\n-- applications to camera tracking\n- Tracking with Dictionary Learning",
        "voraussetzungen": "Most of the knowledge required should be part of the normal background in Computer Science, undergraduate/graduate Mathematics and Geometry.",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": ""
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3399657&pOrgNr=1",
        "name": "Projektwoche Natural Language Processing (NLP)",
        "kennung": "CIT1330001",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Am Ende des Kurses werden die Studierenden ein grundsätzliches Verständnis von verschiedenen Ansätzen im Bereich Natural Language Processing haben. Sie werden praktische Kenntnisse zur Implementierung von NLP-Algorithmen erworben haben, von syntaktischen und semantischen Analysen über neueste Transformer-basierte generative Sprachmodelle hin zur automatischen Generierung von Bildern aus kurzen Text-Prompts über Text2Image Modelle. Sie werden Vor- und Nachteile der Modelle kennenlernen, die aktuellen Diskussionen nachvollziehen können und selbständig in der Lage sein, sich in neueste Entwicklungen schnell einzuarbeiten.",
        "inhalt": "Natural Language Processing (NLP) ist ein interdisziplinäres Fachgebiet an der Schnittstelle zwischen der Informatik und der Linguistik sowie mittlerweile ein Teilbereich der Künstlichen Intelligenz. Es befasst sich mit Algorithmen, welche die natürliche Sprache des Menschen (geschrieben oder gesprochen) interpretieren, um darüber einen Computer zu befähigen aus dem Inhalt Erkenntnisse zu ziehen. So kann man beispielsweise Texte gewissen Themen zuordnen, ähnliche Texte finden, Texte als positiv oder negativ behaftet einstufen. Neueste Sprachmodelle, die auf künstlicher Intelligenz beruhen, können in Texten Antworten auf Fragen finden, Texte automatisiert zusammenfassen, sie vervollständigen und selbst vollkommen neue Texte generieren.\n\nZiel des Projektpraktikums Natural Language Processing ist die Vermittlung von grundlegendem Wissen zu Natural Language Processing und aktuell in der Praxis eingesetzten Algorithmen, sowie die Vermittlung von praktischen Kenntnissen zur Interpretation von Texten und Verwendung in Anwendungsbeispielen. Die Studierenden erlernen dazu die erforderlichen Programmierkenntnisse in der Programmiersprachen Python.\n\nFolgende Teilbereiche werden vermittelt:\n- Syntaktische und statistische NLP Methoden\n- Transformerbasierte Modelle, generative Sprachmodelle\n- Text2Image Modelle\nWir diskutieren verschiedene Methoden und aktuelle Entwicklungen diskutieren und wenden diese praktisch an, um\n- Möglichkeiten und konkrete Anwendungen für Natural Language Processing zu erkennen und zu verstehen\n- Systematisch Lösungsansätze zu Aufgabenstellungen im Bereich des Verstehens und Generierens von Texten zu finden\n- Aktuelle Herausforderungen und Diskussionen im Bereich NLP und speziell transformer-basierter generativer Sprachmodelle zu kennen und nachvollziehen zu können, Überlegungen zu aktuellen Herausforderungen anzustellen\n- In team-orientierter Arbeitsweise verschiedene Teilaufgaben einer Problemstellung zu einem kohärenten Gesamtergebnis zusammenzusetzen",
        "voraussetzungen": "Die Vorlesung basiert auf folgenden Vorkenntnissen, die in den Lehrveranstaltungen erworben wurden:\n- Grundlegende Programmierkenntnisse in Python\n- Bereitschaft zur aktiven Teilnahme an Diskussionen und Gruppenarbeiten\n- Keine anderen überlappenden Kurse",
        "modulniveau": "Bachelor",
        "sprache": "Englisch",
        "gültig bis": ""
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2863073&pOrgNr=1",
        "name": "Business Analytics and Machine Learning",
        "kennung": "IN2028",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul kennen Studierende verbreitete Verfahren für Klassifikation, numerische Vorhersage und Clustering. Sie kennen die Annahmen verschiedener Verfahren und verstehen deren Funktionsweise und ausgewählte wirtschaftswissenschaftliche Einsatzgebiete. Teilnehmer können Datensätze mit der Programmiersprache R analysieren und die Ergebnisse der Analysen interpretieren.",
        "inhalt": "Regression Analysis, Regression Diagnostics, Generalized Linear Models, Naïve Bayes, Decision Tree Classifiers, Data Preparation, Causal Inference, Model Selection, Ensemble Methods, Clustering, High-Dimensional Problems, Neural Networks, Convex Optimization",
        "voraussetzungen": "MA0901 Lineare Algebra für Informatik, MA0902 Analysis für Informatik, IN0018 Diskrete Wahrscheinlichkeitstheorie oder MA9712 Statistik",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": ""
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3393112&pOrgNr=1",
        "name": "Computational Intelligence",
        "kennung": "CIT1330000",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Nach dem erfolgreichen Abschluss des Moduls sind Studierende in der Lage, moderne Methoden der Computational Intelligence allgemein anzuwenden sowie Anwendungsfälle speziell im Bereich der Steuerungs- und Regelungstechnik zu analysieren.",
        "inhalt": "Einführung in Theorie und Anwendung Neuronaler Netze (Single-Layer Neuronale Netze, Multilayer Neuronale Netze und Backpropagation, Radial-Basis Function Netze, Rekurrente Neuronale Netze)\n\nFuzzy- und Neuro-Fuzzy-Verarbeitungstechniken (Grundlagen der Fuzzy Set Theorie, Fuzzy Relations und Fuzzy Logic Inference, T-S fuzzy)\n\nEvolutionsverfahren und genetische Algorithmen zur Optimierung (Evolutionsbasiertes Rechnen, Evolutionsbasierte Optimierung, Evolutionsbasiertes Lernen und Problemlösung)",
        "voraussetzungen": "Programmierkenntnisse in \"Matlab\"",
        "modulniveau": "Bachelor",
        "sprache": "Englisch",
        "gültig bis": ""
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=756539&pOrgNr=1",
        "name": "Middleware und verteilte Systeme",
        "kennung": "IN2258",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "1. Understand common pitfalls that determine the development of distributed applications.\n2. Apply basic programming abstractions for building distributed applications (e.g., sockets, messaging, remote procedure call).\n3. Understand characteristics and properties of common middleware abstractions.\n4. Apply higher-level middleware abstractions for building distributed applications (e.g., publish/subscribe, transactions).\n5. Evaluate the applicability of common middleware abstractions in building distributed application architectures.\n6. Understand patterns applicable for implementing middleware abstractions.",
        "inhalt": "A \"middleware system\" is a programming abstraction and constitutes a set of services that aim at facilitating the development of distributed applications in heterogeneous, networked environments. The primary objectives of middleware are to foster application portability, distributed application interoperability, and facilitate software system integration. At least conceptually, the \"middleware layer\" comprises a layer below the application and above the operating system and network substrate. This course introduces basic distributed system principles and middleware systems, aims at identifying the principles underlying the use of middleware systems, and characterizes common middleware paradigms and abstractions. The course describes a large variety of Middleware systems, starting with original Middleware technologies (e.g. DCE, CORBA, DCOM); going to more modern and lightweight solutions (e.g. Java RMI, J2EE, MQ-Series, JMS, Web Services); and finally finishing with state-of-the-art and large-scale technologies (e.g. Apache Thrift, Protocol Buffers, Avro). Examples, case studies, as well as Middleware implementations are studied to achieve a better understanding of the topic.\nCourse outline:\n1. Introduction\n2. Communication basics:\na. Protocol design\nb. Socket programing\nc. External data representation\nd. Remote procedure calls & remote invocations\n3. Middleware foundations\na. Roots, origins, historical development, principles\nb. Role of standards, standardization processes\nc. Reference models (e.g., OMA, RMODP, SOA)\nd. Interoperability, system integration, multi-tiered systems\n4. Middleware paradigms\na. Distributed computing (procedural paradigm, failure semantics)\nb. Distributed objects (object-oriented paradigm)\nc. Messaging Patterns (e.g., request/reply, messaging, publish/subscribe)\nd. Queuing theory/networks\ne. Service-oriented architecture (SOA) and services\nf. Event-driven architecture (EDA))\n5. Middleware systems\na. Naming and directory services\nb. Web Services\nc. Messaging systems\nd. Application servers\n6. Case studies and examples\n7. Middleware implementation techniques",
        "voraussetzungen": "Algorithms and data structures (searching, sorting, hash tables, lists, trees, graphs, basic notions of complexity (O-notation)), basic programing skills and tools (Java, C/C++, concurrency, multithreading, synchronization, code versioning and concurrent",
        "modulniveau": "Bachelor",
        "sprache": "Englisch",
        "gültig bis": ""
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1226089&pOrgNr=1",
        "name": "Essentials of Applied Software Engineering",
        "kennung": "IN1504",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Studierenden verstehen Konzepte und Methoden für die verschiedenen Phasen des Lebenszyklus der Software Entwicklung. Sie verstehen die wichtigsten Begriffe und Konzepte der Softwaretechnik. Sie können konkrete Probleme analysieren, verstehen und bewerten, geeignete Techniken auswählen und diese anwenden um Probleme zu lösen. Sie haben ein Bewusstsein für Fragestellungen entwickelt, auf die im Software Engineering grundsätzlich zu achten ist. Digitale Aufgaben unterstützen die praktische Umsetzung von Videoinhalten, im Bezug auf Design Patterns, Hierarchien im Software Engineering sowie in Grundlagen der Programmierung. Sie erhalten Rückmeldungen zu den von ihnen im Selbststudium entwickelten Lösungsansätzen.",
        "inhalt": "Projektorganisation und Kommunikation, Konfigurationsmanagement, Delivery, UML Modellierung, Agile Methoden, Anforderungsanalyse, System Design, Objektdesign, Implementierung, Muster in der Softwareentwicklung, Testing.",
        "voraussetzungen": "IN0001 Grundlagen der Programmierung",
        "modulniveau": "Bachelor",
        "sprache": "Englisch",
        "gültig bis": ""
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1002907&pOrgNr=1",
        "name": "Praktikum: Social Gaming",
        "kennung": "IN0041",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul besitzen die Studierenden die Fähigkeit, die in dem Modul Social Gaming (IN0040) erworbenen Grundkenntnisse der Konzepte/-Modelle, Techniken/-Algorithmen und Denkweisen/Methodiken des Social Computing für die Konzeption und Implementierung von (insbesondere mobilen) sozialen Spielen und freizeitbezogenen Anwendungen, die individuelle und soziale Kontexte von Spielern intelligent einbeziehen, anwenden zu können.\nDie Studierenden können Methoden zum Design von sozialen Spielen anwenden.\nSie haben ihre in den ersten Semestern erworbenen Fähigkeiten im Programmieren (insbesondere in Java) vertieft und erweitert und praktische Erfahrungen im Software Engineering in kleinen Teams gewonnen. Sie haben die Fähigkeit gewonnen, sich benötigte Technologien (bspw. Umgang mit Geo-Informationssystemen in Bezug auf Location-based Mobile Social Games) schnell und effizient in dem Maße aneignen zu können, wie es für die praktische Lösung von Aufgaben im angestrebten Feld nötig ist.\nSie können Software für mobile Android Endgeräte und Serverkomponenten für Social Games und freizeitbezogene Social Computing Anwendungen entwickeln.",
        "inhalt": "In dem Modul IN0041 werden beispielhaft folgende Inhalte behandelt:\n- Design-Methoden für soziale Spiele und insbesondere mobile soziale Spiele (bspw. Sketching)\n- Anwendungen für Modelle sozialen Kontexts in (mobilen) sozialen Spielen in eigenen Implementierungen in Java.\n- Design eigener Formen sozialer Spiele und freizeitbezogene Social Computing Anwendungen im Web, insbesondere Social Networking Games, Location-Aware Mobile Social Games,-Socially-Aware Mobile Social Games\n- Programmierung von mobilen Endgeräten und Serverkomponenten für Social Games und freizeitbezogene Social Computing Anwendungen",
        "voraussetzungen": "Empfohlene Voraussetzungen sind die Studieninhalte des ersten bis dritten Fachsemesters. Das Modul Social Gaming (IN0040) sollte gleichzeitig besucht werden.",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch/Englisch",
        "gültig bis": ""
    },
        {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1605337&pOrgNr=1",
        "name": "Project Work in Informatics",
        "kennung": "IN8028",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of the module, participants are able to apply knowledge and methods in a research project in the field of Informatics.\nThey have deepened and further cross-linked their understanding of Informatics and the Informatics-related topics acquired by the third-semester modules IN8005, IN8027 (Introduction to Informatics for Students of Management & Technology – Programming Lab Course).\nStudents are able to analyze elements of the solution space of the given research problem in a team under given technical, economic and social constraints. In doing so, they can work out important questions related to the research problem in an Informatics field and clarify them in close coordination with experts from this area.\nThey are able to apply the theoretical knowledge acquired in the third semester such as a basic understanding of Machine Learning and practical capabilities such as programming in Java, using Machine Learning Libraries, or practical Software Engineering skills to an Informatics research-problem and develop their own solutions or solution contributions to the related research questions in a team.\nThey are able to prepare the solution developed in the project in such a way that they can present it to application experts in a written form and orally.\nStudents acquire missing Informatics knowledge and skills related to the research question of the project by private study under the guidance of the advisors.",
        "inhalt": "The project work centers on a research question in the field of work of the supervisor and the advisor (typically a doctoral student). Students experience hands-on work in a project, where they work together in teams. They pass through the whole process of a small scientific project. The content depends on the research question and the elements of scientific project work. Example content: In a design science methodology driven research program, an intermediate technological artifact (e.g. a software system) has been developed as an intermediate result by the advisor under the guidance of the supervisor. As an example, consider a user interface for an interactive visual data-exploration system. The project work of the student team may consist in systematically evaluating this technological artifact with the help of human study participants in focus groups. The contents of the module then encompass quantitative and qualitative evaluation methods, the technology of the artifact, content elements of the theoretical background of the research question / research field (e.g. UI-Design, Information Visualization, Data-Mining).",
        "voraussetzungen": "• IN8005 Introduction to Informatics for Students of Management and & Technology\n• IN8027 Introduction to Informatics for Students of Management & Technology – Programming Lab Course",
        "modulniveau": "Bachelor",
        "sprache": "Englisch",
        "gültig bis": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460623&pOrgNr=1",
        "name": "Enterprise Information Systems",
        "kennung": "IN9012",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul ist der Studierende in der Lage, den technischen Betrieb und die Anwendung von Unternehmenssoftware sowie die Integration grundlegender Geschäftsprozesse aus den Bereichen Materialwirtschaft, Vertrieb und Finanzwesen zu verstehen. Darüber hinaus ist der Studierende in der Lage die vermittelten theoretischen Grundlagen unter Verwendung von Standardsoftwarelösungen (z.B. SAP ERP, SAP BW etc.) praktisch anzuwenden.",
        "inhalt": "- Managementorientierte Betrachtung von Unternehmenssoftware\n- Einführung von Unternehmenssoftware in Unternehmen\n- Aufbau der technischen Basis von SAP-Software\n- Betrieb/Hosting von Unternehmenssoftware\n- Praktische Arbeit mit SAP-Software (mit Übungen)\n- Einblick in weiterführende Themen: Entwicklung, Business Intelligence, Integration",
        "voraussetzungen": "keine Vorkenntnisse erforderlich",
        "modulniveau": "Master",
        "sprache": "Deutsch",
        "gültig bis": "",
        "matching": [
            "project management",
            "business process",
            "software development",
            "Enterprise Software",
            "System Integration",
            "Data Analysis",
            "Presentation Skills",
            "Teamwork",
            "problem solve",
            "critical thinking",
            "Communication",
            "decision make",
            "time management",
            "Adaptability",
            "Leadership"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3453883&pOrgNr=1",
        "name": "Cloud Information Systems",
        "kennung": "CIT3230002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n- understand and analyze public cloud services.\n- define the requirements and challenges when architecting, implementing and managing cloud-native information systems.\n- design cost-efficient and scalable cloud information systems using current cloud technologies.",
        "inhalt": "- Introduction to foundational technologies (virtualization, containers, orchestration)\n- Architecture of cloud-native information systems (client/server, middleware, microservices)\n- Cost optimization in public clouds (cost and pricing models)\n- Economic cloud architecture comparison\n- Multi-cloud deployments\n- Implications of SaaS (DevOps, security)\n- Case studies of public clouds\n- Case studies of cloud-native information system architectures and their building blocks (e.g., cloud object stores, key/value stores, OLTP DBMS, OLAP DBMS)",
        "voraussetzungen": "IN0010 Introduction to Computer Networking and Distributed Systems (recommended)",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "problem solve",
            "critical thinking",
            "system design",
            "Cost Optimization",
            "Scalability",
            "Virtualization",
            "Containerization",
            "Orchestration",
            "Microservices",
            "Client-Server Architecture",
            "Cloud Computing",
            "DevOps",
            "Cybersecurity",
            "data management",
            "Case Studies"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2690341&pOrgNr=1",
        "name": "Cloud-Based Data Processing",
        "kennung": "IN2386",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n* define the requirements and challenges when architecting, building and managing a large-scale data processing service in the cloud.\n* use the theoretical foundations of distributed algorithms to construct the building blocks for a scalable data system design in relation to distributed storage, coordination and computation.\n* understand and analyze the different trade-offs when designing scalable data processing systems that need to run in the public cloud.\n* design, implement and evaluate a three-tier system using current cloud technologies.\n* identify the scalability bottlenecks and vulnerabilities of a complex computer system.",
        "inhalt": "Introduction\n* Intro to Data-centers\n* Latest trends in Cloud Computing\n\nFundamentals for managing distributed data\n* Data replication and quorums\n* Data partitioning\n* Fault-tolerance and unreliable components\n* Distributed system model\n* Consensus protocols and coordination services\n* Consistency models and distributed key value stores\n\nDesign of cloud-based data processing systems\n* Distributed transactions\n* Cloud-native OLTP databases\n* Cloud-native data warehouses\n* Dataflow computing (i.e., derived data)\n* Cloud-scale data streaming systems\n* Query-as-a-Service (QaaS) (serverless data processing)\n* Resource management and scheduling\n\nOther related topics:\n* Novel data storage formats (e.g., data lakes, data-mash, etc.)\n* Security and Privacy for data processing in the cloud\n* Accelerators and impact of new hardware technology",
        "voraussetzungen": "IN0008 Fundamentals of Databases\nIN0009 Basic Principles: Operating Systems and System Software\nIN0010 Introduction to Computer Networking and Distributed Systems",
        "modulniveau": "Bachelor/Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Cloud Computing",
            "Distributed Systems",
            "Data Processing",
            "Scalability",
            "fault tolerance",
            "Consistency Models",
            "Distributed Transactions",
            "Data Streaming",
            "Serverless Computing",
            "Resource Management",
            "File Storage",
            "Security",
            "privacy law",
            "Hardware Acceleration",
            "system design"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2930921&pOrgNr=1",
        "name": "Artificial Intelligence in Medicine",
        "kennung": "IN2403",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students should be able to recall the important topics in the area of artificial intelligence in medicine, understand the relations between the topics, apply their knowledge to own deep learning projects, analyse and evaluate social and ethical implications and develop own strategies to apply the learned concepts to their own work.",
        "inhalt": "• Introduction: Clinical motivation, clinical data, clinical workflows\n• ML for medical imaging\n• Data curation for medical applications\n• Domain shift in medical applications: Adversarial learning and Transfer learning\n• Self-supervised learning and unsupervised learning\n• Learning from sparse and noisy data\n• ML for unstructured and multi-modal clinical data\n• NLP for clinical data\n• Bayesian approaches to deep learning and uncertainty\n• Interpretability and explainability\n• Federated learning, privacy-preserving ML and ethics\n• ML for time-to-event modeling, survival models\n• ML for differential diagnosis and stratification\n• Clinical applications in pathology/radiology/omics",
        "voraussetzungen": "Introduction to Deep Learning (IN2346)\nComputer Aided Medical Procedures I (IN2021)",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Machine Learning",
            "Deep Learning",
            "Computer Vision",
            "Natural language processing",
            "Bayesian Inference",
            "Interpretability",
            "Explainability",
            "Federated Machine Learning",
            "privacy law",
            "Ethics",
            "Survival Analysis",
            "Differential Diagnosis",
            "Stratification",
            "Data Curation",
            "Domain Adaptation"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1219520&pOrgNr=1",
        "name": "Einführung in die Programmierung mit Python",
        "kennung": "IN8026",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Studierende können automatisierte Lösungen für einfache Alltagsprobleme entwickeln und in Python implementieren. Sie kennen einschlägige Prinzipien der Informatik hinsichtlich Problemlösung und Programm-Entwicklung und können diese in der Praxis des Programmierens anwenden. Sie können Programmierung in die Fachdisziplin der Informatik und in die Werkzeugkiste von Ingenieur-Disziplinen einordnen.",
        "inhalt": "Programmieren verhält sich zu Informatik wie Schreiben zu Literatur- oder Kommunikationswissenschaft. Programmieren ist eine Fertigkeit, die überall sinnvoll eingesetzt werden kann, wo es um Automatisierungen geht, die sich mit Hilfe eines Computers ausführen oder unterstützen lassen. Das kann im Alltag sein, aber auch in fachlichen und beruflichen Kontexten. Programmieren ist eine Kulturtechnik, die Bestandteil der Allgemeinbildung sein sollte.\n\nIn diesem Kurs werden die Anfangsgründe der Programmierung anhand der Programmiersprache Python vermittelt. Es geht um grundlegende Konzepte der prozeduralen Programmierung und einen Einstieg in die objekt-orientierte Programmierung. Wir behandeln die folgenden Sprachmittel in Python:\n\neinfache Datentypen\nzusammengesetzte Datentypen (Listen, Dictionaries)\nVariablen, Ausdrücke und Wertzuweisungen\nKontrollstrukturen (bedingte Anweisungen, Schleifen)\nVerwendung vordefinierter Methoden und Klassen\nDefinition eigener Methoden\nDefinition eigener Klassen\n\nWir entwickeln Spiele, angefangen bei einfachen Spielen mit Steuerung über die Tastatur und Ausgabe auf der Konsole bis hin zu Spielen mit graphischen Animationen und Sound-Effekten. Im Kontext der Programmier-Aufgaben ergänzen wir unseren Werkzeugkasten um einschlägige fundamentale Prinzipien zu Problemlösung (Computational Thinking, algorithmisches Denken) und zu Programm-Entwicklung (Qualitätskriterien wie Lesbarkeit, Stabilität, Testbarkeit, Erweiterbarkeit).",
        "voraussetzungen": "Fähigkeit zu systematischem Arbeiten und abstraktem Denken",
        "modulniveau": "Bachelor",
        "sprache": "Deutsch",
        "gültig bis": "2021W",
        "matching": [
            "problem solve",
            "Computational Thinking",
            "algorithm design",
            "Programming",
            "Automation",
            "Data Structures",
            "Control Structures",
            "Object-Oriented Design",
            "Code Quality",
            "Debugging",
            "software development",
            "Game Development",
            "user interface",
            "Multimedia Integration",
            "Teamwork"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4011456&pOrgNr=1",
        "name": "Foundations of Modern Robotics",
        "kennung": "CIT433028",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the course, students will have learned how to efficiently model robotic systems and simulate their motion. Also, they are able to use state-of-the-art and advanced planning and control algorithms to control robots in the environment. also, they will have learned how to use state-of-the-art robotics software for robotics projects",
        "inhalt": "Chapter 1: Introduction\nWhat is robotics?\nHistory of robotics\nDifferent types of robots\nSensors and actuators\n\nChapter 2: Configuration space\nDegrees of freedom\nTopology and representation\nHolonomy and non-holonomy\n\nChapter 3: Rigid-Body motion\nManifold and Lie Algebra\nExponential coordinates and Rotation Matrices\nHomogeneous Transformation Matrices\nTwists and Wrenches\n\nChapter 4: Forward Kinematics\nProduct of Exponentials Formula\nSpace and Body Jacobian\nStatics of Open Chains\nSingularity Analysis\nManipulability\n\nChapter 5: Inverse Kinematics\nAnalytic Inverse Kinematics\nNumerical Inverse Kinematics\nInverse Velocity Kinematics\n\nChapter 6: Dynamics\nLagrangian Formulation\nNewton–Euler Inverse Dynamics\nDynamics in the Task Space\nConstrained Dynamics\nActuation, Gearing, and Friction\n\nChapter 7: Planning\nGraphs and trees\nComplete Path Planners\nSampling Methods\nVirtual Potential Fields\nAdvanced topics: Optimization-based planning\n\nChapter 8: Control\nMotion control\nForce control\nHybrid Force/Torque control\nImpedance control\n\nChapter 9: Advanced topics\nFloating-base systems\nWheeled systems\ncontact-rich locomotion and manipulation",
        "voraussetzungen": "The course is fully self-contained. However, programming in Python is necessary, as several tutorials will be delivered during the semester on using the state-of-the-art libraries for robotics.",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "model building",
            "Simulation",
            "Motion Control",
            "Robotics",
            "Robotics",
            "Degrees of Freedom",
            "Rigid-Body Motion",
            "Kinematics",
            "Dynamics",
            "Path Planning",
            "Motion Control",
            "Force Control",
            "Impedance Control",
            "UX optimization"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1734236&pOrgNr=1",
        "name": "Advanced Robot Control and Learning",
        "kennung": "IN2376",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "After successful participation in the module, the students are able to:\n- Understand robotics problems from differential geometry point of view and consequently interpret control objectives\n- Identify and determine the Robot Dynamics\n- Solve modern control problems with advanced methods\n- Understand and exploit the concept of redundancy in robotics\n- Design robust controllers\n- Design bio-inspired controllers\n- Understand and use learning methods in robotics",
        "inhalt": "The Control section covers advanced topics in robot control, modeling and identification. Starting with the\nfundamental concepts such as differential geometry, it then covers the essential ideas behind the state-of-the-art of\ncontrol methods in real robotic applications. Moreover, advanced methods are presented for the modeling and\nidentification of physical systems and in particular robots. Finally, in the Adaptive Impedance Control section, the\ntheories behind the human motor control are concisely explained and the associated bio-inspired control algorithms\nare described. The second part of the course covers typical problems in robot learning and approaches to solve them.\nBeyond that, many practical implications and problems regarding real-world applications are covered. The outline for\nthis course is as follows.\n\nI. Differential Geometry in Robotics\n- Manifolds\n- Rigid Body Configuration\n- Tangent and Cotangent Space\n- Tensors\nII. Task Space Control\n- Robot Equations in Task Coordinates\n- SE3 Coordinates and Jacobian Matrix\n- Decoupled Position Control in Task Space\nIII. Redundant Robots\n- Dynamics of Redundant Robots\n- Motion/Torque Null space\n- Null space and Stability\nIV. Passivity-based Robot Control\n- Passivity\n- 1-DoF Robot\n- Passive Representation of a Robot\n- PD-g(q) Control\n- Passivity & Robustness\n- PD-g(q)-Feedforward & PD+ Control\n- Damping Design\n- Slotine & Li Control\n- Joint Control Summary\n- Cartesian Impedance Control\n- Impedance vs. Admittance Control\n- Local Nature of Cartesian Control\nV. Port-based Modeling in Robotics\n- Dirac Structure & Power Ports\n- Port-based Modeling of a Manipulator\n- Passivity Analysis\nVI. Linear Parametric Modeling and Identification of Robot Dynamics\n- Linear Parameterization of the Manipulator’s Dynamic Model\n- The Minimum Parameter Set\n- Parameter Identification\n- Trajectory Optimization\n- Modeling of Friction\n- Identification Procedure\n- Adaptive Control\nVII. Adaptive Impedance Control\n- Bio-inspired formulation\n- Adaptive impedance control for a manipulator\nVIII. Learning for Physical Systems – Overview\n- Latest advances in machine learning for physical systems\n- Recent applications for autonomous systems\n- Literature overview\nIX. Real-world Problem Classes\n- Motion and manipulation skill learning\n- Blind manipulation\n- Vision-based manipulation\n- Sensitive grasping\n- Compound manipulation tasks\nX. Complexity reduction\n- Expert knowledge vs. data-driven approaches\n- Smart data vs. big data\n- Interaction control architectures\n- Interaction skill formalisms\n- System limits and task context\n- Latent spaces and dimensionality reduction\nXI. Cost function design\n- Feasibility and optimality\n- Unknown constraints\n- Confidence in real-world problems\nXII. Practical implications\n- Simulation vs. real world\n- Experiment design\n- Limitations of physical systems",
        "voraussetzungen": "- Fundamentals of control engineering\n- Fundamentals of robotics\n- Fundamentals machine learning\n- Fundamentals of statistics",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Differential Geometry",
            "Robotic Control",
            "Task Space Control",
            "Redundancy",
            "Passivity-based Control",
            "Modeling and Identification",
            "Adaptive Control",
            "Impedance Control",
            "Machine Learning",
            "Physical Systems",
            "Motion Learning",
            "Manipulation Learning",
            "Grasping",
            "Complexity Analysis",
            "Cost Function Design"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3893427&pOrgNr=1",
        "name": "Advanced Deep Learning for Robotics",
        "kennung": "CIT433027",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of this module, students will have acquired extensive theoretical concepts behind advanced architectures of neural networks and state of the art deep reinforcement learning methods in the context of robotic tasks. In addition to the theoretical foundations, a significant aspect lies on the practical realization of deep reinforcement learning (DRL) methods in robotic scenarios.",
        "inhalt": "This is the advanced deep learning lecture with a specific focus on Robotics and Deep Reinforcement Learning (including guest lectures from DeepMind and Intrinsic). Taking the “Introduction to Deep Learning” course is expected.\n\n1. Introduction & Recap of Deep Learning\n2. Advanced Network Architectures & Recursive Neural Networks (LSTMs)\n3. Hyperparameter & Architecture Search\nBayesian optimization, network architecture search (NAS)\n4. Adversarial Samples & Adversarial Training\n5. Bayesian Deep Learning\nBayesian learning, variational inference, Monte Carlo dropout method\n6. Generative Models: VAEs & GANs\nvariational auto-encoders, generative neural networks (WGAN-GP)\n7. Data Efficient Learning: Transfer & Semi-Supervised Learning\n8. Deep Reinforcement Learning I\nMDPs, Q-iteration, Bellman equation, deep Q-learning, example: Atari-games\n9. Deep Reinforcement Learning II\npolicy gradients, REINFORCE, actor-critic algorithm, TRPO, PPO, robotic applications\n10. Deep Reinforcement Learning III\nadvanced methods: DDPG, soft Q-learning, soft actor-critic (SAC), robotic applications\n11. &\n12. Guest Lectures from DeepMind\nRecent Developments in Deep Reinforcement Learning for Robotics\n13. Guest Lecture from Intrinsic (formerly Google X Robotics)\nLearning methods and challenges in real-world robotic applications",
        "voraussetzungen": "MA0902 Analysis for Informatics\nMA0901 Linear Algebra for Informatics\n\nIN2346 Introduction to Deep Learning (expert knowledge required!)",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Neural Networks",
            "Deep Learning",
            "reinforcement learning",
            "Robotics",
            "Adversarial Environments",
            "Bayesian Inference",
            "Generative Models",
            "Transfer Learning",
            "Semi-Supervised Learning",
            "Markov Decision Processes",
            "Policy Gradients",
            "Actor-Critic",
            "Hyperparameter Search",
            "Architecture Search",
            "Data Efficiency"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3436129&pOrgNr=1",
        "name": "Control for Robotics: from Optimal Control to Reinforcement Learning",
        "kennung": "CIT4330014",
        "organisation": "Department Computer Engineering",
        "anmerkung": "",
        "lernergebnisse": "At the end of the course, students are able to:\n- derive optimal controller equations for mobile robots,\n- implement optimal controllers in practice and analyse their properties,\n- understand state-of-the-art approaches to learning-based control and reinforcement learning,\n- design learning-based controllers to cope with non-idealities such as model errors.",
        "inhalt": "Course Summary: This course presents optimal control, learning-based control, and reinforcement learning principles from the perspective of robotics applications. The course covers the foundations of optimal control and derives practical control algorithms that leverage first-principle robot models as well as data collected from the robot system. Real-world challenges such as disturbances, state estimation errors and model errors are addressed, and adaptive and reinforcement learning approaches are derived to address these challenges.\n\nCourse Topics: Topics covered in the course include:\n- Foundations of Optimal Control: Dynamic Programming, Bellman Equation, Value Iteration and Policy Iteration, Pontryagin’s Minimum Principle, Iterative Optimal Control Algorithms\n- Foundations of Model Predictive Control (MPC): Stability and Feasibility, Robust MPC, Practical MPC Considerations\n- Model Learning from Data: Deterministic Approaches such as Linear Regression and Neural Networks, Probabilistic Approaches such as Bayesian Linear Regression and Gaussian Processes\n- Combining Learned Models and Robust Control: Gaussian Process Model Predictive Control\n- Introduction to Reinforcement Learning: Markov Decision Processes, State Value Function, Action Value Function, Model-Based Reinforcement Learning\n- Model-Free Reinforcement Learning: Monte Carlo, Q Learning, Experience Replay\n- Current Research Directions: Deep Reinforcement Learning, Offline Reinforcement Learning, Safe Learning for Robotics",
        "voraussetzungen": "Motivation and interest in robot learning and control, as well as knowledge in dynamic systems, control theory (including state-space approaches), calculus, probability theory, linear algebra, and programming (Matlab and Python).\nAdditional knowledge and courses on the following topics will be beneficial: basics of optimization, mobile robotics, machine learning, optimal control.",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Optimal Control",
            "Robotics",
            "control system",
            "reinforcement learning",
            "Model Predictive Control",
            "Dynamic Programming",
            "State Estimation",
            "Adaptive Control",
            "Bayesian Inference",
            "regression analysis",
            "Neural Networks",
            "Gaussian Processes",
            "Markov Decision Processes",
            "Monte Carlo Methods",
            "Q-Learning"
        ]
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=936744&pOrgNr=1",
        "name": "Medical Augmented Reality",
        "kennung": "IN2293",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "In-situ visualization in medical augmented reality (AR) enables the registered view of virtual data such as a 3D CT scan, with a video view of the real anatomy of a patient. Data can be aligned with the required accuracy such that surgeons do not have to analyze data on an external monitor in the operating room. Instead, surgeons get a direct view onto and into the patient. Mental registration of medical imagery with the operation site is not necessary anymore. Augmenting medical images and virtual surgical instruments within the body provides the most intuitive way to understand the patient’s anatomy within the region of interest. This allows for the development of completely new generations of surgical navigation systems. Our Chair for Computer Aided Medical Procedures (CAMP) is one of the strongest and leading research centers for medical AR world-wide, featuring the world’s most accurate video-see-through AR system based on a head-mounted-display. Also, CAMP has developed the world’s first AR-enabled C-arm, CamC, which has already been tested in clinical trials in Munich. The objectives of this lecture are to have students learn the theoretical basics and practical aspects of augmented reality solutions related to the medical field. The content of the lectures are outlined below.",
        "inhalt": "Lecture:\n+ Basics of intra-operative imaging and navigation.\n+ Camera calibration using multi-view approaches.\n+ Different tracking technologies including: RGB and infrared cameras, optical trackers, Kinect.\n+ Projective geometry basics including transformations and reconstruction.\n+ Review of multimodal registration, visualization and user interfaces.\n+ Real-examples using head mounted display (HMDs), Camera augmented mobile C-arm (CamC) and, intraoperative gamma probes coupled with AR capabilities, AR magic mirror for anatomy education.\n+ Includes visits to the Navigated Augmented Reality Visualization Systems Laboratory, Chirurgische Klinik und Poliklinik Innenstadt; and IFL: Interdisziplinäres Forschungslabor, Klinikum rechts der Isar.\n\nExercises (every two weeks):\n+ Using MatLab or C++\n+ Implementation of lecture course topics with students in groups of 2.",
        "voraussetzungen": "keine",
        "modulniveau": "Master",
        "sprache": "Englisch",
        "gültig bis": "",
        "matching": [
            "Data Visualization",
            "Augmented Reality",
            "medical imaging",
            "Image Registration",
            "Image Reconstruction",
            "Projective Geometry",
            "Camera Calibration",
            "Tracking Technology",
            "Multimodal Integration",
            "user interface",
            "Surgical Navigation",
            "Interdisciplinary Collaboration",
            "problem solve",
            "Programming",
            "Data Analysis"
        ]
    }
]