[
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=710382&pOrgNr=1",
        "name": "Active SportGames: Sportliche Spiele mit Ganzkörperinteraktion",
        "kennung": "IN2265",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach Abschluss dieses Moduls sind Studierende in der Lage, eine Auswahl aktuell am Markt verfügbarer neuartiger Interaktionsgeräte zum Motion Capturing eigenständig in Spieleanwendungen einzubeziehen. Desgleichen können sie einfache virtuelle Charaktere erstellen und steuern. Sie kennen Softwaresysteme zur Interpretation von Bewegungsdaten, sowie Komponenten einer Pipeline zum Anlernen ausgewählter Gesten kennen. Durch den praktischen Umgang mit diesen Systemen haben sie Erfahrungen, wie der Schwierigkeitsgrad ausgesuchter Ideen für interaktiven athletische Sportspiele von der aktuellen Qualität und den Grenzen verfügbarer Interaktionsgeräte und Gesteninterpretationssoftware abhängt. Die Lernergebnisse entsprechen denen im parallelen Modul IN2264 (Tanz und Schauspiel im Virtuellen Studio) – aber die Spielszenarien sind unterschiedlich.",
        "inhalt": "Grundlegende Kenntnisse und Umsetzungserfahrung in den Bereichen:\n+ Ansteuerung und Einbindung neuer Interaktionsgeräte\n+ Interpretation von Trackingdaten als Körperbewegungen\n+ Charakter Animation"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3786711&pOrgNr=1",
        "name": "Additional Advanced Games-Specific Practical Course (Additional Games Lab)",
        "kennung": "CIT4210001",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n• apply and combine techniques and models of real-time computer graphics, game physics, and software engineering in teams for implementation and testing of an advanced game as a team effort\n• analyze, compare, evaluate and apply existing technological building blocks (e.g. game engines, specialized software for game physics, client-server architectures and corresponding implementations, HCI hardware) for advanced game development\n• analyze, evaluate, and apply techniques, algorithms, and models from games-related modules in their lines of specialization",
        "inhalt": "• Designing an advanced game in a team\n• Implementing an advanced game in a team\n• Playtesting an advanced game"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3307469&pOrgNr=1",
        "name": "Advanced Concepts of Programming Languages",
        "kennung": "CIT3230000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with an assortment of programming language constructs from popular programming languages. They understand the semantics of these constructs as well as the implementation consequences, that they inflict on the implementation as well as the runtime behavior of compiler and runtime system. They are able to analyze and compare different language based approaches, to discuss their relative merits and potential workarounds in case certain language features are missing. By means of this knowledge, they are able to extend existing compilers to handle the aforementioned constructs as well as able to re-encode concepts from one language by means of another language.",
        "inhalt": "This is not a beginners programming course – Instead, this lecture focusses on the semantics of various programming language concepts, and their implementation from the point of view of a compiler engineer. Topics may include, among others:\n- Relaxed Memory Models\n- Wait-/Lock-free Programming\n- Locks, Monitors & Condition Variables\n- Transactional Memory\n- Gotos, Co-Routines and Continuations\n- Single/Multi-Dispatching\n- (Multiple-) Inheritance\n- Delegation and Prototype Based Programming\n- Aspect Oriented Programming\n- Meta programming"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2809077&pOrgNr=1",
        "name": "Advanced Deep Learning for Computer Vision: Dynamic Vision",
        "kennung": "IN2389",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of this module, students will have acquired extensive theoretical concepts behind advanced architectures of neural networks, in particular in the context of video analysis for computer vision tasks. In addition to the theoretical foundations, a significant aspect lies on the practical realization and training of neural networks.",
        "inhalt": "Note, this lecture is closely related (and mutually exclusive) to the lecture “Advanced Deep Learning for Computer Vision: Visual Computing”. The two lectures share some theoretical content, but the “Dynamic Vision” module provides a clear focus on video analysis tasks, which is especially important for the practical part in the form of a semester-long project.\n\nCommon lectures with “ADL4CV: Visual Computing” lecture:\n- Recap of Neural Networks and CNNs\n- Advanced Auto-encoders: Probabilistic approaches and the mathematical foundations (e.g., variational auto-encoders)\n- Generative Adversarial Networks (from Goodfellow to CycleGANs and Progressive GANs)\n- Autoregressive Networks and their parallelization\n- Probabilistic vs deterministic generative methods\n- Graph neural networks\n- Transformers\n- Open Problems in Deep Learning for Computer Vision\n\nUnique lectures for this module:\n- Siamese neural networks and deep metric learning\n- Visualization techniques\n- Multi-dimensional CNNs: spatio-temporal neural networks.\n- Active learning and semi-supervised learning"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2808965&pOrgNr=1",
        "name": "Advanced Deep Learning for Computer Vision: Visual Computing",
        "kennung": "IN2390",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of this module, students will have acquired extensive theoretical concepts behind advanced architectures of neural networks, in particular in the context of computer vision tasks in visual computing. In addition to the theoretical foundations, a significant aspect lies on the practical realization and training of neural networks.",
        "inhalt": "Note, this lecture is closely related (and mutually exclusive) to the lecture “Advanced Deep Learning for Computer Vision: Dynamic Vision”. The two lectures share some theoretical content, but the “Visual Computing” module provides a clear focus on visual computing tasks, which is especially important for the practical part in the form of a semester-long project.\n\nCommon lectures with “ADL4CV: Dynamic Vision” lecture:\n- Recap of Neural Networks and CNNs\n- Advanced Auto-encoders: Probabilistic approaches and the mathematical foundations (e.g., variational auto-encoders)\n- Generative Adversarial Networks (from Goodfellow to CycleGANs and Progressive GANs)\n- Autoregressive Networks and their parallelization\n- Probabilistic vs deterministic generative methods\n- Graph neural networks\n- Transformer Networks\n- Open Problems in Deep Learning for Computer Vision\n\nUnique lectures for this module:\n- Multi-dimensional CNNs: from audio to 3D scene environments; 3D vs multi-view CNNs, sparse CNNs (e.g., Octrees);\n- Pointer Networks (focus on Scene Understanding, Meshes and 3D Geometry)\n- Neural rendering: From Novel View Point synthesis, Video Generation and Editing\n- Deep Fakes: Creation and Detection\n- CNNs on meshes: learning on structured and unstructured graphs. Mesh data structures and derived convolution operators on meshes using differential geometry."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=930142&pOrgNr=1",
        "name": "Advanced Deep Learning for Physics",
        "kennung": "IN2298",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "This course targets deep learning techniques and numerical simulation\nalgorithms for materials such as fluids and deformable objects. In particular,\nthis course will focus on advanced deep learning concepts such as generative\nmodels and time series prediction, with possible applications in the context of\ncomputer graphics or vision. After taking this course the students have gained\nknowledge about the underlying concepts for deep learning algorithms. They are\nfamiliar with topics such as auto-encoders, adversarial training, recurrent\nneural networks, and specialized loss functions.\nIn addition they know about the physical principles of elastic and plastic\nmaterials, with an emphasis on fluids: conservation of mass and momentum,\ndivergence free motion, and vorticity. Students can explain common discrete and\ncontinuous representations of the phenomena, such as phase functions, level-sets and Cartesian or tetrahedral meshes.\nThe core component of this lecture are numerical algorithms to work with\npartial differential equations. Students can memorize the steps of the\nalgorithms and are able to apply the learned techniques such as computing loss\nfunction derivatives, finite-difference discretizations, explicit and implicit\nintegration, in new contexts. They are able to construct working training\nalgorithms, by choosing suitable activation and loss functions, and can choose\nthe right network architecture for different regression / generation tasks.\nAdditionally, students are able to evaluate learning and simulation algorithms\nin terms of accuracy and computational complexity. Given a set of specific\nrequirements of a problem they can construct a solver based on the different\ncomponents discussed in the lecture.\nIn the homework assignments they have acquired practical experience\nimplementing central components of these solvers in a high-level programming\nlanguage, and they have gained experience working with software APIs\nimplementing higher level functionality.",
        "inhalt": "Navier-Stokes equations and physics of fluids, finite difference discretizations, advection schemes and their stability properties, Poisson problems, numerical iterative solvers for systems of linear equations, surface representations, and boundary conditions; Physics of elastic materials, stress-strain relationships, finite-element modeling, types of basis functions, tetrahedral meshing, plasticity and fracture."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3784022&pOrgNr=1",
        "name": "Advanced Games-Specific Practical Course (Games Lab)",
        "kennung": "CIT4210000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n• apply and combine techniques and models of real-time computer graphics, game physics, and software engineering in teams for implementation and testing of a game as a team effort\n• understand and apply specific techniques and models of game design and game testing that go beyond general software engineering principles\n• analyze, compare, evaluate and apply existing technological building blocks (e.g. game engines, specialized software for game physics, client-server architectures and corresponding implementations, HCI hardware) for game development\n• analyze, evaluate, and apply techniques, algorithms, and models from games-related modules in their lines of specialization (e.g. VR- or AR-techniques from “Interaction and Communication”, business analytics and mechanism design techniques from “Game Theory and Algorithmic Economics”, deep-learning-based computer vision techniques from “Visual Computing” or advanced deep learning for game physics techniques from “Computer Graphics and Animation”)\n• analyze, and evaluate ethical aspects of their game designs and game mechanics.",
        "inhalt": "• Designing a game in a team\n• Prototyping a game in a team\n• Implementing a game in a team\n• Playtesting and evaluation of a game\n• Ethics of Games"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3471254&pOrgNr=1",
        "name": "Advanced Machine Learning: Deep Generative Models",
        "kennung": "CIT4230003",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students will be able to understand the theoretical foundations of advanced machine learning principles. They will be able to identify the core building blocks of generative models such as normalizing flows, GANs, or diffusion models. Moreover, they will be able to apply and implement these learning algorithms in modern programming languages. Furthermore, the students will be able to evaluate and compare the learned methods regarding their qualitative properties.",
        "inhalt": "The module covers advanced machine learning principles, specifically discussing the field of deep generative models. The topics include:\n\n1. Normalizing Flows\n• Forward and Reverse Parametrization\n• Jacobian Determinant Computation\n2. Variational Inference\n• Latent variable models\n• ELBO\n3. Variational Autoencoders\n• Encoder-Decoder\n• Amortized Inference\n4. Generative Adversarial Networks (GANs)\n• Likelihood-free inference\n5. Generative Diffusion Models\n• Score function matching\n• Forward (diffusion) and reverse (denoising) algorithms"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3391371&pOrgNr=1",
        "name": "Advanced Natural Language Processing",
        "kennung": "CIT4230002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n• understand state of the art deep learning methods presented in scientific publications and are able to explain what motivates and justifies these approaches compared to previous state of the art.\n• apply and combine the building blocks of the presented approaches to /into solutions of problems in other fields of modern NLP that were not explicitly discussed in one of the topical blocks.\n• on the basis of discussed approaches, able to develop and implement their own deep learning architectures or architecture variants for NLP research (e.g. thesis topics) and NLP applications (in a professional environment).\n• analyze, compare and evaluate own and foreign deep architectures for specific NLP problems and applications. Especially, in terms of analysis, students are able to identify elements that are true SOTA advancements (compared to mere “fine-tuning” successes) which have the potential to exceed the scope of nice applications. Here, evaluation is not restricted to algorithmic measures of performance but encompasses evaluating pragmatic choices in view of human NLP applications (ethics, explainability etc.)",
        "inhalt": "This module covers selected advanced topics in modern NLP:\nBlock 1: Modern Transformer-based architectures & XAI for NLP\n• Evolution of modern Transformer-based architectures (BERT, GPT-n etc.)\n• Correlation between model size, training data, training mode, and performance.\n• Zero-shot, few-shot learning, fine-tuning.\n• Pre-training, meta-learning, in-context learning, verbalization.\n• Adapters.\n• XAI methods for NLP\nBlock 2: NMT for low resource languages\n• Seq2Seq evaluation and metrics\n• Synthetic data generation\n• Integration of monolingual LMs into NMT systems\n• Transfer-learning between languages\n• Multilingual model trade-offs\nBlock 3: Argument Mining and Ethical Aspects of modern NLP\n• Argument Mining\n• Bias in Data, Debiasing efforts and their problems\n• Toxicity and Hate Speech Detection\n• Fairness in NLP system outcomes\nBlock 4: Conversational AI and the link to symbolic AI\n• Open-domain chatbots and task-oriented dialogue systems\n• end-to-end dialogue system\n• Pipeline-elements for dialogue systems\nBlock 5: Quantum NLP\n• Basic approaches to Quantum Natural Language Processing\n• The potential of multi-purpose expression\nBlock 6: Auto-Summarization\n• Abstractive, extractive, contrastive, temporal summarization concepts\n• Summarization metrics, comparison, and deficiencies\n• Extractive Summarization algorithm deep-dive.\n• Abstractive summarization approaches (classical, neural, hybrid, contrastive learning)\nBlock 7: (Open Block): AI models combining natural language and images"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=454189&pOrgNr=1",
        "name": "Advanced Programming",
        "kennung": "IN1503",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, participants are able to develop software for scientific computing in C++, balancing performance and maintainability.\n\nMore specifically, they are able to:\n- choose fitting built-in types and decompose problems into functions;\n- list prominent software failures (frequently with crucial consequences) in Computational Science related to data types and their usage and are able to explain the sequence of events as well as their causalities;\n- explain the basic memory layout and apply appropriate C++ techniques for dynamic resource management;\n- solve common programming problems using object-oriented techniques;\n- apply generic programming techniques to reduce code duplication;\n- apply common performance evaluation, modeling, and optimization techniques and can analyze and compare different implementations in respect to their performance;\n- make use of given parts of the C++ documentation to choose and apply fitting STL algorithms in their programs; and\n- use development tools essential for working with complex scientific software projects.",
        "inhalt": "- Von Neumann architecture\n- Variables and built-in data types in C++, floating point representation, arrays and vectors, ranged-for loops\n- Prominent Software Failures in Computational Science\n- Functions: arguments, call-by-value/-reference, overloading, recursion, anonymous functions (lambda)\n- Resource management: references and pointers, managing dynamically allocated memory, memory layout (stack and free store), avoiding memory leaks, iterators\n- Build time: preprocessor, compiler, and linker, compile-time calculation (constexpr), header files, modules, build systems\n- Object oriented programming: classes, visibility, essential operators (constructor, destructor, assignment, copy, move), operator overloading, classes managing dynamic memory, member initialization, inheritance, virtual functions, runtime polymorphism\n- Generic programming: function templates, class templates, non-type template parameters, template specialization, constraints and concepts\n- The C++ Standard Library: containers, iterator types, STL algorithms, ranges, execution policies.\n- Performance modelling: cache concepts, pipelining, out-of-order execution, roofline model\n- Code optimization: profiling, compiler optimizations, function inlining, avoiding expensive computations, memory alignment, loop transformations\n- Vectorization: levels of parallelization, superscalar architectures, SIMD instructions and registers, auto-vectorization, structure of arrays, array of structures, intrinsics\n- Legacy and future of C++\n- Contributing to a free software project"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1060130&pOrgNr=1",
        "name": "Advanced Topics of Software Engineering",
        "kennung": "IN2309",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an dem Modul verstehen die Studierenden die zentralen Aufgaben und Methoden des Requirements Engineering. Sie kennen alle relevanten Qualitätsattribute für Software. Sie wissen, wie entsprechende Anforderungen erhoben, spezifiziert und verwaltet werden; wie sie sich in Softwarearchitekturen wiederfinden und umgekehrt, welchen Einfluss eine Architektur auf diese Attribute hat; wie Anforderungen, Architekturen und Code bzgl. dieser Attribute bewertet werden können; welche Zielkonflikte zwischen Qualitätsattributen bestehen und welchen Einfluss der Entwicklungsprozess hat. Sie können dieses Wissen in der Praxis in kleineren Projekten anwenden.",
        "inhalt": "Für die erfolgreiche Entwicklung großer Software-Systeme ist es erforderlich, dass sowohl die verschiedenen Aktivitäten im Prozess als auch die entstehenden Artefakte sehr eng miteinander verknüpft und aufeinander abgestimmt sind. Zentrale Erfolgsfaktoren sind:\n- Iterative Ermittlung und Umsetzung der Anforderungen\n- Architekturentwurf als Rückgrat der Entwicklung\n- Beherrschung der Qualität in ihren unterschiedlichen Ausprägungen\nDie Vorlesung Advanced Software Engineering legt dar, wie die Themengebiete Requirements Engineering, Spezifikation, Architektur, Feinentwurf, Codierung, Softwarequalität und Qualitätssicherung miteinander verwoben sind. Es wird diskutiert, wie insbesondere nichtfunktionale Anforderungen in der Architektur reflektiert sind; welche Zielkonflikte mit funktionalen Anforderungen und externen sowie internen Qualitätsattributen bestehen; und wie diese Anforderungen formuliert und durch Tests überprüft werden können.\nIm Einzelnen werden betrachtet:\n1.Requirements Engineering: Techniken für die Erhebung, Analyse, Priorisierung, Spezifikation, Validierung funktionaler und nicht-funktionaler Anforderungen; Anti-Requirements.\n2.Software-Architektur: Prinzipen, Views&Styles, Architekturdokumentation, Muster, Frameworks, Referenzarchitekturen, Produktlinien, Analysen der Architekturqualität und von Zielkonflikten\n3.Softwarequalität: Interne und externe Qualitätsattribute, u.a. Wartbarkeit, Testbarkeit, Verständlichkeit sowie Performanz, Sicherheit, Verfügbarkeit; Software-Metriken\n4.Qualitätssicherung: Bewertung, Priorisierung, Konfliktauflösung und Reviews von Anforderungen; Messverfahren für Architekturqualität bzgl. externer und interner Qualitätsattribute; Test- und Reviewverfahren für funktionale und nicht-funktionale Anforderungen im Code; Fehlermodelle\n5.Einfluss des Entwicklungsprozesses"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4390207&pOrgNr=1",
        "name": "AI Governance",
        "kennung": "CIT323002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After attending this class, students can understand, assess, and contextualize different facets of AI governance based on the EU AI Act and its operationalization at the level of university education.",
        "inhalt": "As AI technologies increasingly permeate various sectors, it is crucial for future developers to understand the ethical, legal, and social dimensions of their work. The lecture series “AI Governance” will invite experts to talk about topics ranging from responsible AI over participatory AI to the European AI Act. The structure of the lecture series is provided by the EU AI Act's obligations to high-risk AI system providers, including data and data governance, transparency, human oversight, or risk management. The lecture series will provide students with both theoretical and practical approaches to AI governance based on the European legal framework.\nAll lectures will link to \"Responsible AI\" and “Participatory AI”, covering principles such as fairness, accountability, and transparency, and exploring the role of diverse stakeholders in the AI development process. Thereby, methods for engaging communities and ensuring that AI solutions reflect a wide range of perspectives and needs will be highlighted. With a focus on regulatory frameworks, particularly the EU AI Act, students will learn about risk assessment, compliance, and the responsibilities of AI practitioners in adhering to the AI Act.\n\nThe lecture series will include sessions on:\n- The context of the EU AI Act\n- The EU AI Act as legal framework\n- Risk Management (Art 9)\n- Risk Management (e.g., NIST)\n- Data and Data Governance (Art 10)\n- Record-Keeping (Art 12)\n- Transparency (Art 13)\n- Human Oversight (Art 14)\n- Accuracy and Robustness (Art 15)\n- Cybersecurity (Art 15)\n- Post-Market Monitoring (Art 72)\n- Quality Management System (Art 17)\n- AI literacy (Art 4)\n- Fundamental Rights Impact Assessment (Art 27)\n- AI Audits"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4279940&pOrgNr=1",
        "name": "AI Testing",
        "kennung": "CIT423002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "The course is aimed at master students interested in the quality assurance and quality control processes for AI-based software systems. Participants would gain a deeper understanding of the unique challenges and best practices for testing these types of applications.\nThe students learn how to critically analyze a given software system. They acquire the analytical and interdisciplinary skills to adapt the testing concepts from traditional software to the new AI-based systems. The course will introduce them to the theory, exercise, and scientific research for all the topics presented in the course. They mature the necessary writing skills to present the main aspects of their topic in a written form.",
        "inhalt": "The course focuses on the challenges and advancements in testing software applications in which the decision making and logic is heavily based on artificial intelligence (AI-based systems). AI-based systems are becoming increasingly prevalent in various industries, such as automotive, healthcare, and e-commerce. These applications must be thoroughly tested to ensure that they can operate efficiently and accurately.\n\nAmong the suggested topics, the course will focus on:\n\n- Strategies for testing AI-enabled such as autonomous driving systems;\n- Tools and techniques for managing and manipulating large volumes of data during testing;\n- Best practices for designing test cases and test data for data-intensive applications;\n- Performance metrics for AI-based systems;\n- Testing non-functional properties (e.g., bias, fairness)."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1333663&pOrgNr=1",
        "name": "Algorithmen für Uncertainty Quantification",
        "kennung": "IN2345",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, participants can describe the basic principles and goals of UQ. They are able to classify, explain, and analyze central algorithms for forward UQ problems. The participants are able to elaborate on measures of complexity for UQ problems as well as to explain the underlying potential of parallel computations.\nThey are familiar with the curse of dimensions of high-dimensional stochastic parameter spaces and can explain why/how certain schemes can overcome this issue. Participants are able to list and differentiate current state-of-the-art software developments in UQ as well as to implement simple scenarios using the python package chaospy.",
        "inhalt": "Computer simulations of different phenomena heavily rely on input data which – in many cases – are not known as exact values but face random effects.\nUncertainty Quantification (UQ) is a cutting-edge research field that supports decision making under such uncertainties. Typical questions tackled in this course are \"How to incorporate measurement errors into simulations and get a meaningful output?\", \"What can I do to be 98.5% sure that my robot trajectory will be safe?\", \"Which algorithms are available?\", \"What is a good measure of complexity of UQ algorithms?\", \"What is the potential for parallelization and High-Performance Computing of the different algorithms?\", or \"Is there software available for UQ or do I need to program everything from scratch?\"\nIn particular, this course will cover\n- Brief repetition of basic probability theory and statistics\n- 1st class of algorithms: sampling methods for UQ (Monte Carlo): the brute-force approach\n- More advanced sampling methods: Quasi Monte Carlo & Co.\n- Relevant properties of interpolation & quadrature\n- 2nd class of algorithms: stochastic collocation via the pseudo-spectral approach: Is it possible to obtain accurate results with (much) less costs?\n- 3rd class of algorithms: stochastic Galerkin: Are we willing to (heavily) modify your software to gain accuracy?\n- Dimensionality reduction in UQ: apply hierarchical methodologies such as tree-based sparse grid quadrature. How does the connection to Machine Learning and classification problems look like?\n- Which parameters actually do matter? => sensitivity analysis (Sobol’ indices etc.)\n- What if there is an infinite amount of parameters? => approximation methods for random fields (KL expansion)\n- Software for UQ: What packages are available? What are the advantages and downsides of major players (such as chaospy, UQTk, and DAKOTA)\n- Outlook: inverse UQ problems, data aspects, real-world measurements"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1477688&pOrgNr=1",
        "name": "Algorithmen und Datenstrukturen",
        "kennung": "IN8009",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Während der Teilnahme an dem Modul werden die Studierenden mit der Arbeitsweise der Informatik vertraut gemacht. Nach der erfolgreichen Teilnahme an dem Modul sind die Studierenden in der Lage, reale Aufgabenstellungen in Form abstrakter Problemstellungen zu formulieren sowie Algorithmen für die Problemlösung auszuwählen, gegebenenfalls auch zu entwerfen, zu optimieren, zu bewerten und zu implementieren. Darüber hinaus bauen die Studierenden Verständnis für elementare Begriffe und Konzepte der Informatik auf und lernen diese zu handhaben.",
        "inhalt": "Mögliche Inhalte:\nEntwurf und Analyse einfacher Algorithmen, Komplexitätsmaße.\nAbstrakte Datenstrukturen, Graphen, Bäume, Listen, Schlangen, Stapel.\nSortieren, Suchen, Algorithmen auf Graphen, numerische Algorithmen, optional: Datenkompression."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=629351&pOrgNr=1",
        "name": "Algorithmic Game Theory",
        "kennung": "IN2239",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden in der Lage\n- die Grundlagen algorithmischer Spieltheorie zu verstehen,\n- unterschiedliche Darstellungen von n-Spieler Spielen zu analysieren,\n- verschiedene Lösungskonzepte zu berechnen und zu vergleichen,\n- diese Lösungskonzepte komplexitätstheoretisch zu untersuchen und\n- einfache Algorithmen zur Bestimmung von Lösungen spieltheoretischer Probleme zu analysieren und zu skizzieren.",
        "inhalt": "Algorithmische Spieltheorie ist ein junges Forschungsgebiet in der Schnittmenge zwischen theoretischer Informatik, Mathematik und den Wirtschaftswissenschaften, das sich mit optimalem strategischen Verhalten in interaktiven Situationen beschäftigt. Besondere Aufmerksamkeit wird in dieser Vorlesung den algorithmischen Aspekten spieltheoretischer Lösungskonzepte wie beispielsweise Nash Gleichgewichten und der Gestaltung von ökonomischen Mechanismen gewidmet."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456346&pOrgNr=1",
        "name": "Algorithms for Scientific Computing",
        "kennung": "IN2001",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to identify, explain, and implement selected hierarchical methods that are of particular interest to the informatical aspects of scientific computing because of their algorithmic structure and their significance for practical applications.\nParticipants can analyse and judge the efficiency of such methods by deriving statements about the required computational cost and - where applicable - the achieved accuracy and by comparing them with corresponding results for other methods. \nThe students are able to transfer the methodology to new methods for related problems.",
        "inhalt": "Discrete Fourier transform and related transforms\n- FFT: derivation and implementation\n- Fast discrete cosine/sine transforms: derivation and implementation via FFT\n- Applications: multi-dimensional data (images, video, audio) and FFT-based solvers for linear systems of equations\n\nSpace-filling curves\n- Peano- and Hilbert curves: representation by algebraic and grammatical means\n- Applications: organisation of multi-dimensional data; parallel, adaptive, and cache oblivious algorithms\n\nHierarchical numerical methods\n- Hierarchical bases for one- and multi-dimensional problems\n- Computational cost versus accuracy; Sparse Grids\n- Adaptive representation of continuous data\n- Applications: numerical quadrature, differential equations\n- Outlook: multigrid methods, wavelets"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456348&pOrgNr=1",
        "name": "Algorithms for Scientific Computing II",
        "kennung": "IN2002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to adapt numerical methods to ambitious applications from the practice of scientific computing. They understand and are familiar with advanced problems and methods in scientific computing. These advanced methods comprise in particular hierarchical aspects that students are able to understand, explain and apply to more complex applications.",
        "inhalt": "Courses of this module exist in three different specifications:\n- Sparse Matrices (Huckle):\n++ Data structures, Sparsity Graphs\n++ Sparse BLAS\n++ Reordering\n++ Direct solution of linear equations and algebraic pivoting\n++ Iterative solution of linear equations and preconditioning.\n- Scientific Computing (Mendl):\n++ Introduction to quantum mechanics\n++ Bell inequalities\n++ Quantum circuits and algorithms\n++ Quantum error correction\n++ Mapping of NP problems to quantum ground states\n++ Numerical methods for quantum systems\n- Scientific Computing (Bungartz):\n++ Molecular dynamics simulation\n++ Sparse grid methods\n++ Algebraic multigrid methods"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2930921&pOrgNr=1",
        "name": "Artificial Intelligence in Medicine",
        "kennung": "IN2403",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students should be able to recall the important topics in the area of artificial intelligence in medicine, understand the relations between the topics, apply their knowledge to own deep learning projects, analyse and evaluate social and ethical implications and develop own strategies to apply the learned concepts to their own work.",
        "inhalt": "• Introduction: Clinical motivation, clinical data, clinical workflows\n• ML for medical imaging\n• Data curation for medical applications\n• Domain shift in medical applications: Adversarial learning and Transfer learning\n• Self-supervised learning and unsupervised learning\n• Learning from sparse and noisy data\n• ML for unstructured and multi-modal clinical data\n• NLP for clinical data\n• Bayesian approaches to deep learning and uncertainty\n• Interpretability and explainability\n• Federated learning, privacy-preserving ML and ethics\n• ML for time-to-event modeling, survival models\n• ML for differential diagnosis and stratification\n• Clinical applications in pathology/radiology/omics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3126243&pOrgNr=1",
        "name": "Artificial Intelligence in Medicine II",
        "kennung": "IN2408",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students should be able to recall advanced topics in the area of artificial intelligence in medicine, understand the relations between the topics, apply their knowledge to own AI projects, analyse and evaluate social and ethical implications and develop own strategies to apply the learned concepts to their own work.",
        "inhalt": "Introduction and examples of advanced prediction and classification problems in medicine; ML for prognostic and diagnostic tasks; risk scores, time-to-event modeling, survival models, differential diagnosis & population stratification, geometric deep learning: point clouds & meshes, mesh-based segmentation, shape analysis, trustworthy AI in medicine: bias and fairness, generalizability, AI for affordable healthcare, clinical deployment and evaluation, data harmonization, causal inference, transformers, reinforcement learning in medicine, ML for neuro: structural neuroimaging, functional neuroimaging, diffusion imaging, ML for CVD: EEG analysis"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=487476&pOrgNr=1",
        "name": "Auction Theory and Market Design",
        "kennung": "IN2211",
        "organisation": "Department Computer Science",
        "anmerkung": "seit WS15/16 5 ECTS und 4 SWS",
        "lernergebnisse": "Nach der Teilnahme an dem Modul verstehen die Studierenden die funktionalen Eigenschaften wie z.B. offene und geschlossene Formate und Zahlungsregel verschiedenster Auktionsformate. Sie können spieltheoretische Modelle zur Interpretation, der aus den genannten Eigenheiten entstehenden, strategischen Interaktion sowohl zwischen Bietern als auch zwischen Bietern und dem Auktionator kritisieren. Darauf aufbauend sind sie insbesondere dazu befähigt grundlegende Problematiken, wie z.B. Anreiz- und Komplexitätsprobleme (Bestimmung des Gewinners unter anderem), beim Entwurf kombinatorischer Auktionen zu erklären. Auch können die Studierenden die Wahl verschiedener Auktionsformate basierend auf gewünschten Eigenschaften der Marktallokation, wie z.B. Effizienz oder Ertragsmaximierung, verteidigen.",
        "inhalt": "- Spieltheoretische Grundkonzepte (dominante Strategie, Nash Gleichgewicht unter vollständiger und unvollständiger Information etc.)\n- Mechanismus-Design-Theorie\n- Grundlagen der Auktionstheorie (geschlossene und offene Auktionen, Revenue Equivalence, Optimal Auctions etc. )\n- Kombinatorische Auktionen\n- Assignment markets\n- Herausforderungen bei der Entwicklung kombinatorischer Auktionen (iterative kombinatorische Auktionen und combinatorial clock auctions)\n- Anwendungen kombinatorischer Auktionen (Frequenzauktionen, Beschaffung)\n- Approximations Mechanismen\n- Matching Märkte"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456372&pOrgNr=1",
        "name": "Augmented Reality",
        "kennung": "IN2018",
        "organisation": "Department Computer Science",
        "anmerkung": "Ab WS13/14 6 Credits",
        "lernergebnisse": "At the end of the module students are able to describe and analyze the underlying mathematical and programming aspects (tracking and rendering) of AR systems, and they can extend them towards own, further-reaching solutions. They can also evaluate existing input and output devices regarding their suitability for special application scenarios.",
        "inhalt": "Foundations of Augmented Reality\n- Geometric transformations (homogeneous matrices, projective geometry, scene graph)\n- Three-dimensional information presentation (OpenGL, 3D APIs)\n- Head-mounted displays and other display devices\n- Physical foundations of several tracking devices\n- Mathematical foundations of optical tracking, sensor fusion and device calibration\n- Concepts: augmented reality in comparison with mixed reality, ubiquitous computing, etc."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1357567&pOrgNr=1",
        "name": "Auktionstheorie und Marktdesign (Doktorat)",
        "kennung": "IN2350",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul verstehen die Studierenden die funktionalen Eigenschaften wie z.B. offene und geschlossene Formate und Zahlungsregel verschiedenster Auktionsformate. Sie können spieltheoretische Modelle zur Interpretation, der aus den genannten Eigenheiten entstehenden, strategischen Interaktion sowohl zwischen Bietern als auch zwischen Bietern und dem Auktionator kritisieren. Darauf aufbauend sind sie insbesondere dazu befähigt grundlegende Problematiken, wie z.B. Anreiz- und Komplexitätsprobleme (Bestimmung des Gewinners unter anderem), beim Entwurf kombinatorischer Auktionen zu erklären. Auch können die Studierenden die Wahl verschiedener Auktionsformate basierend auf gewünschten Eigenschaften der Marktallokation, wie z.B. Effizienz oder Ertragsmaximierung, verteidigen.",
        "inhalt": "- Spieltheoretische Grundkonzepte (dominante Strategie, Nash Gleichgewicht unter vollständiger und unvollständiger Information etc.)\n- Mechanismus-Design-Theorie\n- Grundlagen der Auktionstheorie (geschlossene und offene Auktionen, Revenue Equivalence, Optimal Auctions etc. )\n- Kombinatorische Auktionen\n- Assignment markets\n- Herausforderungen bei der Entwicklung kombinatorischer Auktionen (iterative kombinatorische Auktionen und combinatorial clock auctions)\n- Anwendungen kombinatorischer Auktionen (Frequenzauktionen, Beschaffung)\n- Approximations Mechanismen\n- Matching Märkte"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=480320&pOrgNr=1",
        "name": "Ausgewählte Themen aus dem Bereich Algorithmen und Wissenschaftliches Rechnen",
        "kennung": "IN3400",
        "organisation": "Department Computer Science",
        "anmerkung": "5 ECTS ab SS18",
        "lernergebnisse": "Teilnehmer kennen den Stand der Forschung/Technik in ausgewählten Bereichen von Algorithmen und Wissenschaftlichem Rechnen und können sich mit neuesten Forschungsprojekten auseinandersetzen.",
        "inhalt": "Verschiedene Dozenten bieten Lehrveranstaltungen zu ausgewählten Themen aus dem Bereich Algorithmen und Wissenschaftliches Rechnen an. Studierende des Masterstudienganges Informatik können dieses Modul einmal als Wahlmodul aus dem Fachgebiet Algorithmen und Wissenschaftliches Rechnen (AWR) wählen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=480428&pOrgNr=1",
        "name": "Ausgewählte Themen aus dem Bereich Computergrafik und -vision",
        "kennung": "IN3200",
        "organisation": "Department Computer Science",
        "anmerkung": "5 ECTS ab SS 18",
        "lernergebnisse": "Teilnehmer kennen den Stand der Forschung/Technik in ausgewählten Bereichen von Computergrafik und -Vision und können sich mit neuesten Forschungsprojekten auseinandersetzen.",
        "inhalt": "Verschiedene Dozenten bieten Lehrveranstaltungen zu ausgewählten Themen aus dem Bereich Bereich Computergrafik und Bildverstehen\nan. Studierende des Masterstudienganges Informatik können dieses Modul einmal als Wahlmodul aus dem Fachgebiet\nComputergrafik und Bildverstehen (CGV) wählen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456400&pOrgNr=1",
        "name": "Automata and Formal Languages",
        "kennung": "IN2041",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "On successful completion of the module, students will be able to\n- use finite automata as a data structure for representation of finite and infinite sets;\n- understand and determine the computational complexity of different operations for different classes of automata;\n- move to and fro logical and automata-theoretic descriptions;\n- apply automata to problems in pattern matching and formal verification.",
        "inhalt": "The module is divided into two parts. The first part deepens and expands the study of finite automata initiated in IN0011 (Introduction to theoretical computer science), while the second introduces automata on infinite words. In both parts automata are seen as a data structure for the manipulation of (possibly infinite) sets and relations. The module shows how to implement Boolean operations and joins for different automata classes (nondeterministic and deterministic automata, binary decision diagrams, Büchi automata). It also introduces the connection between automata and logic. The algorithms are applied to a variety of problems, ranging from pattern-matching to program verification and solution of Diophantine equations."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1629492&pOrgNr=1",
        "name": "Automated Programming",
        "kennung": "IN2367",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After participation of this module the participants have foundational knowledge of the current state-of-the-art of the dimensions of automated program synthesis at the intersection of software engineering, artificial intelligence, and machine learning, including various specification approaches of functional, reactive, and probabilistic programs as well as specialized techniques for searching for, possibly optimized or robust, programs satisfying the given high-level specification.\n\nThe automated programming techniques covered in class are at the intersection of the software engineering, artificial intelligence, and machine learning.\n\nThe participants will also gain an overview of the capabilities and limitations or current approaches to program synthesis as a prerequisite for further scientific work (e.g. bachelor thesis, master thesis) or for applying program synthesis techniques in specialized applications.",
        "inhalt": "Automated Programming\n1. Deductive Program Synthesis\n2. Searching for programs\n3. Programs from proofs\n4. Transformational program synthesis\n5. Synthesis of probabilistic programs\n6. Synthesis of reactive programs\n7. Programming by example\n8. Inductive logic programming\n9. Deep learning program synthesis\n10. Application I: synthesis of data analysis programs\n11. Application II: synthesis of robotic programs\n12. Application III: synthesis of planetary software\n13. Application IV: programmer’s assistence"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456408&pOrgNr=1",
        "name": "Automaten und formale Sprachen II",
        "kennung": "IN2042",
        "organisation": "Department Computer Science",
        "anmerkung": "ab SS13 4 SWS und 5 Credits",
        "lernergebnisse": "Nach erfolgreicher Teilnahme ist der Studierende dazu befähigt:\n- zu erklären, warum Automaten, über die klassichen Anwendungen hinaus, interessant sind und welche Anwendung diese haben,\n- das zu einer gegebenen Sprache passende Automatenmodelle auszuwählen und den entsprechenden Automaten zu berechnen,\n- verschiedene Operationen auf Automaten durchzuführen und ihrer Laufzeitkomplexität abzuschätzen,\n- automatentheoretische Techniken auf Problem aus Bereichen wie Textanalyse, Programmverifikation oder -analyse anzuwenden.",
        "inhalt": "The course deals with advanced topics in automata theory. Possible contents are:\n- Tree automata: tree languages, regular expressions, logics, tree transducers\n- Weighted automata: finite and pushdown weighted automata, logics\n- Automata for infinite-state verification: pushdown systems, well-structured systems"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261483&pOrgNr=1",
        "name": "Automotive Software - Methoden und Technologien",
        "kennung": "IN2114",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, einfache eingebettete Systeme in der automotive Domäne zu entwickeln. Sie können die verschiedenen Anwendungsgebiete von Software im Automobil differenzieren und verstehen die Unterschiede sowie die Konsequenzen für die Entwicklung. Sie kennen zentrale Bestandteile einschlägiger Entwicklungsprozesse sowie typische Werkzeuge und können diese beurteilen.",
        "inhalt": "Im Fahrzeug nimmt die strategische Bedeutung von Software rapide zu. In der Vorlesung werden drei unterschiedliche Softwaredomänen im Fahrzeug vorgestellt: Infotainment, Karosserie/Komfort, Fahrerassistenz und Sicherheits-Elektronik. Zu jeder Domäne werden in einer Vorlesung die Anforderungen und Besonderheiten, sowie die theoretischen Grundlagen vermittelt.\nNach den drei Softwaredomänen werden drei Querschnittsthemen zentral adressiert: Entwicklungsprozess, Architektur und Qualitätssicherung\n- Einleitung und Überblick \"Software und Software Engineering im Automotive Kontext\"\n- \"Embedded Systems\" Anwendung Karosserie und Komfort Elektronik\n- \"Echtzeit und Regelungstechnik\" Anwendung in Sicherheitselektronik und Fahrwerksregelung\n- \"Embedded Java\" Anwendung in Infotainement\n- \"Sensorik / Aktuatorik\" Anwendung Fahrerassistenzsysteme\n- \"Entwicklungsprozess I\" Anforderungen, logische Architektur\n- \"Entwicklungsprozess II\" von der logischen Architektur zum integrierten System\n- Modellbasieierte Entwicklung: embedded Middleware\n- Tools und Ausführungsmodelle: ASCET, Rose RT, MATLAB\n- Test und Qualitätssicherung\n- Software im Produktlebenszyklus\n- Herausforderungen der Zukunft\n\nIn der Übung sind 3 spezielle Programmieraufgaben zu lösen.\n\nDie Vorlesung kann parallel mit IN2084 \"Prozesse und Methoden beim Testen von Software\" gehört werden."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=480825&pOrgNr=1",
        "name": "Basic Mathematical Methods for Imaging and Visualization",
        "kennung": "IN2124",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die grundlegenden mathematischen Techniken und Methoden. Sie sind dann in der Lage, reale Aufgabenstellungen im Gebiet Imaging und Visualisierung zu formulieren sowie Methoden für die Problemlösung auszuwählen, zu optimieren und zu bewerten. Sie können diese Techniken und Methoden auch auf andere Ingenieurs-Disziplinen wie Künstliche Intelligenz, Machine Learning, Computergrafik, Robotik, etc. anwenden.",
        "inhalt": "Grundlegende, oft angewandte Techniken werden in der Vorlesung präsentiert und anhand von Anwendungen aus Image Processing und Computer Vision demonstriert. Dieselben mathematischen Methoden kommen aber auch in anderen Ingenieurs-Disziplinen wie Künstliche Intelligenz, Machine Learning, Computergrafik, Robotik etc. zum Einsatz.\n\nFolgende Inhalte werden beispielhaft behandelt:\n- Lineare Algebra\n++ Vektorräume und Basen\n++ Lineare Abbildungen und Matrizen\n++ Lineare Gleichungssysteme, Lösen von linearen Gleichungssystemen\n++ Methode der kleinsten Quadrate\n++ Eigenwertprobleme und Singulärwertzerlegung\n- Analysis\n++ Metrische Räume und Topologie\n++ Konvergenz, Kompaktheit\n++ Stetigkeit und Differenzierbarkeit im Mehrdimensionalen, Taylor-Entwicklung\n- Optimierung\n++ Existenz und Eindeutigkeit von Minimierern, Identifikation von Minimierern\n++ Gradientenabstieg, Conjugate Gradient\n++ Newton-Verfahren, Fixpunktiterationen\n- Wahrscheinlichkeitstheorie\n++ Wahrscheinlichkeitsräume, Zufallsvariablen\n++ Erwartungswert und bedingte Erwartung\n++ Schätzer, Expectation Maximization Methode\n\nIn den Übungen gibt es die Möglichkeit für die Teilnehmer bei der Implementation oder Anwendung der Methoden zur Lösung von realen Problemstellungen ein tieferes Verständnis zu erlangen und praktische Erfahrung zu sammeln."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=708272&pOrgNr=1",
        "name": "Betriebssysteme und hardwarenahe Programmierung für Games",
        "kennung": "IN0034",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul sind die Studierenden in der Lage die Funktionsweise von modernen Rechnerarchitekturen und deren Verwaltung durch das Betriebssystem zu verstehen, Verfahren und Strategien zur Verwaltung von Betriebsmitteln anzuwenden sowie neue Entwicklungen in beiden Bereichen (Rechnerarchitekturen und Betriebssysteme), insbesondere auch im Hinblick auf den Einsatz im Games-Bereich, zu bewerten. Zudem haben sie eine Programmiersprache zur hardwarenahen Programmierung (in der Regel die Sprache C) erlernt, so dass sie bestehende Systeme verstehen und mit der sie Lösungen für Teilprobleme selber entwickeln können.",
        "inhalt": "In der Vorlesung werden die angegebenen Inhalte vorgestellt und erläutert. In den begleitenden Übungen werden neben dem Verständnis der Inhalte die Programmierfähigkeiten erlernt und anhand von Aufgaben eingeübt:\n- Schichtenmodell und Überblick\n++ Von Neumanns Architekturkonzept: Speicher, Rechenwerk, Leitwerk, Ein-/Ausgabe\n++ Hardware-Schichten: Phys. Schicht, Bauelementeschicht, Gatterschicht, Mikroarchitektur\n++ Software-Schichten: Betriebssystem (Kernel, Treiber, ...), Anwendungen\n- Hardware--Software-Schnittstelle\n++ Codierung von Daten (Ganzzahlen, Gleitkommazahlen, Zeichenketten, Referenzen, zusammengesetzte Datentypen)\n++ Arithmetische und logische Operationen\n++ Speicherzugriff, Adressierung\n++ Kontrollflußoperationen\n++ Vektoroperationen (SIMD)\n++ Prozeduraufrufe, Stack, Heap\n++ Unterbrechungen und Ausnahmen\n- Mikroprozessoren\n++ Speicheranbindung, Caches\n++ Pipelining (Befehlszyklus, Konflikte, Gegenmaßnahmen)\n++ Mehrkern-Systeme (Zugriffskonflikte, Speicherkonsistenz)\n- Prozess- und Prozessorverwaltung\n++ Nebenläufigkeit\n++ Realisierung von Prozessen\n++ Scheduling und Dispating\n- Speicherverwaltung\n++ Virtueller Speicher\n- Prozesskommunikation\n++ IPC-Konzepte, Sockets\n- Ein-Ausgabe"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=768297&pOrgNr=1",
        "name": "BGCE Compact Course",
        "kennung": "IN2272",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to reproduce and discuss methods of the corresponding field of computational engineering treated in the course. The participants can analyse the approaches with respect to performance, usability, and limitations and are able to implement simple variants of the underlying algorithms.",
        "inhalt": "An invited, internationally renowned researcher presents - in a block-course format - an advanced topic from his/her area of specialisation in computational engineering."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=768294&pOrgNr=1",
        "name": "BGCE Conference Contribution",
        "kennung": "IN2269",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to design a scientific poster and present it at a national or international conference. They have experience in describing and explaining the content of the underlying scientific project work.",
        "inhalt": "Preparation of a contribution for a national or international conference followed by a corresponding participation."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=768296&pOrgNr=1",
        "name": "BGCE ENB Softskill Course",
        "kennung": "IN2271",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Depending on the concrete softskill course variant of this module, offered by the Elite Network of Bavaria (ENB) of the \"Bayerisches Staatsministerium fuer Wissenschaft, Forschung und Kunst\", the participants are able to remember, understand, and apply the corresponding topics (concerning teamwork and rhetoric, e.g.). The students realise contacts to other members of the ENB.",
        "inhalt": "Depending on the concrete ENB softskill course variant, topics such as teamwork, motivation, leadership, etc. will be treated. The course will typically take place in block format."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=768295&pOrgNr=1",
        "name": "BGCE Ferienakademie",
        "kennung": "IN2270",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to immerse into (complex) topics of computational engineering as well as to structure and create a corresponding presentation. The participants are able to follow and discuss the topics illustrated in the talks.",
        "inhalt": "A special topic in the area of engineering, natural sciences, informatics or an interdisciplinary field."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458552&pOrgNr=1",
        "name": "BGCE Honours Project",
        "kennung": "IN2191",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to run or contribute, either individually or in small groups, to a larger project in the field of Computational Science and Engineering. They are experienced in the special software engineering requirements of scientific computing. The participants can autonomously study new scientific problems and methods, are able to select suitable methods, and implement them in a software project. They are familiar with basic project management techniques and apply them in scientific computing projects.",
        "inhalt": "The lecturers offer suitable topics from computational science and engineering."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=457052&pOrgNr=1",
        "name": "BGCE Leading Yourself and Others",
        "kennung": "IN2142",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After successful participation in this module, participants are able to apply their improved skills to leadership problems such as conflict handling and group dynamics, especially based on experience by means of feedback and reflexion. They have extended their strengths and reduced their shortcomings based on a realistic self-assessment. They are able to give and receive constructive feedback.",
        "inhalt": "- Individual definition of leadership; competence profile of successful executives\n- Determining your position: strengths and weaknesses, claim of leadership\n- Perception, assessment, communication, feedback\n- Leading individual staff members: situations of leadership, dialogs\n- Leading groups: group dynamics, resistance\n- Conflict handling\n- Giving presentations, leading meetings\n- Instruments and styles of leadership (including coaching)\n- Leadership in the case of conflicting interests of the corporation and the employees"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=768293&pOrgNr=1",
        "name": "BGCE Opening Weekend",
        "kennung": "IN2268",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to remember, understand, and analyse different roles in a team structure. They can give and receive constructive feedback. Participants are able to apply the acquired knowledge to different situations and to design, realise, and evaluate a stepping-out phase of a team near the end of the common project.",
        "inhalt": "- Roles in and structure of a team\n- Development phases of a team\n- Perception, communication, feedback within team structures\n- Conflict handling in a team\n- Leading and moderating meetings\n- Organising and postprocessing the end of a team project"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458538&pOrgNr=1",
        "name": "BGCE Research Day",
        "kennung": "IN2185",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, the participants are able to independently work out and give presentations on a challenging scientific topic using various formats. They are proficient in interpreting, discussing, and analysing the presented interdisciplinary research according to the respective scientific practices.",
        "inhalt": "The participants present their current research work (Master's Thesis, BGCE honours project, internships and practical work, student assistant projects) in diverse presentation formats and discuss the presented research. The seminar program is accompanied by invited presentations of senior researchers."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458288&pOrgNr=1",
        "name": "BGCE Scientific Writing",
        "kennung": "IN2184",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After the successful participation at the module, students are able to contribute to scientific publications and to individually compose scientific articles. They know the required scientific skills and conventions, and are able to select and apply them in practice. The participants can analyse and review peer publications with respect to scientific writing criteria.",
        "inhalt": "The seminar covers the following topics:\n- The review and publishing process for scientific publications\n- Classification and characteristics of different scientific publications (thesis, journal article, proceedings paper, etc.)\n- How to structure scientific publications (introduction, materials and methods, results, discussion)\n- How to write title and abstract\n- How to write the introduction\n- Presentation of materials and methods\n- How to present and discuss results\n- Efficient tables and graphs\n- Styles and conventions for citing scientific literature\n- Language issues in scientific writing\n- Design a scientific poster\n- How to generate a CV"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458546&pOrgNr=1",
        "name": "BGCE Supervised Teaching",
        "kennung": "IN2188",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After participation in the module Supervised Teaching, students are able to autonomously plan and perform a lesson or exercise with a given content. They know the most important principles of good didactics and rhetoric and can implement them in the course. Furthermore, the participants are able to reflect their teaching on their own and together with students and colleagues.",
        "inhalt": "The module is given as a tutoring activity accompanying an introductory course in the field of computational science and engineering, for example, in \"Advanced Programming\" (IN1503) or in the \"Scientific Computing Lab\" (IN2182).\n\nWithin this framework, the participants present both contents and programming or theoretical exercises. Furthermore, they discuss with the participants of the respective course the solutions of the course assignments.\n\nTo understand the basic elements of the evaluation process, the participants elaborate an evaluation questionnaire employed for the internal evaluation of the tutorials and lectures, respectively.\n\nVarious teaching techniques such as active structuring, activating elements, and usage of media are applied, trained, and analysed."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1132031&pOrgNr=1",
        "name": "BioInnovation: von offenen klinischen Fragestellungen zu Lösungskonzepten",
        "kennung": "IN8021",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul sind die Studierenden in der Lage:\n• In einem anspruchsvollen medizinischem Fachgebiet Lösungskonzepte für die jeweilige Fachdisziplin (z.B. Urologie, Gefäßchirurgie, Unfallchirurgie) zu entwickeln.\n• Medizinische Probleme im klinischen Alltag zu identifizieren, um daraus entsprechende ungelöste klinische Bedürfnisse abzuleiten.\n• Auf Basis identifizierter klinischer Bedürfnisse im Team erfolgreich Brainstormings durchzuführen und Lösungskonzepte abzuleiten.\n• Komplette Entwicklungsprozesse für Medizin- und Medizintechnikprodukte zu verstehen, wobei der Ablauf von der Auffindung klinischer Bedürfnissen bis zum Test erster Prototypen durchlaufen wird.\n• Erfolgreiche klinische Observation mit Ärzten und medizinischem Personal durchzuführen, sowie im klinischen Alltag passiv teilzunehmen (Beobachtung).\n• Medizinische Abläufe innerhalb der Klinik für eine spezielle Fachrichtung zu verstehen.\n• Methoden für eine erfolgreiche Teambildung anzuwenden.",
        "inhalt": "In diesem Praktikum lernen Studenten, wie klinische Bedürfnisse erfolgreich innerhalb des normalen Klinikalltags identifiziert werden und daraus mögliche und realistische Lösungsansätze zu deren Behebung gefunden werden können. Hierfür lernen Studenten Werkzeuge kennen, die dabei helfen, erfolgreich und innovativ in der Medizintechnik zu arbeiten. Der Kurs beinhaltet dabei alle Schritte von der Identifikation klinischer Bedürfnisse, deren Auswahl und Evaluierung, sowie der Ausarbeitung entsprechender Konzepte und dem Bau erster Prototypen mit entsprechender Tests.\n\n\n\nInnerhalb des Kurses werden dabei die notwendigen Schritte zur Erstellung von Ideen und Konzepten durchlaufen, wobei die Studenten in interdisziplinären Teams aus verschiedenen Fachbereichen arbeiten, darunter Ingenieurwesen, Wirtschaftswissenschaften und Design. Während der Projektphase werden die Teams von Coaches sowohl aus dem Ingenieurwesen als auch aus der Medizin begleitet, um direkten und kontinuierlichen Austausch untereinander zu fördern.\n\nInsgesamt werden folgenden Punkte im Kurs behandelt:\n\n- Identifikation von klinischen Bedürfnissen\n\n- Konzeption mittels Brainstormings\n\n- Ausarbeitung von Konzepten und Bau von Prototypen\n\n- Arbeit in interdisziplinären Teams\n\nWeiter Informationen können auf der Kursseite gefunden werden:\n\nhttp://campar.in.tum.de/Chair/TeachingWS15ClinicalNeedToConcept"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1616748&pOrgNr=1",
        "name": "Blockchain-based Systems Engineering",
        "kennung": "IN2359",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an den Modulveranstaltungen sind die Studierenden in der Lage, Blockchain-basierte Anwendungssysteme zu analysieren, für gegebene Nutzungsszenarien zu entwerfen und die jeweils passenden Blockchain-Technologien zu wählen. Sie verstehen die technologischen Grundlagen, sodass sie befähigt sind, zukünftige bzw. alternative Distributed-Ledger-Technologien zu verstehen und zu bewerten.",
        "inhalt": "Die Blockchain-Technologie und allgemeiner Distributed Ledger-Technologien (DLT) stellen die technische Grundlage für die Entwicklung und den Einsatz von innovativen dezentralisierten, verteilten Systemen dar.\nIn dieser Vorlesung werden die Eigenschaften der Technologie analysiert. Ebenso sollen Studierende zu einer erfolgreichen Bewertung und Entwicklung von auf Blockchain basierenden Lösungen befähigt werden. Geplante Vorlesungsinhalte umfassen:\n• Kryptographische Grundlagen\n• Peer2Peer-Netzwerke\n• Datenstruktur und Aufbau der Blockchain\n• Consensus-Mechanismen\n• Smart Contracts & Smart Contract Engineering\n• Mögliche Anwendungsszenarien\n• Alternative Distributed-Ledger Ansätze\n• Risiken & Herausforderungen sowie Limitationen der Technologie\n• Aktuelle Forschungsarbeiten und Entwicklungen der Technologie"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2863073&pOrgNr=1",
        "name": "Business Analytics and Machine Learning",
        "kennung": "IN2028",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul kennen Studierende verbreitete Verfahren für Klassifikation, numerische Vorhersage und Clustering. Sie kennen die Annahmen verschiedener Verfahren und verstehen deren Funktionsweise und ausgewählte wirtschaftswissenschaftliche Einsatzgebiete. Teilnehmer können Datensätze mit der Programmiersprache R analysieren und die Ergebnisse der Analysen interpretieren.",
        "inhalt": "Regression Analysis, Regression Diagnostics, Generalized Linear Models, Naïve Bayes, Decision Tree Classifiers, Data Preparation, Causal Inference, Model Selection, Ensemble Methods, Clustering, High-Dimensional Problems, Neural Networks, Convex Optimization"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1357575&pOrgNr=1",
        "name": "Business Analytics (Doktorat)",
        "kennung": "IN2351",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul kennen Studierende verbreitete Verfahren für Klassifikation, numerische Vorhersage und Clustering. Sie kennen die Annahmen verschiedener Verfahren und verstehen deren Funktionsweise und typische betriebswirtschaftliche Einsatzgebiete. Teilnehmer können Datensätze mit der Programmiersprache R analysieren und die Ergebnisse der Analysen interpretieren.",
        "inhalt": "Inferential Statistics, Multi-linear Regression, Logistic and Poisson Regression, Naïve Bayes and Bayes Nets, Decision Tree Classifiers, Data Preparation, Evaluation of Classifiers and Learning Theory, Ensemble Methods and Clustering, Dimensionality Reduction, Association Rules"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1769266&pOrgNr=1",
        "name": "Business-Simulationen gestalten",
        "kennung": "IN2300",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an der Modulveranstaltung sind die Studierenden in der Lage den Einsatz verschiedener Formen von Planspielen für unterschiedliche Anwendungsszenarien zu bewerten. Im Detail können die Studierenden Anforderungen an Planspiele analysieren, technische Designkonzepte entwickeln und Kernbestandteile von Planspielen modellieren.",
        "inhalt": "Die Teilnehmer erarbeiten in selbstgesteuerter eigenverantwortlicher Teamarbeit eine Business Simulation für ausgewählte Themen der Wirtschaftslehre und Wirtschaftsinformatik und evaluieren diese im Rahmen einer Lerneinheit.\nDie Teilnehmer festigen und erweitern Skills wie Kommunikation und Problemlösung im Team, Agile Softwareentwicklung, Projektmanagement, Moderation, Präsentation und Diskussion, Arbeiten mit wissenschaftlicher Literatur, Prinzipien und Konzepte von Serious Games im Allgemeinen und Business Simulationen im speziellen.\nE-Learning: didaktische Gestaltung und Bewertung von Unterricht mit Serious Games sowie Design, Implementierung und Test von IT-basierten Simulationen.\nVerwendete Werkzeuge sind Learning-Management-Systeme, Autorentools, Entwicklungsumgebungen für Computerspiele (z.B. Unity) und 3D Entwicklungsumgebungen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3494723&pOrgNr=1",
        "name": "Causal Inference in Time Series",
        "kennung": "CIT4230006",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "By the end of the course, the student must be able to:\n● Understanding of causal models and causal reasoning in dynamical systems.\n● Identify situations in which a problem can be thought of as a network.\n● Analyze data appropriately using a variety of network analytic techniques.\n● Ability to apply different methods for causal structure learning\n● Propose action based on sound interpretation of network analytics.\nTransversal skills:\n● Continue to work through difficulties to find optimal solutions.\n● Demonstrate the capacity for critical thinking (Causal reasoning)\n● Access and evaluate appropriate sources of information.",
        "inhalt": "● Introduction: What is causal inference?\n● Review of useful preliminaries\n○ Random variable, Time series, Spectral analysis\n○ Sequential predictors,\n● Causality in Times Series\n○ Granger causality\n○ Directed information graphs\n○ Efficient algorithms\n● Causal structure learning in time series\n○ Structures with Latent variables\n● Time-Varying networks\n○ change-point detection\n● Concrete Applications\n○ Computational neuroscience\n○ Financial markets\n○ Social networks"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3138501&pOrgNr=1",
        "name": "Causality",
        "kennung": "IN2410",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of this module, students understand the basic concepts of causal inference from data and know about essential algorithms for causal discovery and cause-effect estimation. For a given problem setting they are able to decide whether causal inference is possible from the given data and assumptions, choose appropriate methods and derive how to adequately apply them to solve the problem at hand.",
        "inhalt": "Reminder of probability theory and graph theory; probabilistic graphical models; basic concepts of causation; Neyman-Rubin causal models; structural equation models; do-calculus and interventions; counterfactuals; matching; propensity score weighting; doubly robust methods; instrumental variables; differences in differences; sensitivity analysis"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460554&pOrgNr=1",
        "name": "Challenges for the CIO (Berufsfeldspezialisierung CIO)",
        "kennung": "IN2103",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul verstehen die Studierenden das Berufsbild des Chief Information Officers (Aufgaben, Ziele, Zuständigkeiten, organisatorische Verankerung in Unternehmen, aufbau- und ablauforganisationale Aspekte) in unterschiedlichen Branchen. Zudem sind ihnen ausgewählte aktuelle Themen und Herausforderungen der CIOs bekannt. Sie sind in der Lage, ausgewählte Methoden und Ansätze des Informationsmanagements auf diese aktuellen Herausforderungen anzuwenden.\nZudem fördert das Modul die Fähigkeit der Studenten, aktuelle IT-Themen zu analysieren und über deren effektive Kommunikation nachzudenken. Nach der Teilnahme sind die Studenten außerdem mit (Kommunikations-)Fähigkeiten ausgestattet, die es ihnen ermöglicht in einem professionellen IT-Umfeld erfolgreich zu sein.",
        "inhalt": "- Ausarbeitung von aktuellen Themen und Herausforderungen für einen CIO in einem bestimmten Unternehmenskontext\n- Erstellung eines wissenschaftlichen Berichtes zu einem dieser Themen\n- Erstellung einer Handlungsempfehlung für einen Entscheidungsträger mit Hilfe einer Management Summary\n- Präsentation der Ausarbeitung\n- Austausch und Diskussion mit zahlreichen IT-Verantwortlichen aus Unternehmen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=457002&pOrgNr=1",
        "name": "CIO Planspiel",
        "kennung": "IN2104",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Im CIO-Planspiel schlüpfen die Studierenden in die Rolle des CFO (Chief Financial Officer), CMO (Chief Marketing Office), COO (Chief Operations Officer) und CIO (Chief Information Officer), um eine Bank zu führen und managen.\nMit dem Modul CIO-Planspiel sollen mehrere Lernergebnisse bei den Studierenden angestrebt werden. Nach der Teilnahme an dem CIO-Planspiel sind die Studierenden in der Lage:\n- zu verstehen, wie das Management einer Bank funktioniert,\n- strategisch zu denken und Entscheidungen zu treffen,\n- Wechselwirkungen zwischen Kennzahlen und Unternehmensbereichen zu analysieren,\n- Entscheidungen zur Unternehmensführung aus Sicht des CFO, CMO und COO, jedoch insbesondere aus Sicht des CIO (Chief Information Officer) zu verstehen und zu bewerten, - selbstständig Themengebiete (z. B. Unternehmensbewertung, ITIL Service Management) zu erarbeiten und vor Mitstudierenden zu präsentieren.",
        "inhalt": "Profil, Aufgabenbereiche und Managementaspekte des CIO, CFO, CMO und COO; Zusammenhang zwischen IT und Unternehmensstrategie; Vision und Strategie einer Bank; das Instrument der Balanced Scorecard innerhalb einer Bank; Projektportfoliomanagement; Human Resources Management; Unternehmensbewertung; verschiedene ITIL-Themen (z. B. Service Portfolio Management, Demand Management, Financial Management, ...)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3453883&pOrgNr=1",
        "name": "Cloud Information Systems",
        "kennung": "CIT3230002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n- understand and analyze public cloud services.\n- define the requirements and challenges when architecting, implementing and managing cloud-native information systems.\n- design cost-efficient and scalable cloud information systems using current cloud technologies.",
        "inhalt": "- Introduction to foundational technologies (virtualization, containers, orchestration)\n- Architecture of cloud-native information systems (client/server, middleware, microservices)\n- Cost optimization in public clouds (cost and pricing models)\n- Economic cloud architecture comparison\n- Multi-cloud deployments\n- Implications of SaaS (DevOps, security)\n- Case studies of public clouds\n- Case studies of cloud-native information system architectures and their building blocks (e.g., cloud object stores, key/value stores, OLTP DBMS, OLAP DBMS)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2690341&pOrgNr=1",
        "name": "Cloud-Based Data Processing",
        "kennung": "IN2386",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n* define the requirements and challenges when architecting, building and managing a large-scale data processing service in the cloud.\n* use the theoretical foundations of distributed algorithms to construct the building blocks for a scalable data system design in relation to distributed storage, coordination and computation.\n* understand and analyze the different trade-offs when designing scalable data processing systems that need to run in the public cloud.\n* design, implement and evaluate a three-tier system using current cloud technologies.\n* identify the scalability bottlenecks and vulnerabilities of a complex computer system.",
        "inhalt": "Introduction\n* Intro to Data-centers\n* Latest trends in Cloud Computing\n\nFundamentals for managing distributed data\n* Data replication and quorums\n* Data partitioning\n* Fault-tolerance and unreliable components\n* Distributed system model\n* Consensus protocols and coordination services\n* Consistency models and distributed key value stores\n\nDesign of cloud-based data processing systems\n* Distributed transactions\n* Cloud-native OLTP databases\n* Cloud-native data warehouses\n* Dataflow computing (i.e., derived data)\n* Cloud-scale data streaming systems\n* Query-as-a-Service (QaaS) (serverless data processing)\n* Resource management and scheduling\n\nOther related topics:\n* Novel data storage formats (e.g., data lakes, data-mash, etc.)\n* Security and Privacy for data processing in the cloud\n* Accelerators and impact of new hardware technology"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3310961&pOrgNr=1",
        "name": "Codegenerierung für Datenverarbeitung",
        "kennung": "CIT3230001",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage, eine effiziente Ausführungsumgebung für datenverarbeitende Programme auf Basis von Codegenerierung zu implementieren. Die Studierenden können für Hochsprachen, Datenbankabfragen und Maschinencode geeignete Programmrepräsentationen entwerfen, diese zu performantem Maschinencode übersetzen, und geeignete Optimierungen und Sicherheitsmaßnahmen (Sandboxing) verwenden.",
        "inhalt": "- Grundlegende Ausführungsmodelle von Programmen (Intepretation, Verwendung von Bytecode, Maschinencodeerzeugung, etc.)\n- Verschiedene Programmrepräsentationen (Quelltext, Intermediate Representations (IRs), verschiedene Formen von Bytecode)\n- Klassische Techniken der Codegenerierung\n- SSA und Optimierungstechniken am Beispiel von LLVM-IR\n- Maschinencodegenerierung: Instruktionsselektion und Registerallokation\n- Ausführung von Programmen in virtuellen Maschinen (z.B. WebAssembly, BPF, JavaScript)\n- Sandboxing und Optimierungen für JIT-Kompilierung\n- Ausführung von Datenbankanfragen (z.B. SQL, Data Frame API)\n- Ausführungsmodelle und Coderepräsentationen\n- Ausführung von Maschinencode/Binary Translation (z.B. RISC-V)\n- Besonderheiten bei der Übersetzung von Maschinencode"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=520233&pOrgNr=1",
        "name": "Compilerbau I",
        "kennung": "IN2227",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul beherrschen die Studierenden Grundbegriffe und Techniken des Compilerbaus. Sie verstehen praktisch relevante Verfahren, die in den drei Bestandteilen eines Compilers, dem Frontend, dem Middleend und dem Backend eingesetzt werden. Mit deren Hilfe sind sie in der Lage, einen Compiler zu schreiben, der für eine einfache Programmiersprache und eine einfache Zielarchitektur Code erzeugt.",
        "inhalt": "Ein Compiler ist ein wesentlicher Bestandteil der Systemsoftware, dessen Aufgabe darin besteht, Programme einer höheren Programmiersprache - etwa C oder Java - in Folgen von Maschinenbefehlen eines realen Rechners zu übersetzen. Compiler sind relativ komplexe Programme; bei ihrer Konstruktion finden die Ideen und Methoden aus vielen Bereichen ihre Verwendung. Themen der Vorlesung sind damit unter anderem:\n\n- Lexikalische Analyse;\n- Syntaktische Analyse;\n- Typüberprüfung für imperative Programmierspachen;\n- Typinferenz für funktionale Programmiersprachen;\n- Codeerzeugung für eine abstrakte Maschine."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=455706&pOrgNr=1",
        "name": "Complexity Theory",
        "kennung": "IN2007",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer des Moduls kennen die zentralen Methoden der Komplexitätstheorie. Sie wissen um Berechnungsmodelle, Komplexitätsklassen, Reduktionen, Vollständigkeit und kennen ausführlich weiterführende Konzepte wie Diagonalisierung, die Polynomialhierarchie, Platzkomplexität, Alternierung, Boolesche Schaltkreise, Randomisierung und Interaktive Beweissysteme. Des Weiteren können sie die entsprechenden Methoden und Konzepte anwenden, um neue Probleme in ihrer Komplexität zu analysieren.",
        "inhalt": "Das Modul behandelt zunächst gründlich Turing-Maschinen. Zeit- und Platzkomplexität werden studiert. Ferner werden Schaltkreise als Berechnungsmodell untersucht. Die Komplexitätsklassen L, NL, P, NP, PSPACE, EXP, NEXP, PH werden eingeführt. Anschließend werden Vollständigkeit und fundamentale strukturelle Zusammenhänge zwischen Komplexitätsklassen hergeleitet. Weiterhin behandelt das Modul das Konzept der Alternierung, Boolesche Schaltkreise, Randomisierung und Interaktive Beweissysteme."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3307984&pOrgNr=1",
        "name": "Computational Modeling for System Genetics",
        "kennung": "CIT4230001",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students understand / are able to practically implement:\n- the challenges of complex trait genetics\n- statistical models for QTL mapping and GWAS\n- methods for adjustment for multiple testing\n- regularized linear models and its applications in genetics\n- linear mixed models to deal with population structure\n- experimental techniques to measure gene expression\n- efficient algorithms for expression QTL analysis\n- statistical concepts for causal inference such as Mendelian randomization\n- network inference methods such as Graphical Gaussian models and application to omics data (metabolome, transcriptome)\n- apply some of the above-mentioned techniques on an actual problem from systems genetics. Evaluate model performance, calibration and provide biological interpretation of its application to real data.",
        "inhalt": "This is a two-part module: (1) Seven lectures\nintroduce basics of systems genetics, and statistical models employed. The six lectures are supported with exercise sessions in R or python. This is followed by (2) an eight-week hands-on project.\n\nThe lectures are organized around the following topics:\n- Introduction to human genetics and genome-wide association studies (GWAS)\n- Populations structure\n- Polygenic risk score\n- Gene-mapping and variant fine-mapping\n- Gene expression QTLs (eQTLs)\n- Causal inference with omics data (metabolomics, transcriptomics, etc.)\n- Omics approaches for rare diseases\n\nOver these lectures, computational methods are introduced including:\n- Linear regression and hypothesis testing\n- Linear mixed models\n- Regularized linear models\n- Multiple testing correction\n- Graphical Gaussian models\n- Denoising autoencoders"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1102305&pOrgNr=1",
        "name": "Computational Physiology for Medical Image Computing",
        "kennung": "IN2319",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of the module, the participants will be able to use computational models for extracting diagnostic information from different types of clinical image data sets. These data sets may provide information, for example, about blood perfusion or microstructural tissue properties, about metabolic processes, or patterns of disease progression. The participants will understand the physiological concepts underlying the computational algorithms employed, and will know of advantages and shortcomings of different modeling strategies. This will allow them to analyze clinical imaging protocols with respect to the underlying physiological information, and to propose diagnostic algorithms that combine anatomical and physiological information of different imaging modalities.",
        "inhalt": "1) Physiological imaging: Computational models for extracting local physiological information from imaging modalities such as magnetic resonance, computed tomography, or positron emission topography (e.g., MR and PET models for blood flow, metabolism, tissue microstructure)\n\n2) Organ models: Computational models describing anatomy and function at the organ level as well as its variation across the population (e.g., 3D and 4D population atlases describing structure and shape)\n\n3) Disease and diagnostics: Computational models describing pathophysiological processes and the progression of diseases (functional models from biophysics and theoretical biology, empirical models for clinical decisions)\n\n4) Use cases, for example, from cardiac imaging, tumor analysis, and neuro-degenerative diseases"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=557075&pOrgNr=1",
        "name": "Computational Social Choice",
        "kennung": "IN2229",
        "organisation": "Department Computer Science",
        "anmerkung": "ab WS12/13 6 Credits",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden in der Lage\n* die Grundlagen kollektiver Entscheidungsfindung zu verstehen,\n* axiomatische Eigenschaften von Präferenzbündelungsverfahren zu untersuchen,\n* Ergebnisse verschiedener Präferenzbündelungsverfahren zu berechnen und zu vergleichen und\n* algorithmische Eigenschaften dieser Verfahren zu analysieren.",
        "inhalt": "\"Social Choice Theory\" beschäftigt sich mit Methoden zur kollektiven Entscheidungsfindung. Neben den klassischen Anwendungen wie Wahlverfahren, haben diese Methoden in den letzten Jahren Anwendung in verschiedenen Teilgebieten der Informatik gefunden. Der Schwerpunkt dieser Vorlesung liegt auf der Analyse und dem Vergleich von Verfahren, die auf der Mehrheitsrelation beruhen. Insbesondere werden dabei algorithmische Aspekte dieser Verfahren betrachtet. Themenübersicht: Präferenzen, Wahlverfahren, Choice Theory (Rationalisierbarkeit, Konsistenz), Satz von May, Arrows Unmöglichkeitssatz, Punkteverfahren, Fishburns Klassifikation von Condorcet-Verfahren, Satz von McGarvey, Top Cycle, Uncovered Set, Slater Set, Banks Set, Minimal Covering Set, Tournament Equilibrium Set, Kemeny-Young-Verfahren, Berechnungskomplexität von Wahlverfahren."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2917510&pOrgNr=1",
        "name": "Concept Art und Game Design",
        "kennung": "IN2401",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme am Modul können die Studierenden wichtige gestalterische, technische und organisatorische Grundlagen zur praxisbezogenen Konzeption und Umsetzung digitaler Spiele umsetzen. Sie sind in der Lage, wichtige gestalterische Grundprinzipien, wie beispielsweise die grafische Darstellung, Bildkomposition und die Bildwahrnehmung beim Game Design einzusetzen. Insbesondere beherrschen sie den gestalterischen Entwurf und die technische Umsetzung von 3D Game Charakteren und 3D Spielumgebungen. Die Studierenden verstehen die Gestaltung dieser Elemente innerhalb des professionellen Workflows (Pipeline) in der Spieleentwicklung. Sie erlernen, diese Abläufe mit den üblichen Softwarepaketen gestalterisch, technisch und organisatorisch umzusetzen und die Arbeit in einem Team erfolgreich zu koordinieren.",
        "inhalt": "Im Zentrum des Moduls steht die Auseinandersetzung mit gestalterischen, technischen und organisatorischen Grundlagen für die professionelle Spieleentwicklung. Es werden notwendiges theoretisches Wissen und Kenntnisse der Konzeption und praktischen Umsetzung von Computerspielen behandelt. In Form eines Praxisprojekts erfolgt die Bearbeitung anhand ausgesuchter Projektarbeit in kleinen Teams.\n\nThemenschwerpunkte sind: Concept Art, Game Environments und 3D Character Design. Dazu gehören Projektionsarten, Perspektivische Projektion, Bildgestaltung und Bildkomposition, Bildwahrnehmung, Bildformat und \"Gleichgewicht\", Figur und Grund, Gestalt und Bildtiefe, wahrgenommene \"Bewegung\" im Bild, Mensch und Raum, Figur und Proportion, Character Design für Film und Games, 3D Modeling, Texturing, Lighting und Rendering, Lichtfarbe und Farbgestaltung, Lichtrichtung und Bildwirkung, Rigging and Animation, Game Engine Integration, sowie der professionelle Workflow (Pipeline and Stages in Lean Game Development) und Datenaustausch im 3D Game Development.\n\nDie Lehrveranstaltung nutzt die Software Blender und eine Game Engine (Unity, Unreal Engine). Die Lehrveranstaltung gliedert sich in neun Workshops und sechs Projektwochen. In den Projektwochen haben die Studierenden die Gelegenheit, die erworbenen Kenntnisse in einem praktischen Projekt umzusetzen. Alle Workshopergebnisse werden gesammelt und abschließend präsentiert.\n\nNeben der universitätseigenen Hardware bringen alle Teilnehmer auch jeweils eigene Hardware (Notebooks etc.) mit vorinstallierten Softwarepaketen in der jeweils aktuellen Version mit."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4110214&pOrgNr=1",
        "name": "Concepts of C++ Programming",
        "kennung": "CIT323000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer beherrschen die unten genannten Konzepte der C++ Programmierung. Sie sind in der Lage, diese eigenständig zu analysieren und die entsprechenden Analysen auf verwandte Probleme der Programmierung anzuwenden. Ferner sind die Teilnehmer in der Lage, die behandelten C++ Programmierkonzepte einzusetzen, sie ggf. zu modifizieren und verschiedene Lösungen in ihrer Güte zu vergleichen.",
        "inhalt": "Das Modul behandelt zunächst die grundlegenden Konzepte der C++ Programmiersprache (Syntax, starke Typisierung, Typableitungen, Fokus auf Laufzeiteffizienz). Danach werden in dem Modul die zentralen, modernen C++ Programmierkonzepte vorgestellt.\n- Konzepte für das effiziente Ressourcen Management: Das Modul behandelt RAII, smart pointers, universelle Referenzen, Eigentümer und Kopieren/Bewegen.\n- Konzepte der prozeduralen Programmierung: Das Modul behandelt die C++ Mechanismen zur prozeduralen Programmierung, wie Funktionen, Parameterübergabe, Lambdas, Überladung, und Fehlerbehandlung.\n- Konzepte der objektorientierten Programmierung: Das Modul untersucht Klassen, Vererbung (einfach und mehrfach), Polymorphie, und RTTI.\n- Konzepte der generischen Programmierung: Das Modul behandelt Templates, Variadische Templates und Fold Expressions, Expression Templates für lazy evaluation, und typische Patterns wie CRTP - Konzepte der Compile-time Programmierung: Das Modul untersucht Konzepte wie Template Rekursion, constexpr und type traits.\n- Konzepte für Container, Iteratoren und Ranges: Das Modul behandelt die STL Standard-Container, Algorithmen und Laufzeitgarantien, Iteratoren-Konzepte sowie Views und Ranges.\n- Konzepte für Build-Systeme und Abhängigkeitsmanagement: Untersucht werden Konzepte zum automatischen Kompilieren, Linken sowie Management von Abhängigkeiten. Ausserdem werden Konzepte zum kontinuierlichen Testen und Integrieren behandelt.\n- Optional werden Konzepte zur parallelen Programmierung behandelt, wie Threads, Atomics und async/futures, und sehr neue C++-Konzepte wie Modules und Concepts."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1734330&pOrgNr=1",
        "name": "Concepts of C++ Programming",
        "kennung": "IN2377",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer beherrschen die unten genannten Konzepte der C++ Programmierung. Sie sind in der Lage, diese eigenständig zu analysieren und die entsprechenden Analysen auf verwandte Probleme der Programmierung anzuwenden. Ferner sind die Teilnehmer in der Lage, die behandelten C++ Programmierkonzepte einzusetzen, sie ggf. zu modifizieren und verschiedene Lösungen in ihrer Güte zu vergleichen.",
        "inhalt": "Das Modul behandelt zunächst die grundlegenden Konzepte der C++ Programmiersprache (Syntax, starke Typisierung, Typableitungen, Fokus auf Laufzeiteffizienz). Danach werden in dem Modul die zentralen, modernen C++ Programmierkonzepte vorgestellt.\n- Konzepte für das effiziente Ressourcen Management: Das Modul behandelt RAII, smart pointers, universelle Referenzen, Eigentümer und Kopieren/Bewegen.\n- Konzepte der prozeduralen Programmierung: Das Modul behandelt die C++ Mechanismen zur prozeduralen Programmierung, wie Funktionen, Parameterübergabe, Lambdas, Überladung, und Fehlerbehandlung.\n- Konzepte der objektorientierten Programmierung: Das Modul untersucht Klassen, Vererbung (einfach und mehrfach), Polymorphie, und RTTI.\n- Konzepte der generischen Programmierung: Das Modul behandelt Templates, Variadische Templates und Fold Expressions, Expression Templates für lazy evaluation, und typische Patterns wie CRTP\n- Konzepte der Compile-time Programmierung: Das Modul untersucht Konzepte wie Template Rekursion, constexpr und type traits.\n- Konzepte für Container, Iteratoren und Ranges: Das Modul behandelt die STL Standard-Container, Algorithmen und Laufzeitgarantien, Iteratoren-Konzepte sowie Views und Ranges.\n- Konzepte für Build-Systeme und Abhängigkeitsmanagement: Untersucht werden Konzepte zum automatischen Kompilieren, Linken sowie Management von Abhängigkeiten. Ausserdem werden Konzepte zum kontinuierlichen Testen und Integrieren behandelt.\n- Optional werden Konzepte zur parallelen Programmierung behandelt, wie Threads, Atomics und async/futures.\nIm Stoffspektrum des Moduls ist auch ein Ausblick auf zukünftige C++ Konzepte vorgesehen, wie Modules, Concepts und Metaklassen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1378124&pOrgNr=1",
        "name": "CSE Seminar Scientific Computing",
        "kennung": "IN2183",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, the participants are able to independently acquire knowledge and expertise on a well-defined scientific topic in CSE and to present this topic to a group of peers in written and lecture form. The students are proficient in the required scientific writing and presentation techniques.\nThey are able to identify and select relevant scientific literature for the defined topic and work out a seminar paper that summarizes the most important aspects. They can identify key aspects that determine the reproducibility of scientific work and discuss or even demonstrate approaches that allow to reproduce respective results.\n\nThey have also intensified their discipline-specific communication skills: in their peer group, they are able to discuss aspects of trustworthiness, reproducibility and impact (e.g., on science, industry or society) of methods, techniques or results presented in their talks, also comparing between different approaches to tackle problems.\n\nThey can identify strengths and weaknesses in peer presentations, and are able to communicate constructive and scientifically based feedback to fellow participants.",
        "inhalt": "The lecturers determine a current research area in Computational Science and Engineering that defines the overall seminar theme and motivates the individual topics for the participating students.\n\nSeminar themes shall reflect current trends and novel developments in Computational Science and Engineering. Hence, while seminars might be repeatedly offered on the same or a similar topic, lecturers can also choose themes that are only offered once.\n\nSome examples of such seminar topics are:\n- Dynamical Systems & Scientific Computing\n- Fluid-Structure Interaction\n- Fundamentals of Wave Simulation\n- Fluid-Structure Interaction\n- Future Trends in Computing and CSE\n- High-Dimensional Methods and Problems in CSE\n- Case Studies in CSE\n- Software Engineering in Computational Intensive Applications\n\nA strong focus is put on acquiring and training presentation and scientific writing skills during the seminar. This includes (among others):\n• Typical structure of scientific papers and presentations (e.g., introduction, materials & methods, results, …); role of these components.\n• Explaining materials & methods in papers and presentations\n• Discussing related work (with appropriate citation, etc.)\n• Presentation and discussion of results in papers and publications\n• Appropriate use of tools for scientific papers and presentations; how to include illustrative examples and practical demonstrations\n• Appropriate use of media in presentations (projection, blackboard/flipchart, etc.)\nIn that context, the CSE-specific conventions, styles and habits of presenting or scientific writing shall be acquired, but also differences of such conventions between various disciplines shall be discussed."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1254188&pOrgNr=1",
        "name": "Data Analysis and Visualization in R",
        "kennung": "IN2339",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students are able to:\n- 1. produce scripts that automatically generate data analysis report\n- 2. import data from various sources into R\n- 3. apply the concepts of tidy data to clean and organize a dataset\n- 4. decide which plot is appropriate for a given question about the data\n- 5. generate such plots\n- 6. know the methods of hierarchical clustering, k-means, PCA\n- 7. apply the above methods and interpret their outcome on real-life datasets\n- 8. know the concept of statistical testing\n- 9. devise and implement resampling procedures to assess statistical significance\n- 10. know the conditions of applications and how to perform in R the following statistical tests: Fisher test, Wilcoxon test, T-test.\n- 11. know the concept of regression and classification\n- 12 apply regression and classification algorithms in R\n- 13. know the concept of error in generalization, cross-validation\n- 14. implement in R a cross-validation scheme.\n- 15. know the concepts of sensitivity, specificity, ROC curves\n- 16. assess the latter in R",
        "inhalt": "R programming basics 1\nR programming basics 2 (including report generation with R markdown)\nData importing\nCleaning and organizing data: Tidy data 1\nCleaning and organizing data: Tidy data 2\nBase plot\nGrammar of graphics 1\nGrammar of graphics 2\nUnsupervised learning (hierarchical clustering, k-means, PCA)\nCase study I\nDrawing robust interpretations 1: empirical testing by sampling\nDrawing robust interpretations 2: classical statistical tests\nSupervised learning 1: regression, cross-validation\nSupervised learning 2: classification, ROC curve, precision, recall\nCase study II"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=476873&pOrgNr=1",
        "name": "Data Mining und Knowledge Discovery",
        "kennung": "IN2030",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "On successful completion of the module, students\n- understand the different types of data and relations;\n- understand, apply, and evaluate data preparation, analysis, and visualization methods;\n- understand, apply, and evaluate linear and nonlinear correlation, regression and forecasting methods;\n- are able to compare classification and clustering, and to understand, apply, and evaluate the corresponding methods;\n- are able to select, apply, and evaluate suitable data mining methods for given applications.\nThe main didactic goal is to introduce students to a variety of methods and provide them with the basic notions necessary to extend their knowledge by accessing the literature on their own. The work that the students must invest to achieve this goal corresponds the 3 credits assigned to the module.",
        "inhalt": "- data sources, characteristics, and errors\n- data preprocessing and filtering\n- data visualization\n- data projections (principal component analysis, multidimensional scaling, Sammon mapping, auto associator)\n- data transformation and feature selection\n- correlation and regression\n- forecasting\n- classification (Bayes, discriminance, support vector machine, nearest neighbor, learning vector quantization, decision trees)\n- clustering (sequential, protype based, fuzzy, relational, heuristic)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3499417&pOrgNr=1",
        "name": "Data Processing on Modern Hardware",
        "kennung": "CIT3230004",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n\n* implement data processing engines that run faster on modern machines using a variety of techniques:\n- optimize data structures and algorithms for the memory hierarchy\n- effectively adjust the program structure of the execution engine and the data pipelines to better exploit modern hardware features (AVX, SGX,\n- apply custom-parallelization techniques to most common data-processing algorithms\n- efficiently synchronize data structures\n\n* learn how to best leverage new hardware technologies in the context of (distributed) data processing engines:\n- accelerators (e.g., FPGAs, smart NICs, etc.)\n- low-latency high-bandwidth networks\n- modern storage and memory (non-volatile, memory extensions, far memory, CXL)\n\n* reason about software abstractions and programming models for modern hardware, especially in the context of data-intensive applications.\n\n* apply the knowledge in real data management systems:\n- understand what happens in the background\n- do performance analysis and debugging of hot spots and bottlenecks\n- optimize algorithms and data structures to run well both in isolation and alongside other programs (e.g., multi-tenancy).",
        "inhalt": "* Cache hierarchy awareness and how it influences the design of modern data storage formats and indexes.\n* Memory-, threading- and execution models for data processing on modern machines\n* Latest practices for query execution, compilation and optimization\n* Exploiting parallelism in multi-core machines for in-memory data management systems, with particular focus on crafting for non-uniformity in memory access latencies\n* Building efficient distributed data processing at scale through the use of modern network and storage technologies"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3471253&pOrgNr=1",
        "name": "Data Structure Engineering",
        "kennung": "CIT3230003",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Students can design efficient and compact data structures. They are capable of implementing custom, domain-specific data structure variants and of synchronizing them for multi-core processors in a scalable fashion.",
        "inhalt": "Data structure engineering is the process of designing and implementing in-memory and out-of-memory data structures to support the efficient storage, organization, and retrieval of data. On modern hardware a low asymptotic complexity alone does not guarantee high performance; one must also take features of today's processors and storage technologies into account. The course first introduces the necessary hardware background, before studying different data structures such as hash tables, search trees, and tries and how to optimize them for modern hardware."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473867&pOrgNr=1",
        "name": "Database Systems on Modern CPU Architectures",
        "kennung": "IN2118",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden\n- verstehen die Interaktion von Datenbanksystemen/-algorithmen und modernen Rechnerarchitekturen (hier: CPU, Cache, Primärspeicher) und\n- lernen, wie die Interna von Datenbanksystemen zu entwickeln bzw. zu modifizieren sind, um die Eigenschaften dieser Rechnerarchitekturen mit Gewinn nutzen zu können.",
        "inhalt": "- Architektur moderner CPUs und die Speicherhierarchie\n- Cache-Speicher, TLB, assoziative Speicher\n- Sprungvorhersage in CPUs\n- Sequentieller und randomisierter Speicherzugriff\n- Speicherzugriffsmuster bei der Anfrageauswertung in RDBMS\n- Tupelspeicherung in relationalen DBMS (RDBMS)\n- Vertikal fragmentierte RDBMS und Anfrageauswertung\n- Cache-bewusste Datenbank-Algorithmen (z.B. Joins, Sortierung)\n- Hauptspeicherdatenbanksysteme\n- Kompression zur Datendurchsatzsteigerung"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261085&pOrgNr=1",
        "name": "Datenbanksysteme für Hörer anderer Fachrichtungen",
        "kennung": "IN8002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden lernen den systematischen Einsatz von Relationalen Datenbanksystemen (RDBMS). Die Teilnehmer sind in der Lage, reale Miniwelten (Applikationen) auf die Tabellenstrukturen des RDBMS abzubilden und die so entworfenen Datenbanken zu manipulieren und anzufragen. Es wird Verständnis für Grundlagen, Interna und Grenzen von RDBMS vermittelt, so dass die Studierenden Datenbanksysteme intelligent einsetzen und bewerten können.",
        "inhalt": "Diese Vorlesung vermittelt das Basiswissen, um relationale (tabellen-orientierte) Datenbanksysteme intelligent und effektiv einsetzen zu können. Dazu wird der Prozess des konzeptuellen Datenbankentwurfes (die Identifikation und Abbildung von realen Applikations-Miniwelten auf Entity-Relationship-Modelle) systematisch und detailliert vermittelt. Diese ER-Modelle werden anschließend in Tabellenstrukturen - Relationen - überführt, die letztendlich dem Datenbanksystem direkt zugänglich sind. Die Vorlesung diskutiert die Qualität solcher Abbildungen und führt dazu in die Grundlagen der Normalformenlehre ein. In der Folge bespricht die Vorlesung die Formulierung von Anfragen, vor allem formuliert in SQL, gegen die so entstandenen Relationen. Dabei aufgeworfene Fragen der Performanz und Konsistenz von Datenbanken werden untersucht, indem grundlegende Interna der Anfragebearbeitung, Indexstrukturen und Transaktionsverwaltung erläutert werden. Die Einbindung von Datenbanksystemen in web-gestützte Applikationen (Einbettung in Programmier- und Skriptsprachen) wird vorgestellt, bevor ein Ausblick auf Datenbanksysteme für nicht-relationale Daten (vor allem XML) die Vorlesung absschließt. In den Übungen zur Vorlesung wird der praktische Umgang mit Datenbanksystemen erlernt."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4132629&pOrgNr=1",
        "name": "DevOps: Engineering for Deployment and Operations",
        "kennung": "CIT423001",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "This module focuses on the practical application of the covered content. After completing the course, students will be able to:\n• Explain DevOps Principles: Critically examine and differentiate between the cultural and organizational aspects of DevOps to optimize the software development lifecycle.\n• Apply Virtualization and Cloud Integration: Implement and execute virtualization and cloud technologies to enhance operational efficiency.\n• Design Deployment Strategies: Construct continuous integration and delivery pipelines using systematic planning and creative problem-solving.\n• Evaluate Monitoring and User Feedback: Assess monitoring strategies and interpret user feedback to refine and improve the development process.\n• Apply Security and Compliance Best Practices: Integrate security processes and compliance measures by incorporating cross-cutting security aspects to facilitate risks.\n• Create Microservices and Scalable Architectures: Design and develop scalable microservice architectures, applying innovative solutions to complex system requirements.\n• Operate Production Environments: Configure deployment software measures, apply best practices for incident management and resolve problem, e.g. rollbacks.\n• Investigate Advanced DevOps Topics: Explore and research advanced concepts and current trends in DevOps to foresee the impact on future methodologies and practices.",
        "inhalt": "DevOps is an integrative approach to software engineering, blending development (Dev) and operations (Ops) to optimize the software development lifecycle, enhance collaboration, and streamline workflows. It emphasizes the use of automated processes, continuous integration, and deployment strategies to improve the efficiency and quality of software systems. It has become a widely adopted practice in the software industry, since it leads to shorter release cycles of software while achieving high quality. Key topics in DevOps include, among others:\n• Introduction and Overview of DevOps\n• DevOps Culture and Organization\n• Software Engineering in DevOps\n• Virtualization, Containers, and Cloud Integration\n• Deployment Strategies and Continuous Delivery\n• Monitoring, Feedback, and User-Centric Approaches\n• Security, Risk Management, and Compliance\n• Microservices and Scalable Architectures\n• Post-Production Management\n• Advanced Topics and Emerging Trends"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=961565&pOrgNr=1",
        "name": "Didaktik von Planspielen",
        "kennung": "IN2301",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage...\n- Einsatzmöglichkeiten für computerunterstützte Planspiele zu erläutern\n- lerntheoretische Grundlagen auf computerunterstützte Planspiele anzuwenden\n- unterschiedliche Formen von Planspielen zu kategorisieren\n- Konzepte zum didaktischen Design von Planspielen zu erarbeiten",
        "inhalt": "- Ansätze der Lerntheorie\n- Mediendidaktische Grundlagen computerunterstützter Planspiele\n- Einsatzmöglichkeiten für computerunterstützte Planspiele\n- Didaktisches Design von Planspielen\n- Konzepte für Planspiele\n- Phasen der Planspiel-Arbeit"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473930&pOrgNr=1",
        "name": "Didaktisches und pädagogisches Training für Tutoren",
        "kennung": "IN9028",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer können elementare Konzepte der Lernpsychologie und der Lehr-Lernforschung verstehen und anwenden. Zudem beherrschen sie Methoden zur Planung, Organisation und Durchführung von Tutorübungen. Lehrmethoden und Medien zur Förderung des individuellen Lernfortschritts können sie auswählen, bewerten und anwenden.",
        "inhalt": "1. Grundlagen der allgemeinen Lehr-/Lernforschung, insbesondere psychologische Grundlagen des Lernens. Grundzüge des Konstruktivismus als Lehr-/Lernkonzept\n2. Techniken und Hilfsmittel zur Vermittlung informatischer Inhalte\n3. Leistungsbeurteilung, Gender-Aspekte und -Effekte\n4. Konzeption, Gestaltung und Bewertung von Tutorübungen in der Informatik\n5. Planung, Organisation und Durchführung von Tutorübungen in der Informatik"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=454051&pOrgNr=1",
        "name": "Diskrete Strukturen",
        "kennung": "IN0015",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreichem Abschluss des Moduls\n- beherrschen Teilnehmer die Grundbegriffe sowie die Grundlagen des Umgangs mit logischen, algebraischen und algorithmischen Kalkülen,\n- können kombinatorische Problemstellungen lösen,\n- können Probleme mit Methoden der Graphentheorie modellieren und lösen und\n- sind zur quantitativen Betrachtung der Effizienz von Lösungsmethoden und Algorithmen in der Lage.",
        "inhalt": "Die Vorlesung ist eine Einführung in die Begriffe und Bereiche der Diskreten Mathematik für Informatiker. Sie gliedert sich in fünf Teilen:\n\n1) Grundbegriffe der Mengen, Relationen und Funktionen:\n- Mengen: Grundoperationen, Äquivalenzgesetze, KV-Diagramme,\nAbzählbarkeit, Satz von Cantor\n- Relationen: Join, Transitive Hülle, Relationale Algebra\n- Funktionen: Grundeigenschaften, Komposition, Inverse\n\n2) Grundlagen der Aussagenlogik und Logik erster Stufe:\n- Aussagenlogik:\n- Syntax und Semantik\n- Wahrheitstabellen und Bezug zu KV-Diagramme\n- Äquivalenzgesetze\n- KNF, DNF, Normalisierungsverfahren, Erfüllbarkeitsäquivalenz\n- SAT-Verfahren: DPLL, Resolution. Korrektheitsnachweis\n- Modellierung mit Aussagenlogik\n- Prädikatenlogik\n- Syntax und Semantik\n- Äquivalenzgesetze\n- Modellierung mit Prädikatenlogik\n\n3) Grundlagen der Kombinatorik:\n- Zählprinzipien\n- Ziehung von Bällen aus Urnen: Variationen, Permutationen, Kombinationen.\n- Binomialkoeffizienten: Symmetrie, Identitäten von Pascal und Vandermonde\n- Verteilungsprobleme\n- Stirling-Zahlen der ersten und zweiten Art\n- Geordnete und ungeordnete Zahlpartitionen\n- Anwendung Lastverteilung\n\n4) Grundlagen der Graphentheorie:\n- Grunddefinitionen\n- Bäume\n- Eulerkreise: Satz von Euler. Hamiltonkreise: Sätze von Dirac und Ore\n- Planargraphen: Eulersche Polyederformel, Satz von Kuratowski\n- Matchings: Heiratssatz, augmentierende Pfade\n- Matchings mit Präferenzen: Satz von Gale-Shapley\n\n5) Algebraische Grundlagen:\n- Grunddefinitionen: Algebra, Gruppe, Ring, Körper\n- Gruppen\n- Ordnung: Satz von Lagrange, Erzeuger, Gruppenexponent\n- Zyklische Gruppen\n- Zahlentheoretische Grundlagen: Größter gemeinsamer Teiler,\nErweiterter euklidischer Algorithmus, Eulersche phi-Funktion\n- Multiplikative Restklassengruppen\n- RSA"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=454053&pOrgNr=1",
        "name": "Diskrete Wahrscheinlichkeitstheorie",
        "kennung": "IN0018",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreichem Abschluss des Moduls\n- sind die Teilnehmer mit wichtigen Konzepten der diskreten und kontinuierlichen Wahrscheinlichkeitsräume sowie der stochastischen Prozesse vertraut und können diese in weiten Teilen selbst herleiten\n- beherrschen Rechenregeln zur Bestimmung und Abschätzung von Wahrscheinlichkeiten, Erwartungswerten und Varianzen,\n- sind in der Lage, reale Probleme auf abstrakte Wahrscheinlichkeitsräume abzubilden und\n- können einfache statistische Tests fachgerecht anwenden.",
        "inhalt": "-Grundlagen der (diskreten) Wahrscheinlichkeitstheorie\n++ Wahrscheinlichkeitsräume, Ereignisse, Prinzip der Inklusion/Exklusion, Boolesche Ungleichung, bedingte Wahrscheinlichkeit, Multiplikationssatz, Satz der totalen Wahrscheinlichkeit, Satz von Bayes, Unabhängigkeit\n++ Zufallsvariablen, Erwartungswert, Varianz, Linearität des Erwartungswertes, bedingte Zufallsvariablen und deren Erwartungswert, Varianz, Momente und zentrale Momente, mehrere Zufallsvariablen und deren gemeinsame Dichte & Verteilung, Unabhängigkeit von Zufallsvariablen, Momente zusammengesetzter Zufallsvariablen, Indikatorvariablen\n++ diskrete Verteilungen: Bernoulli-Verteilung, Binomialverteilung, geometrische Verteilung, Coupon-Collector-Problem, Poisson-Verteilung, Zusammenhänge unter den Verteilungen\n++ Methoden zur Abschätzung von Wahrscheinlichkeiten, Ungleichungen von Markov und Chebyshev, Chernoff Schranken\n++ Gesetz der großen Zahlen\n++ wahrscheinlichkeitserzeugende Funktionen und deren Anwendung auf Verteilungen, momenterzeugende Funktionen mit verschiedenen Anwendungen\n\n-Kontinuierliche Wahrscheinlichkeitsräume\n++ kontinuierliche Zufallsvariablen, Kolmogorov Axiome, sigma-Algebren, Lebesgue-Integrale, Rechnen mit kontinuierlichen Zufallsvariablen, Simulation von Zufallsvariablen\n++ kontinuierliche Verteilungen: Gleichverteilung, Normalverteilung und lineare Transformation, Exponentialverteilung und Warteprozesse, Zusammenhang mit diskreten Verteilungen\n++ mehrere kontinuierliche Zufallsvariablen, Randverteilungen und Unabhängigkeit, Summen von Zufallsvariablen\n++ Momenterzeugende Funktionen für kontinuierliche Zufallsvariablen\n++ Zentraler Grenzwertsatz\n\n-Induktive Statistik\n++ Schätzvariablen, Maximum-Likelihood-Prinzip, Konfidenzintervalle, Testen von Hypothesen, Entwicklung und Anwendung von statistischen Tests\n\n-Stochastische Prozesse\n++ Prozesse mit diskreter Zeit, Markovketten, Übergangswahrscheinlichkeiten, Ankunftswahrscheinlichkeiten, Übergangszeiten, Rückkehrzeiten, Fundamentalsatz für ergodische Markovketten"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1517636&pOrgNr=1",
        "name": "Echtzeit-Computergrafik",
        "kennung": "IN0038",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer erwerben vertiefende Kenntnisse im Bereich der Spieleentwicklung mit dem Fokus auf Echtzeitgrafik, physikalische Bewegungssimulation und Kollisionsdetektion. Nach dem Besuch des Moduls kennen die Teilnehmer die wesentlichen Komponenten von Game Engines und verstehen deren Zusammenspiel. Sie verstehen die grundlegenden Prinzipien der Rasterisierungs-basierten Rendering-Pipeline, sind mit einfachen Methoden zur Simulation von Partikelbewegungen vertraut und kennen die grundlegenden Methoden zur Detektion von Kollisionen zwischen dynamischen Körpern. Die Studierenden demonstrieren die Fähigkeit, die erlernten Konzepte und Methoden anzuwenden und anwendungsspezifisch zu erweitern.",
        "inhalt": "Das Modul ist begleitend zum Modul IN0039 Praktikum Echtzeit-Computergrafik. In der Vorlesung werden grundlegende Algorithmen der Echtzeit-Grafikprogrammierung und der Simulation der Bewegungsdynamik starrer Körper besprochen. Themen sind: Polygon-Modelle, Beleuchtungssimulation und Shading, Texture-Mapping, Rasterisierungs-basierte Graphikpipeline, Bewegungsdynamik, Partikel-Systeme, Kollisionsdetektion und -Auflösung."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456350&pOrgNr=1",
        "name": "Efficient Algorithms and Data Structures",
        "kennung": "IN2003",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Absolvierung des Moduls sind Studierende in der Lage, die Laufzeit und den Speicherplatzbedarf von Algorithmen zu analysieren und zu bewerten. Darüber hinaus verfügen sie über ein grundlegendes Verständnis für die Arbeitsweise zahlreicher fundamentaler Algorithmen und Datenstrukturen. Dieses Verständnis versetzt sie in die Lage, für neue Probleme selbständig Algorithmen und Datenstrukturen zu entwickeln.",
        "inhalt": "Das Modul behandelt zunächst die Grundlagen der Algorithmenanalyse. Anschließend werden fundamentale Datenstrukturen und grundlegende algorithmische Probleme behandelt.\nIm Bereich der Grundlagen der Algorithmenanalyse studiert das Modul verschiedene Maschinenmodelle, Komplexitätsmaße sowie das Lösen von Rekursionsgleichungen.\nAuf dem Gebiet der fundamentalen Datenstrukturen stellt das Modul verschiedene Suchbäume, Hash-Verfahren, Prioritätswarteschlangen und Union-Find-Datenstrukturen vor.\nIm Bereich der grundlegenden Algorithmen konzentriert sich das Modul auf die Entwicklung von zahlreichen Maxflow- und Mincutalgorithmen sowie auf Algorithmen für das Matching-Problem."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=455704&pOrgNr=1",
        "name": "Effiziente Algorithmen und Datenstrukturen II",
        "kennung": "IN2004",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach dem Absolvieren des Moduls verfügen Studierende über umfangreiche Kenntnisse fortgeschrittener algorithmischer Methoden, insbesondere aus dem Bereich der Linearen Optimierung. Darüber hinaus wissen sie um die Bedeutung von Approximationsalgorithmen für die Lösung NP-vollständiger Probleme. Sie kennen verschiedene Techniken, um approximative Lösungen für Probleme aus dem Bereich der kombinatorischen Optimierung zu gewinnen und können diese Techniken selbstständig auf neue Probleme anwenden, die in einer wissenschaftlichen und/oder beruflichen Anwendung auftreten.",
        "inhalt": "Lineare Optimierung\n- Modellierung\n- Simplex-Verfahren\n- Seidels Algorithmus\n- Ellipsoidmethode\n- Karmarkar\n\nApproximationsalgorithmen\n- Greedy Methoden\n- Lokale Suche\n- Rundungsmethoden\n- Primal/Dual-Verfahren"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1254056&pOrgNr=1",
        "name": "Einführung in Audio für Games",
        "kennung": "IN2338",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul haben die Teilnehmenden ein grundsätzliches Verständnis über die Rolle des Sound Designers in der Spieleentwicklung. Die Teilnehmenden haben außerdem ein grundsätzliches Wissen über die Themen Game Music, Sound Effects in Games sowie über Audiosysteme von Game Engines.\nDie Teilnehmenden sind in der Lage, eigenständig in einem Spiel die komplette Audio-Einbindung zu konfigurieren und zu implementieren. Die Teilnehmenden können ein Spiel mit passenden Soundeffekten, Hintergrundmusik und Sprachausgabe vertonen.\nDie während des Kurses vermittelten Grundlagen über Game Music können von den Teilnehmenden praktisch angewendet werden.",
        "inhalt": "Das Seminar gibt detaillierte Einblicke in die Themen Sound Design, Game Music und Sound Effects in Games sowie Audiosysteme in Game Engines. Dabei werden neben den Grundlagen auch Verfahren in den genannten Themenbereichen vorgestellt. Beispiele aus der Praxis zeigen die typischen Anwendungen, wie die vorgestellten Verfahren benutzt und die Grundlagen angewendet werden können. Dabei werden unter anderem folgende Punkte bearbeitet:\n• Entwicklung der Game Music\n• Typische Eigenschaften von Game Music und Abgrenzung zu anderen Musikbereichen\n• Dynamische Musik\n• Grundlagen des Komponierens\n• Typische Eigenschaften von Sound Effects in Games\n• Foley Sound Design\n• Voice Acting\n• Grundlagen der Produktion von Sound Effects\n• Audio-Techniken\n• Audio-Setup in Game Engines\n• Audio-Mixing in Game Engines"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2814357&pOrgNr=1",
        "name": "Einführung in das Datenschutzrecht",
        "kennung": "IN9050",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul sind die Studierenden in der Lage:\n- die geschichtliche Entwicklung des Datenschutzrechts und dessen verfassungsrechtlichen Hintergrund nach zu skizzieren.\n- die Systematik des Datenschutzrechts zu erfassen und dessen Anwendungsbereich prüfen.\n- die Auswirkungen der Grundprinzipien des Datenschutzrechts zu erfassen und auf konkrete Beispiele anzuwenden.\n- die Zulässigkeit der Verarbeitung personenbezogener Daten nach der DSGVO in verschiedenen Einzelfällen zu beurteilen.\n- die Rechte Betroffener und die organisatorischen Pflichten des Verantwortlichen zu nennen und auszuüben.\n- die Besonderheiten bei der Übermittlung personenbezogener Daten ins Ausland darzulegen.\n- Datenschutzverstöße und die passenden Sanktionen, wie Geldbußen, Geld- und Freiheitsstrafen, zu verknüpfen.",
        "inhalt": "Folgende fachlichen Inhalte werden im Modul vermittelt:\nKapitel 1: Geschichte des Datenschutzrechts und verfassungsrechtlicher Hintergrund\nKapitel 2: Systematik und Anwendungsbereich des Datenschutzrechts\n1. Systematik\n2. Anwendungsbereich des deutschen und europäischen Datenschutzrechts\n3. Relevante Akteure des Datenschutzrechts\nKapitel 3: Grundprinzipien des Datenschutzrechts\n1. Überblick\n2. Rechtmäßigkeit\n3. Transparenz\n4. Zweckbindung\n5. Datenminimierung\n6. Rechenschaftsprinzip\nKapitel 4: Zulässigkeit der Verarbeitung personenbezogener Daten\n1. Rechtsgrundlagen der Datenverarbeitung nach der DSGVO\n2. Einwilligung des Betroffenen\n3. Vertragliche Beziehungen\n4. Erfüllung rechtlicher Pflichten\n5. Schutz lebenswichtiger Interessen\n6. Wahrnehmung öffentlicher Aufgaben\n7. Überwiegendes Interesse des Datenverarbeiters\n8. Besondere Kategorien personenbezogener Daten\nKapitel 5: Rechte Betroffener\n1. Allgemeines\n2. Informationspflichten des Verantwortlichen und Auskunftsrecht des Betroffenen\n3. Recht auf Berichtigung\n4. Löschungsanspruch des Betroffenen („Recht auf Vergessenwerden“)\n5. Datenportabilität\n6. Widerspruchsrecht und automatisierte Einzelfallentscheidungen\nKapitel 6: Organisatorische Pflichten des Verantwortlichen\n1. Stärkung der organisatorischen Pflichten durch die DSGVO\n2. Abhängigkeit des Pflichtenumfangs vom Risiko der Verarbeitung\n3. Datenschutz durch Technikgestaltung und durch datenschutzfreundliche Voreinstellungen\n4. Datensicherheit\n5. Meldung von „Datenpannen“\n6. Datenschutz-Folgenabschätzung\n7. Verarbeitungsverzeichnis)\n8. Bestellung eines Datenschutzbeauftragten\n9. Zusammenfassung\nKapitel 7: Übermittlung personenbezogener Daten ins Ausland\n1. Allgemeines\n2. Zwei-Stufen-Test\n3. Angemessenheitsbeschluss der EU\n4. EU-US Privacy Shield\n5. Geeignete Garantien\n6. Ausnahmen für bestimmte Fälle\nKapitel 8: Sanktionen für Datenschutzverstöße\n1. Überblick: Datenschutzordnungswidrigkeiten und Datenschutzstraftaten\n2. Bußgelder für Datenschutzordnungswidrigkeiten\n3. Sanktionen für Datenschutzstraftaten\n4. Straftaten nach dem allgemeinen Strafrecht\nKapitel 9: Praxisbeispiele\n1. Datenschutz im Internet: Fallbeispiel\n2. Datenschutz im Internet: Cookies\n3. Datenschutz im Arbeitsverhältnis: Fallbeispiel\n4. Zulässigkeit einer Corona-Tracing-App"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=455630&pOrgNr=1",
        "name": "Einführung in die Informatik",
        "kennung": "IN0001",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die wesentlichen Konzepte der Informatik auf einem grundlegenden, praxis-orientierten, aber wissenschaftlichen Niveau und können mit ihnen verantwortungsvoll umgehen.\nKonzepte dieser Art sind etwa: Algorithmen, Syntax und Semantik, sowie Effizienz im Hinblick auf Speicherverbrauch oder Zeit.\nDie Teilnehmer sind dann in der Lage, in Java oder einer ähnlichen objektorientierten Sprache überschaubare algorithmische Probleme zu lösen und einfache verteilte und nebenläufige Anwendungen zu programmieren. Sie verstehen die diesen Programmiersprachen zugrundeliegenden Konzepte und Modelle und sind deshalb in der Lage, andere zuweisungs- und objektorientierte Programmiersprachen eigenständig zu erlernen.",
        "inhalt": "In dem Modul IN0001 werden beispielhaft folgende Inhalte behandelt:\n- Einführung\n++ Grundlegende Begriffe: Problem - Algorithmus - Programm\n++ Imperative Programmkonstrukte\n- Syntax und Semantik\n++ Syntax von Programmiersprachen: reguläre Ausdrücke und kontextfreie Grammatiken\n++ Semantik von Programmen: Kontrollfluss-Diagramme\n- Grundlegende Datenstrukturen I:\n++ Zahlen, Strings, Felder\n++ Sortieren durch Einfügen\n- Rekursion\n++ Binäre Suche\n++ Rekursionsarten\n- Grundlegende Datenstrukturen II:\n++ Objekte, Klassen, Methoden\n++ Listen, Keller und Schlangen\n- Objektorientierte Programmierung\n++ Vererbung\n++ abstrakte Klassen und Interfaces\n++ Polymorphie\n- Programmieren im Großen (Ausblick und Einbettung in ökonomische, gesellschaftliche und ethische Zusammenhänge)\n- Nebenläufige Programmierung und Threads"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458528&pOrgNr=1",
        "name": "Einführung in die Informatik für andere Fachrichtungen",
        "kennung": "IN8005",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an Vorlesung und Übung sind die Studierenden in der Lage, wichtige Grundbegriffe, Konzepte und Denkweisen der Informatik, speziell objektorientiertes Programmieren, Datenbanken & SQL und grundlegende Algorithmen und Datenstrukturen zu verstehen, zu überblicken und zur Entwicklung eigener Programme mit Datenbankanbindung grundlegend anwenden zu können.",
        "inhalt": "In dem Modul IN8005 werden beispielhaft folgende Inhalte behandelt:\n- Datenbankmanagementsysteme, ER-Modellierung, relationale Algebra und SQL\n- Java als Programmiersprache:\n++ Grundsätzliche Konstrukte imperativer Programmierung (if, while, for, Arrays etc.)\n++ Objektorientiertes Programmieren (Vererbung, Interfaces, Polymorphie etc.)\n++ Grundlagen von Exception Handling und Generics\n++ Code-Conventions\n++ Java Klassenbibliothek\n- Grundlegende Algorithmen und Datenstrukturen:\n++ Algorithmusbegriff, Komplexität\n++ Datenstrukturen für Sequenzen (verkettete Listen, Arrays, Stacks & Queues)\n++ Rekursion\n++ Hashing (Chaining, Probing)\n++ Suchen (Binäre Suche, balancierte Suchbäume)\n++ Sortieren (Insertion-Sort, Selection-Sort, Merge-Sort)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3763023&pOrgNr=1",
        "name": "Einführung in die Informatik für andere Fachrichtungen (Mathematik)",
        "kennung": "CIT1230000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreichem Abschluss dieses Moduls sind Studierende in der Lage:\n• ER-Modellierung und relationale Modellierung verstehen und für den Entwurf einer Datenbank anwenden\n• SQL verstehen und anwenden, um Informationsanforderungen zu formalisieren und zu beantworten\n• grundlegende prozedurale Programmierung verstehen und anwenden, um Lösungen für einfache Probleme mit mathematischen Komponenten zu erstellen\n• objektorientierte Programmierung verstehen und anwenden, um einfache Probleme mit mathematischen Komponenten zu modellieren\n• die beiden oben genannten Fähigkeiten anwenden, um sich schnell in neue Programmiersprachen (z. B. Python) einzuarbeiten oder Elemente der Java-Klassenbibliothek auf Basis konkreter Anforderungen zu nutzen (z. B. im Hinblick auf parallele Programmierung, Streams, Collections, UI-Bibliotheken (z. B. Java FX). ) usw.)\n• die grundlegende zeitliche Komplexität von Algorithmen und grundlegenden Datenstrukturen (Stapel, Warteschlangen, Suchbäume) verstehen und auf Lösungen für einfache Probleme mit mathematischen Komponenten anwenden",
        "inhalt": "• Block Datenbanken:\no ER-Modellierung\no Relationale Modellierung\no Relationale Algebra\no SQL\n• Block Java:\no Prinzipien der Programmierung und objektorientierten Programmierung\no Primitive Typen und Referenztypen, Arrays\no Elementare prozedurale Programmierung (Anweisungen, Anweisungen, Deklarationen, If-Anweisungen, Schleifen, Methodenaufrufe)\no Klassen, Objekte, Methoden\no Ausnahmebehandlung, Generics\n• Block Algorithmen und Datenstrukturen:\no Algorithmuskonzept\no Elementare Komplexität, Landau-Symbole, P vs. NP\no Datenstrukturen und abstrakte Datentypen\no Datenstrukturen für Sequenzen: dynamische Arrays vs. doppelt verknüpfte Listen\no Anwendung für Sequenzen:\n- Queues: Breitensuche\n- Stacks: Rekursion und Call-Stack\no Hashing\no Suche:\n- Binäre Suche\n- Suchbäume\no Sortieren:\n- Insertion Sort, Bubble Sort, Selection Sort\n- Merge Sort"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=661433&pOrgNr=1",
        "name": "Einführung in die Informatik für Games Engineering",
        "kennung": "IN0031",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage, die wesentlichen Schritte bei der Entwicklung und Produktion von Spielkonzepten, insbesondere im Bereich der Preproduction und Kontentgenerierung, und die grundlegenden technischen Komponenten, wie Game Loops, Kollisionssysteme, Interaktionskonzepte und Szenen Graphen, eines Computerspiels darzulegen, sowie eigene Spielideen in einer bestehenden Entwicklungsumgebung umzusetzen.",
        "inhalt": "Grundlegende Konzepte in den Bereichen:\n- Entwicklungsgeschichte: Gaming\n- Rollen verschiedener Beitragender zur Spieleentwicklung\n- Spielgenres\n- Psychologische Grundlagen von Spielen und Ideen (Motivation, Flow, Kreativität)\n- Spielproduktion\n- Innovationen im Spielebereich\n- Ausgewählte technische Grundlagen der Spieleumsetzung (Game Engine Design, Rendering, Transformationen,\nKollisionserkennung, Künstliche Intelligenz, Nutzerschnittstelle)\n- Im Übungsbetrieb beispielhafte Umsetzung von Spielkonzepten auf Basis einer Game Engine inklusive\nprojektorientierter Anwendungen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4061438&pOrgNr=1",
        "name": "Einführung in die Informatik für Studierende der Mathematik",
        "kennung": "CIT123000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmenden die wesentlichen Konzepte der Informatik auf einem grundlegenden aber wissenschaftlich fundierten, praxis-orientierten Niveau. Beispiele für solche Konzepte sind: Algorithmen, Syntax und Semantik, oder Effizienz im Hinblick auf Speicherverbrauch oder Zeit.\nDie Teilnehmer sind dann in der Lage, in Java oder einer ähnlichen objektorientierten Sprache überschaubare algorithmische Probleme zu lösen und einfache verteilte und nebenläufige Anwendungen zu programmieren. Sie verstehen die diesen Programmiersprachen zugrundeliegenden Konzepte und Modelle und sind deshalb in der Lage, sich andere imperative und / oder objektorientierte Programmiersprachen eigenständig anzueignen.\nDie Studierenden beherrschen die nach der erfolgreichen Teilnahme an diesem Modul Programmiersprache Java und das Programmieren im Kleinen. Sie können Programme eigenständig entwickeln und dabei wesentliche Konzepte der Informatik auf einem grundlegenden, praxis-orientierten, aber wissenschaftlichen Niveau anwenden.",
        "inhalt": "In der Vorlesung werden folgende Inhalte behandelt:\n• Grundlegende Begriffe: Problem - Algorithmus - Programm\n• Imperative Programmkonstrukte\n• Syntax und Semantik\n• Syntax von Programmiersprachen: reguläre Ausdrücke und kontextfreie Grammatiken\n• Semantik von Programmen: Kontrollfluss-Diagramme\n• Grundlegende Datenstrukturen und Algorithmen I:\n- Zahlen, Strings, Felder\n- Sortieren durch Einfügen\n- Rekursion, Rekursionsarten\n- Binäre Suche\n• Grundlegende Datenstrukturen II:\n- Objekte, Klassen, Methoden\n- Listen, Keller und Schlangen\n• Objektorientierte Programmierung\n- Vererbung\n- abstrakte Klassen und Interfaces\n- Polymorphie\n• Programmieren im Großen (Ausblick)\n• Nebenläufige Programmierung und Threads\n\nBegleitend behandelt das Programmierpraktikum\nAufgabenstellungen und ihre praktische Umsetzung in Java, die u.a. die kreative Verwendung dieser Inhalte zur Problemlösung einüben"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=768528&pOrgNr=1",
        "name": "Einführung in die Programmierung für Bioinformatiker",
        "kennung": "IN2168",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer verfügen über das zur Lösung einfacher Programmieraufgaben notwendige theoretische und praktische Wissen.\nKenntnisse\n- Linux:\n++ Aufbau der Linux-Dateisystemhierarchie\n++ wichtige und häufig benutzte Unix-Kommandozeilenwerkzeuge\n++ Aufbau von Pipes und Filtern zur Verbindung von Kommandos\n- Shell: Aufbau und Kommandos der Bash, einfache Programmierkonstrukte\n- Perl:\n++ Softwarekomponenten, Laufzeitumgebung\n++ grundlegende Syntax und Programmierkonstrukte\n++ typische Konstrukte\n++ Aufbau regulärer Ausdrücke\n++ O rganisation von Modulen\n++ wichtige Zusatzmodule\n- Java\n++ Syntax und Programmierkonstrukte\n++ Grundlagen der objektorientierten Programmierung\n++ Ableitung von Klassen und Interfaces\n++ Auto-(Un)Boxing\n++ generische Klassen\n++ Klassen zur Unterstützung von regulären Ausdrücken\n++ Klassen für den Netzwerkzugriff\n- Grundzüge der Programmentwicklung\n\nFertigkeiten und Kompetenzen:\nDie Studenten sollen mit Hilfe der vermittelten Kenntnisse in der Lage sein, einfache gestellte Probleme analysieren zu können und einen Lösungsweg vorschlagen zu können. Dieser Lösungsweg soll dann in ein lauffähiges Programm überführt werden können. Die Beherrschung dieser Grundlagen stellt eine wichtige Voraussetzung für die erfolgreiche Teilnahme am Programmierpraktikum dar.",
        "inhalt": "- einfache Linux Kommandos\n- Shell\n- Perl\n- Java"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1219520&pOrgNr=1",
        "name": "Einführung in die Programmierung mit Python",
        "kennung": "IN8026",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Studierende können automatisierte Lösungen für einfache Alltagsprobleme entwickeln und in Python implementieren. Sie kennen einschlägige Prinzipien der Informatik hinsichtlich Problemlösung und Programm-Entwicklung und können diese in der Praxis des Programmierens anwenden. Sie können Programmierung in die Fachdisziplin der Informatik und in die Werkzeugkiste von Ingenieur-Disziplinen einordnen.",
        "inhalt": "Programmieren verhält sich zu Informatik wie Schreiben zu Literatur- oder Kommunikationswissenschaft. Programmieren ist eine Fertigkeit, die überall sinnvoll eingesetzt werden kann, wo es um Automatisierungen geht, die sich mit Hilfe eines Computers ausführen oder unterstützen lassen. Das kann im Alltag sein, aber auch in fachlichen und beruflichen Kontexten. Programmieren ist eine Kulturtechnik, die Bestandteil der Allgemeinbildung sein sollte.\n\nIn diesem Kurs werden die Anfangsgründe der Programmierung anhand der Programmiersprache Python vermittelt. Es geht um grundlegende Konzepte der prozeduralen Programmierung und einen Einstieg in die objekt-orientierte Programmierung. Wir behandeln die folgenden Sprachmittel in Python:\n\neinfache Datentypen\nzusammengesetzte Datentypen (Listen, Dictionaries)\nVariablen, Ausdrücke und Wertzuweisungen\nKontrollstrukturen (bedingte Anweisungen, Schleifen)\nVerwendung vordefinierter Methoden und Klassen\nDefinition eigener Methoden\nDefinition eigener Klassen\n\nWir entwickeln Spiele, angefangen bei einfachen Spielen mit Steuerung über die Tastatur und Ausgabe auf der Konsole bis hin zu Spielen mit graphischen Animationen und Sound-Effekten. Im Kontext der Programmier-Aufgaben ergänzen wir unseren Werkzeugkasten um einschlägige fundamentale Prinzipien zu Problemlösung (Computational Thinking, algorithmisches Denken) und zu Programm-Entwicklung (Qualitätskriterien wie Lesbarkeit, Stabilität, Testbarkeit, Erweiterbarkeit)."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452816&pOrgNr=1",
        "name": "Einführung in die Softwaretechnik",
        "kennung": "IN0006",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an dem Modul kennen die Studierenden die Konzepte und Methoden für die verschiedenen Phasen eines Projekts, z.B. Modellierung des Problems, Wiederverwendung von Klassen und Komponenten, und Auslieferung der Software. Sie sind in der Lage für konkrete Probleme die geeigneten Konzepte und Methoden auszuwählen und anzuwenden.\n\nDie Studierenden kennen die wichtigsten Begriffe und Vorgehensweisen der Softwaretechnik und können gegebene Probleme daraufhin analysieren und bewerten. Darüber hinaus haben sie die Fähigkeit konkrete Problemstellungen in der Softwaretechnik, z.B. mit Hilfe von Entwurfsmustern, zu lösen.",
        "inhalt": "Software-Engineering wendet systematische Konstruktionsprinzipien auf die Softwareentwicklung an, die den gesamten Lebenszyklus der Softwareerstellung umfassen, von der Definition der Anforderungen und dem Entwurf der Architektur bis hin zu Codierung, Testung, Bereitstellung, Überwachung und laufender Wartung.\n\nVorlesungseinheiten:\n\nL01 Einführung: Diese Vorlesung gibt einen grundlegenden Überblick über Software-Engineering speziell für Cloud-Umgebungen. Sie behandelt grundlegende Konzepte wie Softwareentwicklungsmethoden, Systemmodellierungstechniken, und Abstraktionsprinzipien. Darüber hinaus werden die Grundlagen des Cloud Computing, einschließlich Cloud-Infrastruktur und Dienstmodelle behandelt.\n\nL02 Systementwurfsanforderungen und Softwarearchitekturen: Diese Lerneinheit konzentriert sich auf die kritischen Aspekte des Requirements Engineering und unterscheidet zwischen funktionalen und nicht-funktionalen Anforderungen. Anschließend werden verschiedene Softwarearchitekturen wie Client-Server-, Schichten-, monolithische und Microservice-Architekturen untersucht, wobei deren Kommunikationsmechanismen und Bereitstellungsüberlegungen detailliert erläutert werden.\n\nL03 Systementwurf I: Modularität und Datenmanagement: Diese Vorlesung befasst sich mit der Komplexität des Systementwurfs, wobei der Schwerpunkt auf Modularität, Datenmanagement und Entwurfsmustern liegt. Außerdem werden verschiedene Lösungen für die Datenverwaltung untersucht.\n\nL04 Systementwurf II: Leistung, Gleichzeitigkeit und Skalierbarkeit: Diese Einheit befasst sich mit Leistungsoptimierung, Gleichzeitigkeitsmanagement und Skalierbarkeitsstrategien.\n\nL05 Systementwurf III: Sicherheit, Zuverlässigkeit und Verfügbarkeit: Diese Vorlesung konzentriert sich auf den Entwurf sicherer, zuverlässiger und hochverfügbarer Systeme.\n\nL06 Software-Tests: In dieser Einheit werden verschiedene Softwaretestmethoden zur Gewährleistung von Softwarequalität und -zuverlässigkeit untersucht. Sie deckt Unit-Tests, Integrationstests, automatisierte groß angelegte Testtechniken, Mock-Tests und Testverdopplungen ab.\n\nL07 Programmanalyse: Statische und dynamische Analyse: Diese Vorlesung behandelt Techniken der Programmanalyse, einschließlich statischer und dynamischer Analyse.\n\nL08 Softwaremanagement, Build-Systeme und DevOps: Diese Einheit deckt die wichtigsten Praktiken des Softwaremanagements ab, einschließlich Quellcodeverwaltung, Build-Systeme, Release-Management und kontinuierliche Integration/Lieferung/Deployment (CI/CD) sowie kontinuierliche Tests.\n\nL09 Software-Bereitstellung und -Überwachung: Diese Vorlesung befasst sich mit Cloud-Bereitstellungsmodellen, containerbasierter Entwicklung und Orchestrierung sowie der Überwachung von Cloud-Systemen.\n\nL10 Softwarequalität und Projektmanagement: Diese Lerneinheit umfasst Techniken der Software-Qualitätssicherung (Code-Reviews, Refactoring, formale Verifizierung) und Grundsätze des Projektmanagements."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=454045&pOrgNr=1",
        "name": "Einführung in die Theoretische Informatik",
        "kennung": "IN0011",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die wesentlichen Konzepte der Theoretischen Informatik auf einem grundlegenden, aber wissenschaftlichen Niveau. Teilnehmer wissen, was reguläre Ausdrücke, kontextfreie Grammatiken, die Chomsky Hierarchy, endliche Automaten und Turingmaschinen sind. Sie können gegebene formale Sprachen mit dem passenden Beschreibungsmittel definieren und sie können zeigen, falls sich eine gegebene Sprache nicht mit einem bestimmten Beschreibungsmittel definieren lässt. Sie können beweisen, dass bestimmte Beschreibungsmittel äquivalent sind und können verschiedene Beschreibungen algorithmisch ineinander transformieren. Sie können die grundlegenden Konzepte der Komplexitätstheorie erklären und können Entscheidungsprobleme unter gegebenen Komplexitätsschranken algorithmisch aufeinander reduzieren.",
        "inhalt": "Formale Sprachen, Grammatiken, Chomsky Hierarchy.\n\nReguläre Sprachen: DFA, NFA mit und ohne ε-Transitionen, reguläre Ausdrücke und Übersetzungen dazwischen; Systeme von Gleichungen zwischen Sprachen; Abschluss unter Booleschen Operationen; Ardens Lemma; Pumping Lemma; Entscheidungsprobleme; Minimierung; Satz von Myhill-Nerode.\n\nCFLs: PDAs und Übersetzungen zw. CFGs und PDAs; Beweis, dass DPDAs schwächer als PDAs sind; Abschlusseigenschaften; CYK Algorithmus; Pumping Lemma; Chomsky und Greibach Normalformen.\n\nKontextsensitive Sprachen und LBAs.\n\nBerechenbarkeit: Berechenbarkeit, Entscheidbarkeit, Halb-Entscheidbarkeit, rekursive Aufzählbarkeit und ihre Beziehungen; Existenz nichtberechenbarer Funktionen; Turing Maschinen, akzeptierte Sprachen und Typ-0 Sprachen; Äquivalenz von Turing Maschinen, While-Programmen und Goto-Programmen; Primitive und µ-rekursive Funktionen; Reduktionen zwischen Problemen; das Halteproblem; universelle Turing Maschinen; Satz von Rice und Satz von Rice-Shapiro; Unentscheidbarkeit des Postschen Korrespondenzproblems und wichtiger Probleme auf CFGs.\n\nKomplexitätstheorie: Zeit und Platzkomplexitätsklassen; Polynomialzeitreduktionen; die Klassen P und NP; NP-Vollständigkeit; Satz von Cook; wichtige NP-vollständige Probleme und Reduktionen zwischen ihnen.\n\nAlle Beweise werden behandelt."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=455450&pOrgNr=1",
        "name": "Einführung in die Wirtschaftsinformatik",
        "kennung": "IN0021",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage wichtige Paradigmen und Teilgebiete der Wirtschaftsinformatik zu verstehen, Wirtschaftsinformatik neben anderen Disziplinen einzuordnen und von der Informatik und Betriebswirtschaftslehre abzugrenzen. Zusätzlich verstehen die Studierenden Informationssysteme und deren Nutzen in verschiedenen Branchen. Außerdem sind sie in der Lage Modelle (insb. Prozess- und Datenmodelle) als Grundlage für die Gestaltung von Informationssystemen zu modellieren. Studierende werden in die Lage versetzt, prozessorientierte Anwendungen entwickeln können. Hierbei verstehen Studierende den gesamten Prozess von der Modellierung einer solchen Anwendung über deren Verifikation und Analyse bis hin zur Implementierung in einer Process Engine. Die Studierenden erkennen die Bedeutung von prozessorientierten Anwendungen anhand von Realweltprozessen in Produktion und Pflege/Health Care und können dadurch auch den Beitrag der Wirtschaftsinformatik für die digitale Transformation in Unternehmen einordnen. Schlussendlich verstehen die Studierenden Grundlagen der Informationssicherheit als wichtigen Aspekt der Wirtschaftsinformatik.",
        "inhalt": "‒ Grundlegende Begriffe der Wirtschaftsinformatik\n‒ Informationssysteme in Unternehmen, Modellierung betrieblicher Informationssysteme\n‒ Modellierung von Geschäftsprozessen und Daten (ERM, BPMN, EPK)\n‒ Entwicklung von prozessorientierten Anwendungen\n‒ Einsatz prozessorientierter Anwendungen in der Praxis am Beispiel von Produktion und Pflege/Health Care\n‒ Beitrag der Wirtschaftsinformatik zur digitalen Transformation\n‒ Informationssicherheit"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2863063&pOrgNr=1",
        "name": "Einführung in die wissenschaftliche Programmierung",
        "kennung": "IN8008",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage, sich an grundlegende Techniken des Rechnereinsatzes bei der Bearbeitung naturwissenschaftlich-technischer Fragestellungen zu erinnern und diese zu beschreiben.\nSie sind weiterhin in der Lage, Beispiele für Algorithmen aus dem Bereich des wissenschaftlichen Rechnens zu verstehen, sie in einer objektorientierten Programmiersprache zu implementieren sowie zur Lösung von Beispielproblemen einzusetzen und zu beurteilen (insbesondere hinsichtlich des Bedarfs an Rechenzeit und Speicherplatz, ggf. im Verhältnis zur erzielten Genauigkeit).",
        "inhalt": "Elemente der Programmierung (elementare und zusammengesetzte Datentypen, Ausdrücke und Anweisungen, Techniken zur Strukturierung von Programmen, Objektorientierung) Werkzeuge des wissenschaftlichen Rechnens, insbesondere zur Visualisierung der Berechnungsergebnisse.\nBeispiele, die einerseits den Einsatz dieser Techniken demonstrieren und gleichzeitig exemplarisch typische\nVerfahren aus den folgenden Themenbereichen vorstellen sind: Gleichungslöser, numerische Quadratur sowie gewöhnliche und partielle Differentialgleichungen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1816255&pOrgNr=1",
        "name": "Einführung in Quantum Computing",
        "kennung": "IN2381",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul beherrschen die Studierenden die Grundlagen und den mathematischen Formalismus von Quantum Computing. Sie sind in der Lage, Quanten-Algorithmen, wie z.B. Grover-Suche, zu analysieren und Quantenschaltungen für einfache Algorithmen zu entwickeln. Die Studierenden können entsprechende Software-Tools (wie Qiskit oder Cirq) anwenden, sowie mögliche Einsatzgebieten von (zukünftigen) Quantencomputern einschätzen.",
        "inhalt": "- Mathematischer Formalismus und Grundlagen der Quantenmechanik\n- Quantenschaltungen\n- Quantenteleportation\n- Bellsche Ungleichung\n- Grundlegende Quantenalgorithmen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261475&pOrgNr=1",
        "name": "Einsatz und Realisierung von Datenbanksystemen",
        "kennung": "IN2031",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer beherrschen die Komponenten moderner Datenbanksysteme sowie die unterschiedlichen Einsatzgebiete moderner Datenbanksysteme im Detail, sie können die zugrundeliegenden Algorithmen und Datenstrukturen implementieren und kritisch einschätzen sowie bei realistischen Szenarien konkrete Einsatzmöglichkeiten skizzieren und kritisch bewerten. Sie sind in der Lage diese für unterschiedliche Randbedingungen weiter zu entwickeln.",
        "inhalt": "Implementierung von Datenbanksystemen\n- Transaktionsverwaltung\n- Fehlerbehandlung (Recovery)\n- Mehrbenutzersynchronisation\n- Physische Datenorganisation\n- Anfragebearbeitung (logische und physische Optimierung von Anfragen, Kostenmodelle)\n\nEinsatz von Datenbanksystemen\n- Verteilte Datenbanken\n- Betriebliche Anwendungen (OLTP, OLAP)\n- XML und Datenbanksysteme\n- Leistungsbewertung\n- Web Services"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3475235&pOrgNr=1",
        "name": "Engineering Resilient Cognitive Systems",
        "kennung": "CIT4230005",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "By the end of the module, the students will be able to describe the basic concepts of resilience for cyber-physical cognitive systems and to discuss the underlying concepts of safety & reliability engineering as well as of self-adaptive software systems. In particular, the students will be able to model resilient architectures by applying dedicated engineering methodologies and using architectural patterns and tactics.",
        "inhalt": "Most cyber-physical cognitive systems such as automated vehicles have to work in highly dynamic, uncertain contexts. In consequence, it is hardly possible to engineer a safe and reliable system a-priori at design time. At the same time, safety and reliability are inevitable quality attributes. Therefore, cognitive systems must be resilient, i.e. they must be enabled to be aware of their context and their own state and to adapt themselves dynamically at runtime to their context in order to optimize their utility whilst preserving safety. Thus, resilience will play an essential for future cognitive systems.\nThe goal of this module is to understand the basic of concepts of resilient architectures for cyber-physical cognitive systems and to partly apply them to small example problems. Particularly this includes:\n\n1. Resilience: Terminology, fundamental concepts, conceptual framework\n2. Safety Architectures: Introduction to terminology and fundamental concepts of safety and reliability of software-intensive systems; architectural patterns and tactics for safety-critical systems\n3. Self-adaptive Systems: Terminology and fundamental concepts, conceptual frameworks, self-adaptive architectures, models at runtime\n4. Adaptive Resilience Management: resilience-related context awareness, dynamic risk/utility assessment, adaptation planning\n5. Learning methods: training context awareness and resilience tactics for flexible, yet safe adaptations to known and unknown contexts"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460623&pOrgNr=1",
        "name": "Enterprise Information Systems",
        "kennung": "IN9012",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul ist der Studierende in der Lage, den technischen Betrieb und die Anwendung von Unternehmenssoftware sowie die Integration grundlegender Geschäftsprozesse aus den Bereichen Materialwirtschaft, Vertrieb und Finanzwesen zu verstehen. Darüber hinaus ist der Studierende in der Lage die vermittelten theoretischen Grundlagen unter Verwendung von Standardsoftwarelösungen (z.B. SAP ERP, SAP BW etc.) praktisch anzuwenden.",
        "inhalt": "- Managementorientierte Betrachtung von Unternehmenssoftware\n- Einführung von Unternehmenssoftware in Unternehmen\n- Aufbau der technischen Basis von SAP-Software\n- Betrieb/Hosting von Unternehmenssoftware\n- Praktische Arbeit mit SAP-Software (mit Übungen)\n- Einblick in weiterführende Themen: Entwicklung, Business Intelligence, Integration"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473891&pOrgNr=1",
        "name": "Entrepreneurship for Small Software-oriented Enterprises",
        "kennung": "IN9006",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreichem Abschluss dieses Moduls sind die Studierenden mit dem Basiswissen für die erfolgreiche Gründung und das langfristige Management eines kleinen softwareorientierten Unternehmens vertraut.\nInsbesondere sind die Studierenden in der Lage\n- das Business Model Canvas zu nutzen, um ihr angestrebtes Geschäftsmodell zu konzipieren und zu detaillieren,\n- eine SWOT-Analyse ihres Geschäftsmodells durchzuführen,\n- einen Drei-Jahres-Finanzplan für ihr Startup-Unternehmen zu entwickeln,\n- ihre Start-up-Idee selbstbewusst und gründlich zu präsentieren, gestützt auf das Wissen und das Feedback, das sie erhalten haben.",
        "inhalt": "Inhalte umfassen:\n- Techniken zur Marktanalyse\n- Vorgehen bei der Finanzplanung\n- Methoden zur Entwicklung eines Business Plans\n- Konzept der \"Unique Selling Proposition\""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=457042&pOrgNr=1",
        "name": "Entwicklungspraktikum Internetbasierte Geschäftssysteme",
        "kennung": "IN2131",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Teilnehmer in der Lage Architekturen und Techniken zum Entwurf und zur Implementierung internetbasierter Informationssysteme zu bewerten. Zudem können sie Grundlagen solcher Systeme unter Verwendung etablierter Standards und Werkzeuge selbstständig entwickeln.",
        "inhalt": "Java Programmierung ObjektorienMertes Design-Web Anwendungen & Java APIs- Lösung von OpMmierungsproblemen mit Gurobi"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2862515&pOrgNr=1",
        "name": "Entwicklungspraktikum Realisierung prozessorientierter Anwendungen",
        "kennung": "IN2130",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Modulteilnahme sind die Studierenden in der Lage:\n‒ Prozesslogik in Form von BPMN zu beschreiben.\n‒ Ausführbarkeit von Prozesslogik zu verifizieren.\n‒ Prozesslogik mit Hilfe einer Open Source Process Engine ausführbar zu machen.\n‒ Eine Einbindung von menschlichen und Computing Ressourcen praktisch umzusetzen.\n‒ Message Correlation Patterns für asynchrone Kommunikation mit/zwischen prozessgestützten Systemen praktisch anzuwenden.\n‒ BPMN-basierte Prozessmodell zu parsen und zu transformieren.\n‒ Granularitätsüberlegungen bei der Umsetzung von konkreten Szenarien, z.B. im Manufacturing Umfeld mit Sensoren, Werkzeugmaschinen und Robotern, selbstständig anzustellen und umzusetzen.\n‒ Ihr Entwicklungsprojekt in verschiedenen Meilensteinen gegliedert unterschiedlichen Stakeholdern zu präsentieren.",
        "inhalt": "Das Modul führt zunächst die Grundlagen der prozessorientierten Anwendungsentwicklung ein, insbesondere zum Entwurf, Verifikation, Implementierung und Ausführung von Prozessen. Weiterhin werden Realweltbeispiele aus verschiedenen Anwendungsdomänen gezeigt. Dieser motivierende Grundlagenteil wird dann im Projektteil von den Studierenden praktisch umgesetzt und vertieft und zwar durch Prozessmodellierung in BPMN, Programmierung von Web Services, Programmierung von\nStand-alone Tools zur Prozessverifikation und Prozesstransformation (z.B. auf Basis von Petrinetzen), Verwendung einer Process Engine (hauptsächlich (cpee.org), Verwendung von Standards wie OPC-UA, XES, und Techniken aus der XML-Familie. Programmiersprachen sind frei wählbar. Der Projektteil erweitert dabei die Grundlagen insbesondere auch in Richtung weiterführender Konzepte prozessorientierter Anwendungen, etwa Arbeitslistenkonzepte und in Richtung von Anforderungen aus Anwendungsdomänen, etwa die Anbindung von Cobots und Sensoren in der Produktion. Die Studierenden gewinnen somit theoretische Einblicke und vor allem praktische Erfahrung mit prozessorientiertem Entwurf und Entwicklung in eigenständiger Weise. Dies beinhaltet auch die Präsentation der Projektergebnisse."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=457038&pOrgNr=1",
        "name": "Entwicklungspraktikum Software Engineering für betriebliche Informationssysteme",
        "kennung": "IN2129",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden sind nach der Teilnahme an dem Modul in der Lage, im Team Methoden der objektorientierten Analyse und des objektorientierten Entwurfs in der Entwicklung einer Web-Anwendung anzuwenden. Studierende besitzen nach der Teilnahme die notwendige Kompetenz Web-Anwendungen mit aktuellen Programmiersprachen und Werkzeugen (Bibliotheken, Web-Frameworks und Datenbanken) kompetent umsetzen. Zudem sind die Studierenden in der Lage die Konzepte, Techniken und Werkzeuge zur kundenorientierten Entwicklung innovativer Web-Anwendungen zu bewerten und können diese bei der Erstellung eines entsprechenden Systems anwenden. Darüber hinaus verfügen die Studierenden nach der Teilnahme an dem Modul die Fähigkeit, eine Systemrealisierung im Team durchzuführen und die Ergebnisse zu präsentieren.",
        "inhalt": "Die Studenten realisieren in kleinen Gruppen eine innovative Web-Anwendung mittlerer Komplexität in JavaScript, CSS, HTML, o.ä. Dabei benutzen sie für Web-Anwendungen zweckhafte Bibliotheken und Frameworks zur Web-Visualisierung, Realisierung der Anwendungslogik und persistenten Datenhaltung.\nEs werden die Phasen Anforderungsanalyse und Entwurf mit Hilfe von UML durchlaufen. Die Studenten sind für das Projekt- und Qualitätsmanagement selbst verantwortlich. Die regelmäßige Präsentation des Projektfortschritts ist Bestandteil des Projekts."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=457036&pOrgNr=1",
        "name": "Entwicklungspraktikum Unternehmenssoftware",
        "kennung": "IN2128",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Modulteilnahme sind die Teilnehmenden in der Lage, die Architektur moderner Unternehmenssoftware zu verstehen und eigene Erweiterungen zu modellieren und zu programmieren.\nSie können technologische und wirtschaftliche Anforderungen hinsichtlich ihrer Umsetzbarkeit in Unternehmenssoftware bewerten sowie eigene Lösungsvorschläge erarbeiten.\nZudem können Sie aktuelle Entwicklungswerkzeuge für den Entwurf, die Implementierung und die Analyse von eigenen Applikationen bedienen.\nDie Teilnehmden sind in der Lage, die Bearbeitung einer komplexen Aufgabenstellung im Team durchzuführen.",
        "inhalt": "Das Modul besteht aus einem theoretischen und einem praktischen Teil. Im theoretischen Teil werden Konzepte und domänen-spezifische Besonderheiten der Unternehmensanwendungen erläutert und gängige Entwicklungswerkzeuge aus der Informatik vorgestellt. Dabei werden Architekturen, die zugrundeliegenden Geschäftsprozesse sowie methodische Grundlagen erläutert. Zudem werden im praktischen Teil die einzelnen Lerninhalte durch Programmierübungen und weitere eigenständige Ausarbeitungen vertieft. Hierbei stehen das Umsetzen der vermittelten Konzepte auf andere Aufgabenstellungen sowie die selbstständige Aneignung zusätzlicher Konzepte zur Lösung der Aufgabenstellung im Mittelpunkt. Dies beinhaltet u.a. das Identifizieren von Problemen, das Erarbeiten von Anforderungen, sowie die Implementierung und Evaluierung eigener Lösungen. Die Studenten trainieren das eigenständige Arbeiten und die kritische Reflexion eigener Ergebnisse, sowie die Präsentation der Ideen, Konzepte und Ergebnisse in verschiedenen praxisnahen Formen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=819263&pOrgNr=1",
        "name": "Event Processing",
        "kennung": "IN2288",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Processing paradigms. Apply event processing formalisms, patterns and languages to use cases. Analyze capabilities of emerging standards and products on event processing. Know the background and theory of event processing.",
        "inhalt": "Introduction to Event Processing (EP) applications. After the module the student knows the common building blocks EP systems and can apply them. The outline of the module is as following. First, a introduction in EP is given, What EP support is required? What are the characteristics and requirements of EP? Then more theoretical background is given: Event processing terminology, theories of events & philosophical perspectives. Throughout the module multiple distributed, local, and event processing languages are presented which are then used in the course project. Additional in the lecture the following things are presented and discussed: event processing patterns, event generation, event detection, event filtering and event correlation algorithms. To model event-based systems formalisms are presented, e.g., event calculus, event algebra or Petrie nets. Additionally covered are event processing paradigms, models for event stream processing, event processing languages, Publish/Subscribe, Tuple spaces, Rule-based event processing, Trigger processing, Continuous query processing. Additional keywords which are presented are EP Languages and data models, window semantics, matching, filtering, Rete matching, staged-event driven architecture and emerging standards & products as case studies. The content is supported by examples and case studies. Also the content is practically used within the course project."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1855630&pOrgNr=1",
        "name": "Fortgeschrittene Datenverarbeitungs- und Visualisierungstechniken",
        "kennung": "IN2379",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach dem erfolgreichen Absolvieren des Moduls sind die Studenten in der Lage:\n- eine Pipeline für die Datenextraktion und -integration aus Biologischen Ressourcen zu erstellen\n- Techniken anzuwenden, um die Daten effizient zu verarbeiten\n- die Daten zu analysieren und entsprechende Visualisierungen ihrer Analysen zu erzeugen\n- Visualisierungstechniken anzuwenden und zu evaluieren\n- angemessene NoSQL Lösungen im Hinblick auf ihre Daten auszuwählen",
        "inhalt": "- Vektorisierte Operationen\n+ Einführung in Python\n+ Vektorisierte Operationen\n+ Effekt Vektorisierung auf Berechnungen\n- Datenbanke & Visualisierung\n+ Biologische Datenbanken\n+ Integration von biologischen Daten\n+ Verarbeitung von biologischen Daten\n+ Visuelle Datenexploration\n+ Vorhersage basierend auf biologischen Daten\n+ Jenseits von SQL: Dokumenten-orientierte Datenbanke\n+ Jenseits von SQL: Graphdatenbanken\n+ Verteilte Datenverarbeitung\n- Kommunikation der Ergebnisse\n+ Laufzeitanalyse des Codes und Optimierung von Engpässen\n+ WWW: Bereitstellung eines online-Dienstes\n+ Interaktive Visualisierungstechniken"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2981021&pOrgNr=1",
        "name": "Fortgeschrittene Konzepte des Quantum Computing",
        "kennung": "IN2400",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul beherrschen die Studierenden fortgeschrittene Konzepte und Algorithmen im Bereich Quantum Computing, insbesondere die Quanten-Fouriertransformation, Quantenoperationen und Quanten-Fehlerkorrektur. Sie können Quanten-Fouriertransformation von anderen Algorithmen differenzieren, verstehen deren Relevanz für Ganzzahlfaktorisierung, und können Quanten-Fouriertransformation in neuen Szenarien anwenden. Zudem verstehen die Studierenden den mathematischen Formalismus von Quanten-Fehlerkorrektur und verwandten Konzepten wie den Stabilizer-Formalismus.",
        "inhalt": "- Quanten-Fouriertransformation\n- Shor-Algorithmus zur Ganzzahl-Faktorisierung\n- Quantenoperationen\n- Quanten-Fehlerkorrektur"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=665774&pOrgNr=1",
        "name": "Fortgeschrittene Konzepte verteilter Datenbanken - Programming Database Web Applications",
        "kennung": "IN2140",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verfügen Studierende über die notwendige Kompetenz, Webapplikationen eigenständig zu konzipieren, zu planen und umzusetzen. Des Weiteren sind sie nach der Teilnahme an dem Modul in der Lage Geschäftsmodelle im Web zu identifizieren. Sie kennen die drei Schichten einer Webapplikation (Client, Server, Datenbank) sowie die grundsätzliche Funktionsweise jeder einzelnen Schicht. Sie verfügen über eine tiefe und detaillierte Wissensbasis, welche ihnen erlaubt in anderen Konzepten dieselben Technologien zu identifizieren und zu erklären.\nDarüber hinaus sind die Studierenden in der Lage, nutzerzentrierte iterative Vorgehensmodelle zu erklären, zu bewerten und im Team anzuwenden.",
        "inhalt": "Für eine Webapplikation läuft die Benutzerschnittstelle auf einem Web Browser und Web Services werden für den Ablauf benötigt. Webapplikationen haben gewöhnlich drei Schichten: Client, Server und Datenbank. Dieser Kurs behandelt Programmiertechnologien für Webapplikationen in allen drei Schichten.\n- Client: JavaScript, VBScript, Flash, OpenLaszlo\n- Server: Java (Struts, Spring MVC, JSF), Ruby, PHP, Python, Perl\n- Datenbank: O/R mapping, SQL, XQuery\nDiese Technologien sind häufig entweder opportunistisch und unterstützen die schnelle Entwicklung und häufige Freigabe von neuen Versionen oder sie sind systematisch und unterstützen ein sorgfältiges Design und längere\nFreigabezyklen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458189&pOrgNr=1",
        "name": "Fortgeschrittene Netzwerk- und Graph-Algorithmen",
        "kennung": "IN2158",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer des Moduls sind in der Lage, spezialisierte Netzwerkprobleme bezüglich Ihrer Komplexität zu bewerten und durch Anwendung fortgeschrittener Algorithmen auf Graphen zu lösen. Dazu gehört insbesondere auch die Analyse und Bewertung typischer Eigenschaften wie Robustheit bzw. Fehleranfälligkeit komplexer Netzwerke. Weiterhin sind die Teilnehmer in die Lage, Algorithmen zur Optimierung verschiedener Netzwerkparameter zu entwickeln.",
        "inhalt": "Das Modul bildet eine Vertiefung der aus den Vorlesungen \"Grundlagen: Algorithmen und Datenstrukturen\" und \"Effiziente Algorithmen und Datenstrukturen 1/2\" bekannten Graphenalgorithmen in Hinsicht auf neue algorithmische Methoden, Analyse und Anwendungsgebiete. Schwerpunkte des Moduls ist die Entwicklung von Zentralitätsindizes und zugehöriger Algorithmen sowie die Untersuchung der Dichte in (Teil-)Graphen. Es werden fortgeschrittene Algorithmen für Zusammenhangsprobleme und für das Assignment-Problem basierend auf der Ungarischen Methode entwickelt. Weitere optionale Themengebiete des Moduls sind die Graphfärbung, das Clustering, die Netzwerk-Statistik, der Netzwerk-Vergleich, algebraische Methoden, die spektrale Analyse sowie Robustheitsuntersuchungen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261731&pOrgNr=1",
        "name": "Fortgeschrittene Themen des Softwaretests",
        "kennung": "IN2084",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, die verschiedenen Aktivitäten und Artefakte des Softwaretests zu benennen und bzgl. ihrer Stärken und Schwächen zu bewerten. Sie können in gegebenen Kontexten für Systeme Testfälle konzeptuell und beispielhaft auch konkret konstruieren und analysieren und begründen, warum welche Testfälle sinnvoll sind. Sie können verschiedene testbezogene Managemententscheidungen bzgl. Prozess und Werkzeugunterstützung nachvollziehen, begründen und kritisieren.",
        "inhalt": "Grundlagen\n- Einführung\n- Begriffe und Motivation\n- Basis-Testprozess\n- Priorisierung von Tests\n- Psychologie des Testens\n\nTesten im Softwarelebenszyklus\n- Wasserfall- / V- / W- / Inkrementelles- / Spiral-Modell\n- Modul- / Komponententest\n- Integrationstest\n- Systemtest\n- Abnahmetest\n- Wartung von Tests\n- Testen von Prototypen\n\nStatisches Testen\n- Manuelle Prüfmethoden\n- Statische Analyse\n\nDynamisches Testen\n- Black-Box-Verfahren\n- White-Box-Verfahren\n- Intuitive Testfallermittelung\n\nTestmanagement\n- Risikomanagement\n- Wirtschaftlichkeit von Tests\n- Wiederverwendung\n- Fehlermanagement\n- Testplanung / -überwachung / -steuerung\n- Metriken\n- Organisation von Testteams / Qualifikationen\n- Anforderungen an das Konfigurationsmanagement\n- Normen und Standards\n\nTestwerkzeuge / Testautomatisierung\n- Typen\n- Auswahl\n- Einführung der Werkzeuge\n- \"Home built\" vs. Commercial\n- Vorstellung von Werkzeugen\n\nDieses Modul kann auch in Kombination mit dem Modul IN2114 \"Automotive Software - Methoden und Technologien\" absolviert werden."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1231549&pOrgNr=1",
        "name": "Foundations in Data Engineering",
        "kennung": "IN2326",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden können die wesentlichen Konzepte von verteilter Datenhaltung anwenden und charakterisieren. Sie kennen Analysealgorithmen auf sehr großen, verteilten Datenmengen und können sie systematisch und qualifiziert nutzen, implementieren und bewerten. Sie können die Techniken zur Optimierung der Analyseprozesse einschätzen und kombinieren und sind in der Lage, diese für unterschiedliche Randbedingungen (z.B. Datencharakteristik, Systemarchitektur) weiter zu entwickeln. Sie wissen um die gesellschaftliche Bedeutung der erlernten Techniken.",
        "inhalt": "Datenorganisation, effiziente Analyse großer Datenmengen, verteilte Datenhaltung (abhängig von der Systemarchitektur, z.B. Mehrkernsysteme, Multiprozessorsysteme, Cluster), verteilte und parallele Datenanalyse, Statistik-gestützte Optimierung von Analyseprozessen (z.B. durch Dimensionsreduktion), map/reduce Techniken und ihre Verallgemeinerung zur verteilten Anfrageverarbeitung, Anwendungen in Systemen wie Hadoop und in NoSQL Systemen, gesellschaftliche Auswirkungen, Bedeutung von Datenschutz"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2674325&pOrgNr=1",
        "name": "Foundations of Program and System Development",
        "kennung": "IN2078",
        "organisation": "Department Computer Science",
        "anmerkung": "Anpassungen laut Prüfungsausschuß Beschluß vom 17.07.2020",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, algebraische und axiomatische Spezifikationen einfacher IT-Systeme zu entwickeln. Sie können Spezifikationen durch schrittweise Verfeinerung ableiten. Sie verstehen die mathematischen Grundlagen abstrakter Algebra sowie der Fixpunkttheorie und können Konstruktionsprinzipien formaler Spezifikationen rechtfertigen. Sie verstehen die formalen Grundlagen objektorientierter, funktionaler und imperativer Programmierung und können klassische Korrektheitskalküle anwenden.",
        "inhalt": "System- und Programmentwicklung umfasst die Gesamtheit aller Tätigkeiten, die bei der Erstellung von Software bzw. Programmen als in einer formalen Sprache abgefasste Beschreibungen von Daten und Algorithmen zur Lösung einer Aufgabe im Sinn einer Anwendung anfallen. Eine der großen Schwierigkeiten bei der Programmentwicklung besteht in der unmissverständlichen Beschreibung und Dokumentation der einem Programm zugrunde liegenden Modelle, Theorien, Strukturen, Entscheidungen und der verwendeten Ideen und zugehörigen Beschreibungsmittel. Die Vorlesung präsentiert die wissenschaftlichen Grundlagen, und damit die logische und mathematische Fundierung der dabei auftretenden Konzepte, Modelle und Methoden. Neben diesen Modellen und Beschreibungsmitteln ist für die systematische Programmentwicklung ein methodischer Rahmen erforderlich: Entwicklungsregeln zur Durchführung von Entwicklungsschritten sowie ein Konzept, das die Schritte bei einer Programmentwicklung in eine sinnvolle Reihenfolge bringt. In der Vorlesung werden einzelne Entwicklungsschritte behandelt und der Schwerpunkt auf die methodischen und beschreibungstechnischen Grundlagen des Software Engineerings gelegt. Es werden folgende Schwerpunkte für die Modellbildung, Spezifikation, Verfeinerung und Implementierung behandelt:\n- Datenmodellierung: Abstrakte Beschreibung von Daten- und Rechenstrukturen\n- Signaturen, Algebren, Modelle und Beschreibungsmittel\n- Axiomatische Beschreibungen\n- Datentypdeklarationen und Objektmodell\n- Wechsel der Datenstruktur; schrittweise Entwicklung von Daten\n- Modellierung von Rechenvorschriften und Algorithmen:\n- funktionale Programmierung: Spezifikation, Verfeinerung und Verifikation\n- Zuweisungsorientierte Programmierung: Spezifikation, Zusicherungen, Hoare-Regeln\n- Prädikative Spezifikation, schrittweise Verfeinerung, Verifikation\n- Geflechtstrukturen\n- Spezifikation sequentieller OO-Programme"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1338241&pOrgNr=1",
        "name": "Functional Data Structures",
        "kennung": "IN2347",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After the successful completion of this module, students will have an\nin-depth understanding of a range of functional data structures and are able to prove properties about them with the help of a computer-based proof assistant. Students will be able to\n- select suitable implementations of functional data structures for common programming tasks,\n- design and implement new functional data structures that are based on the principles covered in the module,\n- prove the correctness and complexity of the data structures on paper and with the help of a proof assistant.",
        "inhalt": "The module introduces students to the design and analysis of data structures for functional programming languages. It assumes that the students are familiar with functional programming and with running time analysis of algorithms. The module covers a range of functional data structures with an emphasis on their precise analysis. Proofs of both functional correctness and complexity will be a core part of the module Proofs are carried out with the help of a computer-based proof assistant. An introduction to the proof assistant is part of the module.\n\nA selection of the following non-exhaustive list of data structures and\nalgorithms will be covered:\n- Sorting\n- Search trees: Unbalanced trees, AVL trees, Red-Black trees, 2-3 trees, Weight balanced trees, Splay trees, Tries\n- Other trees: Quad trees, Finger trees\n- Huffman coding\n- Priority queues: Braun trees, Leftist heaps, Skew binomial heaps, Skew heaps, Pairing heaps, Fibonacci heaps\n- Dijkstra's algorithm\n- String matching"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1458914&pOrgNr=1",
        "name": "Funktionale Programmierung und Verifikation",
        "kennung": "IN0003",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul verstehen die Studierenden die wesentlichen Konzepte einer funktionalen Programmiersprache. Sie können in einer funktionalen Programmiersprache überschaubare algorithmische Probleme lösen. Deshalb sind sie in der Lage, sich andere funktionale Programmiersprachen eigenständig anzueignen. Sie kennen weiterhin die wesentlichen Techniken zur Verifizierung sowohl imperativer wie funktionaler Programme und können diese auf einfache Programme anwenden.",
        "inhalt": "In dem Modul IN0003 werden beispielhaft folgende Inhalte behandelt:\n- Korrektheit imperativer Programme\n++ Verifikation nach Floyd oder Hoare\n++ Terminierung\n++ Prozeduren\n- Grundbegriffe funktionalen Programmierens\n++ Werte, Variablen, Funktionen\n++ Datenstrukturen, Pattern Matching\n++ Höhere Funktionen\n++ Polymorphe Typen\n++ Programmieren im Großen: Strukturen und Funktoren\n++ Korrektheit funktionaler Programme\n+++ Semantik funktionaler Programme\n+++ Verifikation funktionaler Programme"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=674883&pOrgNr=1",
        "name": "Funktionale Sicherheit",
        "kennung": "IN2247",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, Gefahren und Risiken hinsichtlich der funktionalen Sicherheit im KFZ zu analysieren. Außerdem können sie Methoden und Konzepte der Modellbasierten Funktionsentwicklung und -absicherung anwenden. Des Weiteren können die Studierenden Entwicklungswerkzeuge klassifizieren und qualifizieren.",
        "inhalt": "Die Gewährleistung der funktionalen Sicherheit ist in den letzten Jahren zu einem wichtigen Designziel bei der Entwicklung automotiver Systeme geworden. Die 2011 verabschiedete Sicherheitsnorm ISO 26262 „Road vehicles – Functional safety“ beschreibt einen Prozessrahmen, ein Vorgehensmodell (einschl. Aktivitäten und Arbeitsprodukten) sowie anzuwendende Methoden für die Entwicklung sicherheitsrelevanter elektrischer/elektronischer Systeme (E/E Systeme) in Kraftfahrzeugen. Ihre Umsetzung soll die funktionale Sicherheit von E/E Systemen in Personenkraftwagen sicherstellen.\n\nIn der Vorlesung wird auf grundlegende Konzepte und Bestandteile der ISO 26262 eingegangen. Schwerpunkte dabei sind die Gefahren- und Riskioanalyse, die Anforderungen der Norm an die Softwareentwicklung und die Qualifizierung von Entwicklungswerkzeugen. Die Umsetzung der Konzepte wir am Beispiel der Modell-basierten Entwicklung von Steuergerätesoftware illustriert.\n\nIn der Übung werden u.a. folgende Themen vertieft:\n\n- Modell-basierte Funktionsentwicklung und –absicherung\n- Gefahren- und Riskoanalysen\n- Sicherheitsanalysen\n- Referenzprozesse für die Entwicklung von Funktionssoftware\n- Gap-Analyse eines Beispielprozesses\n- Klassifizierung und Qualifizierung von Entwicklungswerkzeugen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2636231&pOrgNr=1",
        "name": "Funktions- und Informationssicherheit",
        "kennung": "IN2385",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "The students understand fundamental concepts and approaches at implementing and arguing about safety and security in the CPS domain. They know basic forms of structured reasoning in this domain and understand commonalities and differences between safety and security arguments and their completeness. They are capable of analyzing abstract CPS w.r.t. safety and security.",
        "inhalt": "Traditionally, cyber-physical systems are developed with a strong focus on functional safety requirements. Because of ubiquitous connectivity, information security concerns have become increasingly important. In this module, we study differences and similarities between functional safety and information security in terms of concepts, methods, and standards.\nThe goal of this module is to understand the commonalities between methods for assuring safety and security, and to be able to apply them to small example problems.\n\n1. Terminology and fundamental concepts\n2. Functional Safety and safety of the intended functionality: Analysis (HARA, HAZOP, FMEA, FTA; coverage) and construction (fail safe/operational; redundancy; diversity). Safety Cases. Standards ISO26262 and 21448.\n3. Information Security: Analysis (attacker models, STRIDE, TARA) and construction (architecture, mechanisms, security-by-design). Connection of CPS to the cloud.\n4. Organizational approaches: ISO 21434 („Road vehicles – Cybersecurity engineering); Secure Development Lifecycle\n5. Certification\n6. Safety and Security: Commonalities and differences"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=708343&pOrgNr=1",
        "name": "Game Physics",
        "kennung": "IN0037",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreichem Absolvieren des Moduls verfügen die Teilnehmer über einführende Kenntnisse in der physikalischen Simulation realer Phänomene und Effekte, die in Computerspielen immer häufiger zum Einsatz kommen. Sie kennen zahlreiche physikalische Modelle zur Beschreibung realer Phänomene, können sie bewerten und sind in der Lage, ein geeignetes Modell für die algorithmische Umsetzung auszuwählen, und die notwendigen Berechnungen durchzuführen. Sie beherrschen die algorithmische Beschreibung der Lösungsmethoden, mit dem Ziel der Integration der Methoden in Echtzeitsysteme. Ein weiteres angestrebtes Lernergebnis ist die Fähigkeit Simulationsalgorithmen und Integrationstechniken mit C++ zu implementieren.",
        "inhalt": "Grundlegende Konzepte und Methoden der Bereiche: Grundlagen der Animation, Animationstechniken, Technische Mechanik (Kinematik, Dynamik, Kontaktmechanik), Starrkörpersimulation, Methoden der Kollisionsbehandlung, Theorie der elastischen Körper-Fluidsimulation, Prinzipien der numerischen Simulation, und Partikelsysteme."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3555002&pOrgNr=1",
        "name": "Games mit Bewegung - Dein Körper als 3D Nutzerinterface",
        "kennung": "CIT3220000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach Abschluss dieses Moduls sind Studierende in der Lage, eine Auswahl aktuell am Markt verfügbarer neuartiger Interaktionsgeräte zum Motion Capturing in interaktiven Anwendungen einzusetzen.\nDesgleichen können sie einfache, animierte Charaktere\nimplementieren. Sie kennen Softwaresysteme zur Interpretation von Bewegungsdaten, sowie Komponenten einer Pipeline zum Anlernen ausgewählter Gesten. Durch den praktischen Umgang mit diesen Systemen können sie zwischen den Schwierigkeitsgraden ausgesuchter Ideen für interaktive Anwendungen differenzieren. Sowie diese mit verfügbaren Interaktionsgeräte und Gesteninterpretationssoftware umsetzen. Sie können grundlegende Probleme bei 3D Nutzerinteraktionen einordnen und in Verbindung mit den diskutierten Techniken deren Relevanz ableiten und implementieren.",
        "inhalt": "Dieses Modul führt aktuelle Techniken zum Erfassen, Verfolgen und Interagieren im drei-dimensionalen Raum ein. Anschließend werden Fragestellungen und Probleme bei Nutzerinteraktionen mit 3D UserInterfaces diskutiert.\nWährend des Seminars werden praxisnahe Aufgaben im Bereich 3D User-Interfaces und Mixed-Reality Anwendungen gestellt und in der zweiten Hälfte des Semesters in kleinen Projektteams fortgeführt. Eine Projektaufgabe wird hier hinsichtlich Konzeptionierung und Implementierung in einer interaktiven drei-dimensionalen Anwendung umgesetzt. Der Projektfortschritt wird agil und iterativ begleitet, um zeitnah Feedback zum Verlauf geben zu können. Als Abschluss werden die erarbeiten Projekte anhand von nutzerzentrierten Evaluierungsmethoden analysiert, und im Rahmen von Pair-Reviews zwischen den einzelnen Gruppen besprochen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=930144&pOrgNr=1",
        "name": "Games on Graphs",
        "kennung": "IN2296",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul kennen Studierende die grundlegenden Begriffe der Spieltheorie. Sie können die entsprechenden algorithmischen Lösungsverfahren anwenden und damit auch kleinere Spielinstanzen von Hand lösen. Weiterhin verstehen sie die entsprechenden mathematischen Werkzeuge zur allgemeinen Lösung der behandelten Spiele.",
        "inhalt": "Die Vorlesung führt in die Theorie der Spiele auf (endlichen) Graphen (rekursive Spiele mit endlichem Zustandsraum) ein.\nAnhand verschiedener Varianten von Erreichbarkeitsspielen (ohne/mit Zufall, abwechselnde/gleichzeitige Entscheidungen) werden die grundlegenden Definitionen und Verfahren aus dem Bereich der mathematischen Spieltheorie vorgestellt.\nDarauf aufbauend werden komplexere quantitative (z.B. Markov Decision processes, Discounted-payoff games, Mean-payoff games, Shapely's stochastic games) und qualitative (z.B. Parity, Rabin, Muller, Streett) Varianten diskutiert.\nAn weiterführenden Themen werden z.B. Techniken zur Reduzierung des Speicherbedarfs (z.B. BDDs), entsprechende Softwaretools (z.B. PRISM), Spiele mit partiellen Beobachtungen, Spiele auf rekursiven Graphen, Bezüge zu Logik und Mengentheorie (z.B. Gale-Stewart-Spiele und Determiniertheit nach Martin) oder die Synthese von Steuerprogrammen angesprochen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=557065&pOrgNr=1",
        "name": "Geometrische Modellierung und Visualisierung",
        "kennung": "IN8013",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Am Ende des Semesters haben sich die Studierenden ein vertieftes Wissen über die Grundlagen der Differentialgeometrie der Kurven und Flächen, die mathematische Beschreibung und Analyse von Flächen und die grundlegenden Methoden der wissenschaftlichen Visualisierung angeeignet. Die Studierenden kennen die speziellen Repräsentationen von Flächen im Bereich der Computergrafik, und sie sind mit modernen Techniken der geometrischen Modellierung, etwa Unterteilungsflächen, vertraut. Sie kennen die unterschiedlichen Stufen der Visualisierungspipeline und können die grundlegenden Methoden dieser Stufen beschreiben. Die Studierenden können existierende Techniken in Bezug auf Qualität und Effizienz analysieren und kategorisieren, und sie können neue Ansätze unter Berücksichtigung spezifischer Anforderungen modellieren und entwickeln. In der Vorlesung lernen die Studierenden verfügbare Modellierungs- und Visualisierungssysteme kennen, und sie können diese Systeme verwenden, um eigene Modelle und Visualisierungen zu erstellen.",
        "inhalt": "Einführung in the Interpolations- und Approximationstheorie sowie die Differentialgeometrie, Level-of-detail Repräsentationen, Unterteilungsflächen, Flächenrekonstruktion aus Datenfeldern, direkte und indirekte Volumenvisualisierung, Strömungsvisualisierung, Grundlagen des Rasterisierungs-basierten Rendering, lokale Beleuchtungsmodelle."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1528921&pOrgNr=1",
        "name": "Geometry Processing",
        "kennung": "IN2297",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the semester the students have gained advanced knowledge concerning the mathematical foundations underlying geometric modelling and character animation, and they know the different methods which are typically used in these areas. They are familiar with the mathematical descriptions of curves and surfaces, their internal representation on a computer, and advanced modelling approaches such as subdivision techniques. They are familiar with the different stages in the character animation pipeline, and they can describe the basic methods used in each of these stages. The students can analyse and categorize availaible techniques in terms of functionality, quality and efficiency, and they can model and develop new approaches considering specific requirements. In the lecture the students learn about the different parts and functionality of commonly used modelling and animation tools, and they can use these tools to create own models and animations.",
        "inhalt": "Introduction to polynomial interpolation and approximation, parametric and implicit curve and surface representations, Spline curves and surfaces, surface subdivision schemes, CSG, surface analysis using differential geometry, level-of-detail representations, surface reconstruction from point sets, introduction to character animation, riging, scinning and layering, locomotion, motion capturing and (space-time) control, character modeling."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2839421&pOrgNr=1",
        "name": "Geschäftsprozesstechnologien und -management",
        "kennung": "IN2105",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden mit den verschiedenen Perspektiven von Geschäftsprozessen (Kontrollfluss, Datenfluss, Ressourcen) vertraut und können diese sowohl modellieren also auch in einer prozessorientierten Anwendung umsetzen. Die Studierenden verstehen die Bedeutung der Überwachung von und der Datensammlung während der Prozesslaufzeit. Die Studierenden können grundlegende Algorithmen des Process Mining basierend auf den während der Ausführung gesammelten Prozessdaten anwenden und die Ergebnisse interpretieren. Weiterhin sind die Studierenden mit den grundlegenden Begriffen der Korrektheit und Compliance von Prozessen vertraut und verstehen, welche Seiteneffekte bei den Änderungen von Prozessen zu kontrollieren sind. Schließlich sind die Studierenden in der Lage, partnerübergreifende Prozesse (so genannte Prozess Choreographien) zu modellieren.",
        "inhalt": "Die Lehrveranstaltung beschäftigt sich mit fortschrittlichen Aspekten des Geschäftsprozessmanagements mit besonderem Blick auf grundlegende Technologien und aktuelle Forschungsthemen. Ausgehend von der prozessorientierten Entwicklung von Anwendungen werden die folgenden Themen behandelt:\n- Ressourcenverwaltung und Arbeitslistenmanagement\n- Logging und Monitoring von Geschäftsprozessen\n- Einführung in Process Mining\n- Geschäftsprozesse und Compliance\n- Anpassung von Prozessinstanzen zur Laufzeit und Evolution von Prozessen\n- Modellierung und Korrektheitsaspekte von Prozessnetzwerken/Prozesschoreographien"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=936509&pOrgNr=1",
        "name": "Geschichtswelten",
        "kennung": "IN2290",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul verstehen die Studierenden die Grundregeln zur Schaffung von Storywelten und sind in der Lage das Erlernte anzuwenden, um eigene, neue Welten zu erschaffen. Die Studierenden sind ebenfalls in der Lage diese Welten in diverese Formate zu übertragen, unter Berücksichtung der Abstimmungsprozesse, die vor allem bei Games und transmedialen Formaten von besonderer Bedeutung sind.",
        "inhalt": "Storyworlds beschreiben alle Grundregeln und Eigenschaften einer fiktiven Welt, in der eine unendliche Vielzahl von Geschichten und Abenteuern erzählt werden können. Eine Storyworld ist keine Geschichte, sondern vielmehr das Universum, in dem Geschichten stattfinden. Die Bedeuting von Storywelten wächst vorallem durch Transmedia, welches auf einer in sich logisch erzählten Geschichtswelt basiert. Von dieser Welt aus können dann Derivate in den verschiedensten Formaten (Game, Film, Comic, ARG, etc.) entwickelt werden."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456422&pOrgNr=1",
        "name": "Gleichungslogik und Lambda-Kalkül",
        "kennung": "IN2048",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After the successful completion of this module, students will be able to\n- prove confluence and termination of abstract reduction systems\n- prove equalities by rewriting and by equational logic,\n- define the semantics of equational logic and to use it to disprove equalities,\n- prove confluence and termination of simple rewrite systems,\n- prove basic properties of lambda-calculus like confluence or termination,\n- express computable functions as untyped lambda-terms,\n- infer the type of an untyped lambda-term,\n- convert between typed lambda-terms and proofs.",
        "inhalt": "The following foundational concepts are covered: abstract reduction systemes; termination and confluence; signatures, terms, substitutions; rules of equational logic; semantics: algebra, validity, term algebra; correctness and completeness of equational logic; term rewriting: equivalence of term rewriting and equational logic; unification; termination proofs; confluence: critical pairs, Knuth-Bendix completion, confluence of orthogonal systems; untyped lambda calculus: lambda terms, beta and eta reduction and their confluence; lambda calculus as a programming language; typed lambda calculus: types, typing rules, let-polymorphism, Curry-Howard isomorphism."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452818&pOrgNr=1",
        "name": "Grundlagen: Algorithmen und Datenstrukturen",
        "kennung": "IN0007",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer beherrschen die oben genannten grundlegende Algorithmen und Datenstrukturen. Sie sind in der Lage, diese eigenständig in ihrer Komplexität zu analysieren und die entsprechenden Analysekonzepte auf verwandte algorithmische Probleme anzuwenden. Ferner sind die Teilnehmer in der Lage, die behandelten Algorithmen und Datenstrukturen einzusetzen, sie ggf. zu modifizieren und verschiedene Lösungen in ihrer Güte zu vergleichen.",
        "inhalt": "Das Modul behandelt zunächst die Grundlagen der Analyse von Effizienz bzw. Komplexität. Es werden grundlegende Begriffe, Komplexitätsmaße, die Landau-Symbole sowie verschiedene Maschinenmodelle eingeführt. Danach studiert das Modul grundlegende Datenstrukturen und algorithmische Probleme.\n- Datenstrukturen für Sequenzen: Untersucht werden dynamische Arrays, Listen, Stapel und Warteschlangen. Dabei wird jeweils die Komplexität der einzelnen Operationen hergeleitet.\n- Hashing: Im Kern werden Hashing mit Verkettung, universelles Hashing sowie verschiedenen Sondierverfahren vorgestellt. Das Modul behandelt optional perfektes Hashing und hash-basierte Algorithmen, zum Beispiel für das Problem des Mengendurchschnitts.\n- Sortieren: Das Modul wiederholt zunächst einfache Verfahren wie InsertionSort, SelectionSort und BubbleSort. Anschließend werden fortgeschrittene Verfahren wie MergeSort, HeapSort und QuickSort analysiert. Optional werden sortierbasierte Algorithmen, die untere Schranke für vergleichsbasiertes Sortieren, Rang-Selektion, RadixSort sowie externes Sortieren vorgestellt.\n- Prioritätswarteschlangen: Das Modul untersucht binäre Heaps und Binomialheaps.\n- Suchbäume: Das Modul behandelt binäre Suchbäume, AVL-Bäume und (a,b)-Bäume.\n- Graphalgorithmen: Das Modul studiert verschiedene Graphrepräsentation, Traversierungstechniken per DFS/BFS, die Berechnung von Zweifachzusammenhangskomponenten und starken Zusammenhangskomponenten, topologische Sortierung, die Berechnung von kürzesten Wegen und minimalen Spannbäumen. Optional werden Lösungsverfahren für das Traveling Salesman Problem (TSP) vorgestellt.\nIm Stoffspektrum des Moduls sind optional Datenkompressionverfahren (Huffman, Lempel-Ziv) und einfache Algorithmen für das Problem des Pattern Matchings vorgesehen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2916168&pOrgNr=1",
        "name": "Grundlagen: Betriebssysteme und Systemsoftware",
        "kennung": "IN0009",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach Abschluss des Moduls sind die Studierenden in der Lage, die Grundlagen, Probleme und Lösungen von Betriebssystemen und der Systemsoftware zu verstehen und die aktuellen Entwicklungen einzuschätzen. Zudem verstehen sie die einzelnen Komponenten, wie zum Beispiel die Prozess- und die Speicherverwaltung, und sie können die unterschiedlichen Strategien und Verfahren analysieren und bewerten. Sie sind zudem in die Lage, die erworben Grundlagenkenntnisse direkt auf neue Entwicklungen im Bereich der Betriebssysteme sowie der Systemsoftware anzuwenden, indem sie Betriebssystemkomponenten und andere Systemsoftware selber entwickeln.",
        "inhalt": "Grundkonzepte: Betriebssysteme; Nebenläufigkeit; Parallele Programmierung; Systemnahe Programmierung (Prozesse, Speicher, Kommunikation, BM-Verwaltung; Modelle (abstrakt, formal) für Nebenläufigkeit, u.a. Petrinetze; Wechselseitiger Ausschluss, Synchronisation, Deadlocks; Compiler/Linker/Loader mit Integration von Bibliotheken, Übergang auf (geeignete) Hardware-Basis, maschinennahe Programmierung und C; I/O insbesondere zur Vorbereitung der Vernetzung)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452820&pOrgNr=1",
        "name": "Grundlagen: Datenbanken",
        "kennung": "IN0008",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden können die wesentlichen Konzepte von relationalen Datenbanksystemen anwenden und können sie systematisch und qualifiziert nutzen und bewerten.\nDie Studierenden beherrschen die systematische Nutzung eines Datenbanksystems vom konzeptuellen Entwurf über den Implementationsentwurf zum physischen Entwurf. Sie können auch komplexe Anfragen in SQL formulieren und haben ein Grundverständnis der logischen und physischen Optimierung auf der Grundlage der Relationenalgebra. Weiterhin haben sie den sicheren Betrieb hinsichtlich Recovery, Mehrbenutzersynchronisation und Autorisierung verstanden.",
        "inhalt": "SQL, Datenintegrität, relationale Entwurfstheorie, physische Datenorganisation (Speicherorganisation, Indexstrukturen), Anfragebearbeitung, Transaktionsverwaltung, Grundzüge der Fehlerbehandlung (Recovery, Backup) und der Mehrbenutzersynchronisation, Sicherheitsaspekte (Autorisierung), XML-Datenmodellierung (optional)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=758005&pOrgNr=1",
        "name": "Grundlagen der Filmproduktion mit Modellierungspraktikum",
        "kennung": "IN2283",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an den Modulveranstaltungen beherrschen die Studierenden die wesentlichen Aspekte von Filmproduktionen (Stoffentwicklung, Finanzierung, Drehvorbereitung, Dreharbeiten, Postproduktion, Verwertung) und sind in der Lage, diese auf den Kontext von innovativen Games Konzepten umzuformen und anzuwenden. Weiterhin verstehen sie die grundlegende Funktionalität, die moderne Modellierungstools zur Verfügung stellen, und können damit selbstständig eigene geometrische Modelle entwerfen.",
        "inhalt": "Die Vorlesung vermittelt grundlegende Konzepte in den Bereichen\n- Stoffentwicklung - Von der Idee zum fertigen Drehbuch\n- Finanzierung - Drehplan, Kalkulation, Finanzierung\n- Drehvorbereitung - Vom Greenlight bis zur ersten Klappe\n- Dreharbeiten\n- Postproduktion - Bildschnitt, VFX, Sound Design, Musik, Mischung, Titel\n- Verwertung\n\nDas Praktikum vermittelt den Studierenden eine Einführung in die grundlegenden Konzepte und Funktionalität einer Modellierungssoftware. Der Fokus liegt auf dem Erlernen des Umgangs gängiger Modellierungstools. Die Übung setzt sich zusammen aus 3-5 Frontalübungen, in denen den Studierenden eine Einführung in die Software gegeben wird, und Übungsstunden, in denen 1-2 Studierende am Rechner die gestellten Aufgaben bearbeiten. Die Übung wird als Blockveranstaltung an 3 Tagen in der vorlesungsfreien Zeit abgehalten."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452806&pOrgNr=1",
        "name": "Grundlagenpraktikum: Programmierung",
        "kennung": "IN0002",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolreicher Teilnahme an diesem Modul beherrschen die Studierenden die Programmiersprache Java oder eine ähnliche objekt-orientierte Programmiersprache und das Programmieren im Kleinen. Sie können Programme eigenständig entwickeln und dabei wesentliche Konzepte der Informatik auf einem grundlegenden, praxis-orientierten, aber wissenschaftlichen Niveau anwenden, wie sie im Modul IN0001 gelehrt werden.",
        "inhalt": "Begleitend zum Modul IN0001 behandelt das Praktikum\nAufgaben, die u.a. die kreative Verwendung von:\n- grundlegenden Datenstrukturen\n- Rekursion\n- Objekten, Klassen und Methoden\n- Listen, Warteschlangen und Bäumen\n- höheren Konzepten der objektorientierten Programmierung\n- Nebenläufigkeit\nzur Problemlösung einüben."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1386201&pOrgNr=1",
        "name": "Grundlegende Algorithmen (CSE)",
        "kennung": "IN2157",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmerinnen und Teilnehmer verstehen grundlegende Algorithmen (inkl. einfacher paralleler Algorithmen) und können sie anwenden. Sie sind in der Lage, die Komplexitäts- sowie die Parallelitätseigenschaften von moderat komplexen Algorithmen zu analysieren. Für bekannte Algorithmen können sie diese Eigenschaften mit den behandelten Methoden beweisen. Die Teilnehmenden sind ferner in der Lage, die Eignung dieser Algorithmen für ein bestimmtes Problem zu untersuchen.",
        "inhalt": "Das Modul bietet eine Einführung in grundlegende sequentielle und auch parallele Algorithmen, sowie eine Einführung in die Analyse von Algorithmen. Dies umfasst insbesondere folgende Themen:\nGrundlagen: Berechnungsmodelle, Komplexitätsmaße, Schleifeninvarianten und Induktion zum Beweis der Korrektheit von Algorithmen\nSortieren: Bubble-Sort, Merge-Sort, Quick-Sort, Median-Bestimmung, untere Schranken für Sortierprobleme, paralleles Sortieren\nSuchen: Lineare und binäre Suche, Suchbäume (AVL-Bäume), Hashing, etc.\nArithmetische Probleme: parallel prefix computation, parallele Matrix- und Vektoroperationen\nGraph-Algorithmen: Graph-Traversierung, Transitive Hülle, Kürzeste Wege, Minimale Spannbäume\nAnhand der behandelten Algorithmen werden die Berechnungsmodelle, Komplexitätsmaße sowie Analyse- und Beweistechniken vorgestellt und eingeübt."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=705979&pOrgNr=1",
        "name": "High Performance Computing - Algorithmen und Anwendungen",
        "kennung": "IN2252",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmenden kennen wichtige parallele Algorithmen aus verschiedenen Aufgabenbereichen des parallelen und Hochleistungsrechnens, insbesondere aus dem Umfeld des wissenschaftlichen Rechnens. Sie können deren Anwendbarkeit in den gängigen Szenarien beurteilen, sind mit ihren wesentlichen Leistungsmerkmalen vertraut und können insbesondere auch die parallele Skalierbarkeit dieser sowie ähnlicher Algorithmen bewerten. Die Teilnehmenden sind ferner in der Lage, bekannte Algorithmen mit Hilfe eines parallelen Programmiermodells umzusetzen.",
        "inhalt": "Die Vorlesung behandelt eine Auswahl von Algorithmen aus den folgenden klassischen Problemfeldern des wissenschaftlichen Rechnens (\"the seven dwarfs of HPC\"):\n\n- Löser für partielle Differentialgleichungen (und verwandte Problemstellungen) auf strukturierten und unstrukturieten Gittern\n- Algorithmen der numerischen linearen Algebra auf dünn- und dichtbesetzten Matrizen\n- Partikelorientierte Simulationsverfahren\n- Spektralverfahren (z.B. parallele schnelle Fouriertransformation, etc.)\n- stochastische Verfahren (Monte-Carlo-Simulation, etc.)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458316&pOrgNr=1",
        "name": "High Performance Computing - Programmiermodelle und Skalierbarkeit",
        "kennung": "IN2013",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an dem Modul sind die Studierenden in der Lage, gut bzw. schlecht parallelisierbare Teile vorliegender sequentieller Algorithmen oder Programme zu identifizieren. Sie können geeignete Parallelisierungsstrategien auswählen sowie anwenden. Sie sind ferner mit den wesentlichen Charakteristika speicher- bzw. nachrichtengekoppelter paralleler Systeme und deren Programmierung vertraut, dass sie vorgegebene oder selbst entwickelte parallele Algorithmen in effiziente Programme (MPI oder OpenMP) auf solchen Systemen umsetzen können.",
        "inhalt": "- Einführung (Rechnerklassifizierung, Ebenen der Parallelität, Leistungsanalyse, Topologien)\n- Grundlagen paralleler Programme (wesentliche Begriffe, Kommunikation und Synchronisation über gemeinsamen Speicher bzw. Nachrichten, parallele Programmstrukturen, Entwurf paralleler Programme)\n- Programmierung speichergekoppelter Systeme (Cachekohärenz und Speicherkonsistenz, Variablenanalyse, Programmierung unter OpenMP)\n- Programmierung nachrichtengekoppelter Systeme (Message-Passing-Paradigma, Programmierung unter MPI)\n- Dynamische Lastverteilung (Grundbegriffe, ausgewählte Strategien, Lastverteilung mittels raumfüllender Kurven)\n- Beispiele paralleler Algorithmen (Bitonisches Sortieren, etc.)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4116906&pOrgNr=1",
        "name": "High Performance Query Processing",
        "kennung": "CIT323001",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Students know how modern database engines execute queries. They are capable of implementing salable and efficient algorithms for executing analytical database queries efficiently on multi-core processors and with modern storage technologies.",
        "inhalt": "Query processing refers to the series of steps that a database system takes to execute an analytical query given a query plan. High performance query processing is about executing analytical queries with performance close to what the hardware allows. To achieve high performance, it is not enough to know about the algorithms that database systems use; one must also take features of today's processors and storage technologies into account. This course covers database query processing paradigms, algorithms, SIMD parallelization, multi-core parallelization, distributed query processing, and out-of-memory processing."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1493752&pOrgNr=1",
        "name": "Höhere Algorithmik",
        "kennung": "IN2360",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer des Moduls verfügen über vertiefte Kenntnisse verschiedener Grundprinzipien in der Entwicklung und Analyse von Algorithmen (Divide-and-Conquer, Greedy-Verfahren, dynamische Programmierung, Randomisierung) sowie zahlreiche paradigmatische Anwendungsprobleme.",
        "inhalt": "Das Modul behandelt grundlegende und klassische Themen aus dem Bereich der effizienten Algorithmen. Dabei werden zentrale Techniken des Algorithmenentwurfs und der Analyse studiert. Konkret behandelt das Modul die Methoden Divide-and-Conquer, dynamische Programmierung, Randomisierung, Greedy-Verfahren sowie amortisierte Analyse. Diese Techniken werden angewandt, um grundlegende algorithmische Probleme zu lösen. Die Agenda des Moduls umfasst die folgenden Themen.\nDivide-and-Conquer: Einführung -- deterministischer Quicksort; geometrisches Divide-and-Conquer; Problem des dichtesten Punktepaars; Schnitt von Liniensegmenten; schnelle Fourier-Transformation (FFT).\n\nEinführung in die randomisierten Algorithmen: Las-Vegas- und Monte-Carlo-Algorithmen; Primzahltest; RSA-Kryptoverfahren; Verifikation von Matrixmultiplikationen.\n\nDatenstrukturen: Treaps – randomisierte Suchbäume; universelles und perfektes Hashing; Konstruktion von Suffix-Bäumen.\n\nAmortisierte Analyse: Dynamische Tabellen; Fibonacci-Heaps.\n\nGreedy-Algorithmen: Ablaufplanung von Zeitintervallen (Intervall-Scheduling); Planung mit dem Ziel der Minimierung von Verspätungen; kürzeste Wege in Graphen.\n\nDynamische Programmierung: Matrixketteprodukt; Konstruktion von optimalen Suchbäumen; Segmentierung von Datenpunkten; Editierdistanz; approximatives String-Matching; Sequenzalignment.\n\nGraphenprobleme: Max-Fluss-Problem; Berechnung von minimalen Schnitten.\n\nKomplexität: PSPACE – eine Klasse von Problemen oberhalb NP; relaxierte Komplexitätsmaße.\n\nAusgewählte Themen: Stabile Heirat; lokale Suche; Berechnung des Medians; Routing im Hyperwürfel; die probabilistische Methode."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=802708&pOrgNr=1",
        "name": "Image Guided Surgery",
        "kennung": "IN2286",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Participants learn the basics of medical applications in minimally invasive image guided surgery and related hybrid imaging. They gain the knowledge to understand the complex medical environment as well as its challenges in order to improve these procedures (including logistics and imaging in the operating theatre of the future). With knowledge about technology and algorithm they can model and master complex solutions. Besides the medical and technical knowledge, definition of clinical, technical projects in the field of intra operative imaging and navigation for minimal invasive surgery is the core focus during the course. Exposure to real world problems makes this a unique setup for modeling and implementing creative solutions.",
        "inhalt": "Application oriented course that starts at the actual medical application (with an interface to the department at a hospital) with limited technical background, then goes back to the theory of medical imaging and navigation in order to finally being able to apply this newly acquired knowledge for the creation of innovative approaches in medical imaging and image guided interventions.\nLecture:\n\"Basics of selected medical applications in surgery and interventional radiology\n\"Basics of intra-operative imaging and navigation\n\"Critical analysis of existing interventional imaging and minimal invasive surgery procedures and identification of innovation potential using knowledge of preoperative, diagnostic imaging and interventional navigation techniques.\n1.How is the procedure performed at the moment?\n2.How is the procedure and associated data recorded and how is the outcome of the procedure documented?\n3.How are data/information presented and how is the user interaction?\n4.Which tools are used?\n5.What is the workflow and the surgical process model?\n6.Can the procedure (inlcuding patient and therapy logistics) be improved using imaging and navigation and their correct representation (quality assurance, safety, speed, ...)?\n\nProject Assignments (3-4 Assignments in team with 3-5 students each):\n\"Finding an idea, description of the medical application and clinical challange as well as description of the planned project\n\"Draft of a project plan and analysis of the feasibility\n\"implementation of a functional prototype and presentation (including a written project plan with max. 15 pages)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456368&pOrgNr=1",
        "name": "Image Synthesis",
        "kennung": "IN2015",
        "organisation": "Department Computer Science",
        "anmerkung": "5 Credits ab WS 14/15",
        "lernergebnisse": "After successful completion of the module, the students have gained advanced knowledge concerning the image synthesis process, including the simulation of local and global illumination effects as well as typical image and compositing operations. The students know the methods which are used in computer games, animation films, and virtual reality scenarios to simulate and render realistic illumination effects. They can analyse and categorize availaible techniques in terms of quality and efficiency, and they can model and develop new approaches considering specific requirements. The students are familiar with the functionality of commonly used image synthesis tools, they can evaluate available tools based on their functionality, and they can apply these tools to create own renderings of given models and scenes.",
        "inhalt": "Programmable graphics pipeline, graphics APIs and shader programming, multi-pass techniques, shadow techniques, ambient occlusion, hardware tessellation and displacement mapping, global illumination techniques (ray-tracing, radiosity, photon tracing), light volumes, image formats and image processing, filtering, HDRI, compositing and after effects."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3899490&pOrgNr=1",
        "name": "Immersive Storytelling: Games",
        "kennung": "CIT226000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an diesem Kurs kennen die Studierende unterschiedliche Elemente im Bereich des Game Design zur Vermittlung von komplexen Geschichtswelten und dessen Wirkung im Spiel. Sie können diese bewerten und gezielt implementieren.\nZusätzlich beherrschen die Studierenden das Anwenden Methoden und Algorithmen zur Implementierung von Systemen für das Entwerfen, Entwickeln und Umsetzen von interaktiven Geschichtswelten.\nDurch die Arbeit in interdisziplinären Teams mit unterschiedlichen Expertisen, entsteht ein realistischer Arbeitsablauf und Verteilung in der Produktion von Spielen. Dies ermöglicht das Verstehen von Entwicklungsprozessen und den Einsatz von agilen Methoden zum Bewerten des Projektverlaufs und das Erreichen von individuell gesetzten Zielen.",
        "inhalt": "Digitale Technologien wie die virtuelle Realität und der Einsatz moderner Rendering-Techniken sind Schlüsseltechnologien für die Gestaltung künftiger virtueller Erfahrungen im Bereich der Industrie, der Bildung und der Unterhaltungsbranche. Um diese Technologie mit interessanten Inhalten befüllen zu können, besteht ein Bedarf an glaubwürdigen Welten, welche die verschiedenen Arten an immersiver Erfahrungen bereichern können.\nIn diesem Kurs werden Grundlagen für die Entwicklung flexibler und skalierbarer Systeme vorgestellt und entwickelt, welche für komplexe Geschichtswelten erforderlich sind. Dabei lernen die Studierenden die Anforderungen und Blickwinkeln von Schriftstellern und Regisseure kennen und erwerben Kompetenzen im Bereich der kreativen Ausarbeitung von virtuellen Welten.\nBehandelt werden grundlegende Elemente im Game Design, ergänzt durch Techniken zum direkten und indirekten vermitteln von Geschichtselementen in interaktiven Medien, können die Studierende den Einsatz von Stilmitteln in der virtuellen Welt verstehen lernen und selbst erproben.\nDurch die Kombination mit Studierenden der Hochschule für Fernsehen und Film München, werden aktiv an eigenen Beispielen gearbeitet und die behandelten Themen praktisch umgesetzt und vertieft.\nWährend einer als Blockveranstaltung abgehaltenen 2 ½-Wöchigen Kombination aus Vorträgen, Interaktiven Übungen und das behandeln von Fallstudien, können bereits in Einzel und Gruppenarbeit unterschiedliche Schwerpunkte für die eigene Projektidee ausgearbeitet werden. Projektbegleitend werden gezielte Vorträge mit ergänzenden Inhalten angeboten und in regelmäßigen Abständen finden Zwischenpräsentationen der Projektgruppenmitglieder statt."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1393974&pOrgNr=1",
        "name": "Indie-Games: von der Idee zum Markt",
        "kennung": "IN2353",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Modulveranstaltung ist besonders auf eine projektorientierte Verbindung von Praxis und Theorie ausgerichtet. Nach der Teilnahme an der Modulveranstaltung sind die Studierenden in der Lage zu erkennen und zu bewerten, worauf unabhängige Spieleentwickler bei der Entwicklung eines Spiels achten. Darüber hinaus können die Studierenden erkennen und bewerten, welche Faktoren für den Erfolg eines Spiels ausschlaggebend sind und welche Schritte in den Bereichen Team Bildung, Laterale Führung, Finanzierung & Financial Pitch, kreative Ideengenerierungsmethoden, Design Thinking für rapid prototyping, Game Design, Marketing & PR zu berücksichtigen sind. Zu guter Letzt bewerten die Studierenden die Auswahl von Publishing-Plattformen. Sie sind im Anschluss in der Lage das Erlernte auf vergleichbare Projekte in der Game-Industrie zu übertragen und anzuwenden. Auf Basis der Grundlagen können die Voraussetzungen für die Entwicklung eigener, neuer und erfolgreicher Indie-Games geschaffen werden. Im weiteren Verlauf sind die Studierenden in der Lage die Diversität der unterschiedlichen Disziplinen in der Spieleentwicklung zu erkennen und angemessen zu bewerten.",
        "inhalt": "In diesem Modul wird der Frage nach einer erfolgreichen Spieleentwicklung und Vermarktung eines unabhängigen Spiele-Prototypen nachgegangen. Es werden dabei verschiedene Aspekte und Grundsätze, vor allem in Bezug auf das Publishing eines Indie-Games, erläutert und erlernt:\n- Was ist ein Indie-Game aus Sicht des Inverstors?\n- Grundlagen einer erfolgreichen Projektplanung als unabhängiger Spieleentwickler\n- Zielgerichtete Konzepterstellung für ein Indie-Game\n- Analyse, Planung und Umsetzung eines Indie-Games\n- Wie und wann muss eine Investition stattfinden?\n- Was sind Kooperationen und wie werden sie um das Projekt herum gebildet?\n- Effiziente Nutzung von Expertenwissen, Bibliotheken (Unity Asset Store) und anderen Dienstleistungen\n- Wie sieht die Angebotserstellung von Umsatzanteilen aus?\n- Nach welchen Kriterien sollte die Auswahl eines geeigneten Spiels stattfinden?\n- Analyse von: Kosten-Nutzen, effektive Personalplanung, Marketing-Mix\n-Erstellung von einem Krisenkommunikation-Plan\n- Marketing durch die eigene Webseite und Erstellung der richtigen Texte, sowie Erstellung von einem Trailer für das Spiel"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1809448&pOrgNr=1",
        "name": "Informatik Bachelor-Praktika für Management",
        "kennung": "IN8029",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer sind in der Lage, ein kleines Softwaresystem im Team zu konzipieren und zu implementieren. Sie können dabei ingenieurmäßige Methoden und Modelle aus den verschiedenen Bereichen der Informatik anwenden, um die einzelnen Phasen der Realisierung des Projekts durchzuführen. Sie kennen die Risiken und typischen Probleme in Softwareprojekten und die Methoden, damit umzugehen. Sie verfügen über die Kompetenz, über ihre Projektarbeit schriftlich und mündlich zu berichten.",
        "inhalt": "- Umsetzung eines Softwareprojekts oder -teilprojekts im Team\n- Ingenieurmäßige Methoden und Modelle zur Softwareentwicklung in verschiedenen Bereichen der Informatik\n- Techniken zur Dokumentation und Präsentation von Ergebnissen bzw. Zwischenergebnissen bei der Softwareentwicklung\n\nDieses Modul wird von verschiedenen Lehrstühlen angeboten, so dass die Fachlichkeit des Projekts aus dem Gebiet des jeweiligen Lehrstuhls stammt (z.B. Datenbanken, Informationssysteme, Netzwerke, Groupware, Grafik, Robotik, Bilderkennung)."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=556994&pOrgNr=1",
        "name": "Informatik II für Ingenieurwissenschaften",
        "kennung": "IN8012",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden beherrschen wichtige Konzepte des Software Engineering und von relationalen Datenbanksystemen und können sie systematisch nutzen. Sie können Methoden des Software-Engineering für Problembeschreibungen einsetzen, und daraus Modelle erstellen.\nInsbesondere haben sie Fertigkeiten im Bereich des Softwareentwurfs mit der objektorientierten Modellierungssprache UML. Außerdem sind sie in der Lage die Konzepte für Anwendungsprogrammierung einzusetzen. Je nach Ausrichtung in der Abhaltung wird intensiver auf den Software Engineering Aspekt (z.B. Entwurfsmuster, mobile Systeme) oder auf den Datenbankaspekt (z.B. Datenbankanwendungsprogrammierung, Relationale Entwurfstheorie) eingegangen.",
        "inhalt": "Modellierung, Objekt-orientierte Entwurfsmethoden (UML), Grundlagen des Software-Engineering (Analyse, System-Entwurf und Objekt-Entwurf), Objektrelationales-Mapping (ORM) auf relationale Anfragesprachen (SQL), Datenintegrität, Grundlagen der Fehlerbehandlung und Mehrbenutzer-Systeme, Sicherheitsaspekte (Zugriffskontrolle, Autorisierung); je nach Ausrichtung in der Abhaltung werden noch mehr Inhalte aus Software Engineering (z.B. Tests und Implementierung von großen Software-Systemen, Entwurfsmuster) oder aus Datenbanken (z.B. Implementationsentwurf für relationale Datenbanken, Recovery / Backup) gebracht."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1809557&pOrgNr=1",
        "name": "Informatik Master-Praktika für Management",
        "kennung": "IN8030",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer beherrschen in einem anspruchsvollen Informatik-Fachgebiet die methodisch saubere Entwicklung von Informatikanwendungen, welche aus dem Gebiet des jeweiligen Lehrstuhls stammen (z.B. Datenbanken, Informationssysteme, Netzwerke, Groupware, Grafik, Robotik, Bilderkennung). Sie können anwendungsspezifische Methoden und Systeme einsetzen, die dem aktuellen Stand der Technik entsprechen. Sie können mit anderen im Team zielorientiert arbeiten und beherrschen die Techniken, um das Vorgehen zu dokumentieren und die Ergebnisse zu präsentieren.",
        "inhalt": "- Umsetzung einer größeren Softwareanwendung oder -teilanwendung im Team\n- Anwendungsspezifische Methoden und Systeme nach aktuellem Stand der Technik\n- Techniken zur Dokumentation und Präsentation von Ergebnissen bzw. Zwischenergebnissen bei der Anwendungsentwicklung\n\nDieses Modul wird von verschiedenen Lehrstühlen angeboten, so dass die Fachlichkeit der Anwendung aus dem\nGebiet des jeweiligen Lehrstuhls stammt (z.B. Datenbanken, Compilerbau, Informationssysteme, Netzwerke, Groupware, Grafik,\nRobotik, Bilderkennung)."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1809476&pOrgNr=1",
        "name": "Informatik Master-Seminare für Management",
        "kennung": "IN8031",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer besitzen die notwendigen methodischen und überfachlichen Fertigkeiten, sich in ein anspruchsvolles wissenschaftliches Thema im Bereich Informatik einzuarbeiten, selbständig dazu eine wissenschaftliche Seminararbeit anzufertigen, sie zu präsentieren und die Ergebnisse zu analysieren und vergleichend zu bewerten. Sie beherrschen die Arbeit mit wissenschaftlicher Literatur (recherchieren, bewerten, zitieren) und können wesentliche Aspekte in einer Ausarbeitung darstellen und in einem Vortrag präsentieren.",
        "inhalt": "- Selbständige Erarbeitung eines anspruchsvollen wissenschaftlichen Themas\n- Anfertigung einer Seminararbeit mit Quellenübersicht\n- Präsentation und Diskussion wissenschaftlicher Ergebnisse\n\nDieses Modul wird von allen IN-Lehrstühlen angeboten. Die Lehrstühle wählen geeignete Themen aus ihrem Fachgebiet und unterstützen die Studierenden beim Erlernen der fachlichen und wissenschaftlichen Fertigkeiten."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473851&pOrgNr=1",
        "name": "Informatikanwendungen in der Medizin",
        "kennung": "IN2021",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmerinnen und Teilnehmer die physikalischen Grundlagen der medizinischen Bildgebung und können verschiedene Methoden der medizinischen Bildverarbeitung und computergestützten Chirurgie verstehen und bewerten. Außerdem sind sie in der Lage, Problemstellungen der Diagnose und Therapie zu identifizieren und Lösungsansätze mit den Methoden der medizinischen Bildverarbeitung, Navigation und Visualisierung zu formulieren.",
        "inhalt": "Folgende Inhalte werden beispielhaft und durch Gastvorträge von Experten lokaler Kliniken und medizintechnischer Firmen (zu ausgewählten Themen) ergänzt:\n- Überblick\n++ Informatikanwendungen in der Medizin\n++ Geschichte der Radiologie und chirurgischer Eingriffe\n- Medizinische Bildmodalitäten\n++ Röntgen\n++ Computertomographie\n++ Angiographie\n++ Kernspintomographie\n++ Ultraschall\n++ Positronen-Emissions-Tomographie\n++ optische Bildgebung\n- Computerunterstützte Systeme für die Diagnose, Therapie, Chirurgie und Nachuntersuchung\n++ Bildsegmentierung\n++ Rigide und deformierbare Bildregistrierung\n++ Trackingssysteme\n++ Visualisierung und erweiterte Realität\n\nErgänzt werden diese Themen durch Vorträge von eingeladene klinischen oder industriellen Experten."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456378&pOrgNr=1",
        "name": "Informatikanwendungen in der Medizin II",
        "kennung": "IN2022",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmerinnen und Teilnehmer die Grundlagen, Unterschiede und Anwendungsgebiete hochentwickelter Algorithmen zur Bildverarbeitung, Bildsegmentierung, Bildregistrierung und können diese auch in Python implementieren. Zudem verstehen sie die Grundlagen von Algorithmen des maschinellen Lernens sowie von Methoden zur 3D Volumendarstellung. Die Teilnehmerinnen und Teilnehmer sind des Weiteren in der Lage anspruchsvolle Aufgabenstellungen im Bereich der computerunterstützten Diagnose und Intervention zu verstehen und Lösungsansätze mit Hilfe der behandelten Algorithmen zu erarbeiten.",
        "inhalt": "Folgende Inhalte werden beispielhaft behandelt und ggf. durch industrielle oder klinische Fallstudien von Experten lokaler Kliniken und medizintechnischer Firmen ergänzt:\n- Bildverarbeitung\n++ Bildfilterung im Ortsbereich\n++ Bildfilterung im Frequenzbereich\n++ Bildtransformationen\n- Bildsegmentierung\n++ Pixelbasierte Verfahren\n++ Graphbasierte Verfahren und graphische Modelle\n++ Variationsmethoden\n- Bildregistrierung\n++ Intensitäts- und landmarkenbasierte Verfahren\n++ Registrierung von inter-/intra-Patientendaten und inter-/intra-Modalitäten\n++ Graphbasierte Verfahren und graphische Modelle\n++ Variationsmethoden\n- Grundlagen des maschinellen Lernens\n++ Clustering\n++ Hauptkomponentenanalyse\n- Grundlagen der 3D Volumenvisualisierung\n++ Physikalische Grundlagen\n++ Überblick über Renderingtechniken\n\nIn den Übungen gibt es die Möglichkeit für die Teilnehmenden bei der Implementation oder Anwendung der Methoden zur Lösung von realen Problemstellungen ein tieferes Verständnis zu erlangen und praktische Erfahrung zu sammeln."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1518055&pOrgNr=1",
        "name": "Information Technologies and Society (IT and Society)",
        "kennung": "IN0025",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Vorlesung befähigt Studenten soziale, ökonomische und ethische Dimensionen von Informationstechnologien zu verstehen. Durch die Auseinandersetzung mit Konzepten der Sozialwissenschaften lernen die Studenten das kritische Reflektieren über den Einfluss von Informationstechnologien auf Privatheit, Vertrauen & Sicherheit, Arbeitsleben, Produktivität und Unternehmenswelt genauso wie über die Rolle von Informationstechnologien für soziale Interaktionen, Demokratie und politische Entscheidungsfindung. Die Vorlesung lehrt Studenten eine interdisziplinäre Orientierung bzgl. der Evaluierung von wichtigen IT-bezogenen Fragen, die in der heutigen Gesellschaft auftreten. Die Vorlesung dient Studenten dazu, Möglichkeiten und Hindernisse von IT in der Gesellschaft zu erkennen und Wege zu finden, diese Möglichkeiten zu stärken und Hindernisse zu überwinden.",
        "inhalt": "Die Vorlesung bietet einen Überblick über die Rolle von IT in der Gesellschaft. Besondere Schwerpunkte werden gelegt auf die Wechselwirkungen zwischen modernen Informations- und Datenanalysetechnologien und der Privatheit des Einzelnen und der Gesellschaft, und der Wahrung von Sicherheit von Daten durch Nutzer und Unternehmen. Des Weiteren werden ökonomische Auswirkungen von IT und Prinzipien der Regulierung der Auswirkungen von IT (auch an konkreten Fallbeispielen) besprochen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456390&pOrgNr=1",
        "name": "Informationsmanagement",
        "kennung": "IN2033",
        "organisation": "Department Computer Science",
        "anmerkung": "ab SS18 5 SWS und 6 ECTS",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage die Grundlagen des Informationsmanagements zu verstehen und die Methoden zur Ermittlung des Informationsbedarfs anzuwenden. Des Weiteren können sie die Qualität von Informationen bewerten und Modelle und Methoden des Informationsmanagements analysieren. Weiterhin sind die Studierenden nach der Teilnahme an dem Modul in der Lage die Bedeutung der Ressource \"Information\" im betrieblichen Kontext zu verstehen und die Grundlagen der IT Sicherheit zu bewerten. Außerdem können sie die Grundlagen der Referenzmodellierung analysieren.",
        "inhalt": "Modelle/Konzepte des Informationsmanagements:\n\n- Management der Informationswirtschaft\n(Management der Informationsnachfrage, der Informationsressourcen, der Informationsquellen, des Informationsangebots und der Informationsverwendung)\n\n- Management der Informationssysteme\n(Management der Daten, der Prozesse und des Anwendungslebenszyklus, Referenzmodelle)\n\n- Management der Informations- und Kommunikationstechnik\n(Wartung und Betrieb der IKT, Aneignung von IKT, Management der Speicherung und Kommunikation, Management der Sicherheit)\n\n- Führungsaufgaben des Informationsmanagements\n(Organisation des IM, Rolle des CIO, Sourcing Entscheidungen, Strategie und IM, IT Sicherheit)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1188622&pOrgNr=1",
        "name": "Informationsmanagement für Digitale Geschäftsmodelle",
        "kennung": "IN8024",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach dem Modul „Informationsmanagement für Digitale Geschäftsmodelle“ sind die Studierenden in der Lage, die Grundlagen des Informationsmanagements zu verstehen, Methoden zur Ermittlung des Informationsbedarfs anzuwenden, die Qualität von Informationen zu bewerten und Methoden der Aufwandsschätzung anzuwenden. Weiterhin sind die Studierenden in der Lage, die Bedeutung der Ressource „Information“ im betrieblichen Kontext zu verstehen, die Beziehung zwischen Informationstechnologie und Unternehmensstrategie zu analysieren und bestehende Geschäftsmodelle zu bewerten und neue Geschäftsmodelle zu entwickeln.",
        "inhalt": "Das Modul „Informationsmanagement für Digitale Geschäftsmodelle“ beschäftigt sich inhaltlich mit den Modellen und Konzepten des Informationsmanagements. Insbesondere werden dabei das Management der Informationswirtschaft (Management der Informationsnachfrage, des Informationsangebots und der Informationsverwendung), das Management der Informationssysteme (Management der Daten, der Prozesse und des Anwendungslebenszyklus), das Management der Informations- und Kommunikationstechnik\n(Wartung und Betrieb der IKT, Aneignung von IKT, Management der Speicherung und Kommunikation, Management der Prozesse, Management von Technikbündeln), die Führungsaufgaben des Informationsmanagements\n(Organisation des IM, Rolle des CIO, Sourcingentscheidungen, Geschäftsmodelle, Strategie und IM) und die Einordnung des Informationsmanagements in den Unternehmenskontext behandelt."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458522&pOrgNr=1",
        "name": "Informationswirtschaft",
        "kennung": "IN8004",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage,\n- wichtige Begriffe und Konzepte der Informationswirtschaft zu verstehen.\n- die Bedeutung der Ressource \"Information\" im betrieblichen Kontext zu bewerten.\n- die Beziehung zwischen Informationstechnologie und Unternehmensstrategie zu verstehen.\n- die Aufgabenbereiche des Informationsmanagements im Unternehmen zu verstehen.\n- ausgewählte Konzepte des Informationsmanagements zu analysieren und vor einem betrieblichen Hintergrund zu bewerten\n- die Grundlagen der Modellierung von Informationssystemen zu verstehen und Methoden der Prozess- und Datenmodellierung anzuwenden.",
        "inhalt": "Ausgehend von dem Begriff ?Information? wird die Informationswirtschaft als Teilgebiet des Informationsmanagements umfassend behandelt. Dabei werden auf die Wechselwirkungen zwischen der Ebene der Informationswirtschaft und den weiteren Ebenen des IM-Ebenen-Modells nach Krcmar eingegangen (Informationssysteme, Informations- und Kommunikationstechnik sowie die Führungsaufgaben des Informationsmanagement). Zudem werden spezifische Aspekte der Informationswirtschaft aufgezeigt, so z.B. der Wert der Ressource Information, Fragestellungen der Informationsökonomik und der Informationsaufarbeitung, des Business Intelligence, des Wissensmanagement und der Standardisierungsökonomik."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1339018&pOrgNr=1",
        "name": "Innovationsentwicklung in der Gesundheitsbranche",
        "kennung": "IN9048",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die angestrebten Lernergebnise beinhalten:\n• Werkzeuge und Methoden, um den Innovationsgrad einer Idee zu lernen und anzuwenden,\n• Werkzeuge und Methoden, um die Innovation und ihr Marktpotential zu validieren anzuwenden,\n• Ansätze zur Durchführung von „Innovation Games“ zu lernen,\n• Das Business Model und Value Proposition Canvas anwenden zu können,\n• Methoden und Werkzeuge für das Produktmanagement und Projektmangement zu lernen, anwenden und verstehen zu können,\n• Den Medizintechnikmarkt und das Erstattungssystem zu verstehen,\n• Geschäftsentwicklung in der Biomedizin zu verstehen\n• Methoden und Werkzeuge, um eine Idee/Erfindung in eine Innovation zu überführen zu lernen und anwenden zu können,\n• Soft Skills, u.a. wie man eine Idee vor einem Kommittee/Finanzierungspartner präsentiert, zu lernen",
        "inhalt": "Das Modul befasst sich mit der Kundenentwicklung für neue Ideen in der Gesundheitsbranche mit einem Fokus auf medizinische Bildgebungssysteme, medizinische Technologien und Gesundheitsdienstleistungen. Der Fokus liegt dabei auf der Entwicklung und Validierung des Kundennutzens (Value Proposition Design) und der Systemvoraussetzungen. Studenten werden in dem Kurs lernen, Feedback von klinischen Entscheidungsträgern zu sammlen, und Methoden und Werkzeuge lernen, um Ideen schnell generieren und validieren zu können, vor allem im Hinblick auf eine erfolgreiche Produktumsetzung. Grundlagen des Medizintechnikmarkts und des Geundheitssystems werden neben den Werkzeugen für die Validierung ebenfalls vermittelt.\nDie Studenten werden in enger Zusammenarbeit mit Partnern der Münchener Universitätskliniken an echten Aufgaben arbeiten.\nZudem werden Innovation Games durchgeführt, um Ideen und Lösungen zu entwickeln, die klinische Probleme lösen und diese werden auch validiert. Das Modul soll den Studierenden am Ende eine validierte Idee liefern, die im Anschluss in einer Geschäftsgründung münden kann."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=708256&pOrgNr=1",
        "name": "Interaktionsmethoden und -geräte",
        "kennung": "IN0033",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme am Modul haben die Studierenden einen Überblick über aktuelle Interaktionsmethoden im Bereich der Computerspiele und über die damit verbundenen Geräte. Sie kennen die Prinzipien, mit denen diese Interaktionen vom Computer wahrgenommen werden, und mit denen wiederum Feedback an die Spieler gegeben wird. Weiterhin kennen sie Metaphern, welche Spiele zur Interaktion einsetzen, und wissen wie diese evaluiert werden. Sie können aktuelle Spielinteraktionen hinsichtlich der verwendeten Ein- und Ausgabeprinzipien analysieren und eigenständig neue Spielinteraktionen ableiten und implementieren.",
        "inhalt": "Detaillierte Behandlung von Konzepten und Geräten der Mensch-Maschine-Interaktion im Umfeld von Computerspielen\n- Übersicht über aktuelle Ein- und Ausgabegeräte und –methoden\n- Übung technischer Details einzelner Ein- und Ausgabemethoden\n- Interaktionsmetaphern für Computerspiele und deren Tauglichkeit\n- Evaluation von Spieleinteraktionen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=837356&pOrgNr=1",
        "name": "Interaktive Werbung",
        "kennung": "IN2289",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach Abschluss dieses Moduls sind Studierende in der Lage, grundlegende Aspekte der Planung, Finanzierung und Durchführung einer Werbefilmproduktion zu erinnern und in kleinen eigenen Projekten auch in heterogenen Teams zur Realisierung einer gewählten Projektidee anzuwenden",
        "inhalt": "Das Seminar vermittelt grundlegende Kenntnisse in den Bereichen:\n\n- Arbeitsweisen und Erfolgskriterien in der Werbebranche\n- Praktische Umsetzung von Ideenfindungsmethoden\n- Nutzung von technischen Mitteln in Werbefilmen (Special Effects, Sound), sowie Optionen der Verbreitung/Marketing (Internet)\n- Methoden, um Filmkonzepte und auch sich selbst in Kurzform effektiv (Pitsch), oder auch detailliert zu präsentieren\n- Methoden, um eine Filmidee umzusetzen (Casting, Regie, Dreh, Postproduktion, Montage)\n\nDas Projekt vermittelt Erfahrungen hinsichtlich:\n\n- Konstruktiver, effizienter Teamarbeit in sehr interdisziplinär aufgestellten Teams\n- Aufstellung und Einhaltung von Terminplänen (mit definitivem Abschlusstermin)\n- Nutzung eines gegebenen Finanzbudgets)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=705925&pOrgNr=1",
        "name": "Interdisciplinary Guided Research at the Edge of Dynamical Systems & Scientific Computing",
        "kennung": "IN2251",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to create models for simple applications of (analytical) mechanics via the presented methods. They can understand, apply, and interprete basic ideas and concepts of the mathematical theory of finite-dimensional dynamical systems in the context of randomly perturbed ODE. Furthermore, the students are able to evaluate complex models of analytical mechanics using the presented methods as well as to understand, apply, and interprete basic algorithms of scientific computing, and to explain them in a presentation. Finally, they are able to implement relevant algorithms in a problem-oriented manner (in MATLAB).",
        "inhalt": "Part A: Dynamical Systems & Randomly Perturbed Differential Equations\n- Classical theory of ordinary differential equations (ODE) and corresponding numerics\n- Dynamical systems and stability of equilibria\n- Solution concepts of random differential equations and corresponding numerics\n- stochastic stability\n\nPart B: Algorithms of Scientific Computing\n- Reduction or partial differential equations (PDE) to systems of ODE using spatial discretisation\n- Basic numerical methods for (deterministic) ODE\n- Fourier transform\n- Discrete sine transform\n- Linear filters and generation of coloured-noise processes\n- Space-filling curves\n\nPart C: Application: Modelling seismic activities for buildings\n- Modelling the dynamics of elastic bodies\n- Relevant aspects of Software Engineering\n- Visualisation techniques"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460801&pOrgNr=1",
        "name": "Interdisziplinäres Projekt im Anwendungsfach Mathematik",
        "kennung": "IN2170",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden in der Lage, das erworbene Domänenwissen anzuwenden (Transferleistung) und können sich dadurch in eine Anwendungsdomäne außerhalb der Informatik einarbeiten. Sie verfügen über das grundlegende Domänenwissen in einem abgegrenzten Gebiet des Anwendungsfaches Mathematik und kennen dort die wesentlichen Konzepte und Methoden. Darüber hinaus sind die Studierenden in der Lage, in einem anspruchsvollen interdisziplinären Projekt Anforderungen zu einer Problemstellung des Anwendungsfaches unter gegebenen technischen, ökonomischen und sozialen Randbedingungen zu analysieren und entsprechende Systeme mit den Mitteln der Informatik (Anforderungsanalyse, Entwurf, Implementierung, Test) im Team zu entwickeln. Sie können dabei die wichtigen Fragestellungen mit Bezug zum Anwendungsgebiet herausarbeiten und in Abstimmung mit Experten aus dem Anwendungsfach klären. Sie sind in der Lage, den im Projekt erarbeiteten Lösungsweg so aufzubereiten, dass sie ihn den Fachleuten aus dem Anwendungsfach schriftlich und mündlich präsentieren können.",
        "inhalt": "Das Interdisziplinäre Projekt umfasst den Erwerb von Domänenwissen in einem Gebiet des Anwendungsfaches Mathematik und ein Informatikprojekt zur Lösung einer Aufgabe im Bereich des Anwendungsfaches. Themensteller eines Interdisziplinären Projektes im Anwendungsfach Mathematik sind Prüfende der Fakultät für Mathematik der TUM. Die Aufgabenstellung des Projekts steht im inhaltlichen Zusammenhang mit dem erworbenen Domänenwissen, so dass ein Teil dieses Wissens bei der Zusammenarbeit mit Fachexperten zur Lösung der Projektaufgabe Verwendung findet. Das erworbene Domänenwissen wird zudem für das spätere Berufsleben benötigt. Das Interdisziplinäre Projekt schlägt damit eine Brücke von der Informatik zum Anwendungsfach."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1477674&pOrgNr=1",
        "name": "Interventionelle Bildgebung und -verarbeitung",
        "kennung": "IN2273",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "The participants will learn about the different challenges of an interventional setup compared to a diagnostic scenario. Key concepts of interventional imaging and image processing will be presented and participants learn how to apply these in practice. Example industry and research applications will be demonstrated in order to allow the students to gain an overview on the state-of-the-art.\nAfter successful completion of this module, participants understand the key concepts of interventional imaging and image processing. They remember minimally invasive procedures and can analyze challenges associated to imaging and image visualisation. Participants are able to analyze and evaluate state-of-the-art algorithms for digital imaging and image processing and can create new methods on top of these.",
        "inhalt": "1. Clinical motivation (interventional radiology, neuroradiology, and cardiology)\n2. Interventional imaging modalities\n3. Basics of x-ray imaging\n4. Angiographic imaging in 2D\n5. Angiographic imaging in 3D: CT basics, CT reconstruction\n6. Current topics (cardiac imaging, perfusion imaging, metal artifact reduction, etc.)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1334293&pOrgNr=1",
        "name": "Introduction to Deep Learning",
        "kennung": "IN2346",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of this module, students will have acquired theoretical concepts behind neural networks, and in particular Convolutional Neural Networks, as well as experience on solving practical real-world problems with deep learning. They will be able to solve tasks such as digit recognition or image classification.",
        "inhalt": "- Introduction to the history of Deep Learning and its applications.\n- Machine learning basics 1: linear classification, maximum likelihood\n- Machine learning basics 2: logistic regression, perceptron\n- Introduction to neural networks and their optimization\n- Stochastic Gradient Descent (SGD) and Back-propagation\n- Training Neural Networks Part 1:\nregularization, activation functions, weight initialization, gradient flow, batch normalization, hyperparameter optimization\n- Training Neural Networks Part 2: parameter updates, ensembles, dropout\n- Convolutional Neural Networks, ConvLayers, Pooling, etc.\n- Applications of CNNs: e.g., object detection (from MNIST to ImageNet), visualizing CNN (DeepDream)\n- Overview and introduction to Recurrent networks and LSTMs\n- Recent developments in deep learning in the community\n- Overview of research and introduction to advanced deep learning lectures."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1605334&pOrgNr=1",
        "name": "Introduction to Informatics for Students of Management & Technology – Programming Lab Course",
        "kennung": "IN8027",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of the module, participants are acquainted with the programming language Java and master programming in the small. Participants are able to apply the contents taught in the module IN8005 (foundations of database-systems and SQL, foundations of object-oriented programming and Java, foundations of algorithms and data structures) for solving small to medium sized programming problems in their professional field and/or for later scientific work. Participants are acquainted with and can apply the basics of a modern agile software development process (typically Scrum) for the development of solutions to these problems and are able to collaborate with informatics professionals in analyzing and evaluating the complexity of possible software solutions for professional problem settings.\nStudents are able to complete the tasks of their project in a team environment. They solve the given task by constructively and conceptually collaborating in a team. They are able to integrate involved persons into the various tasks considering the group situation. Furthermore, the students are able to conduct solution processes through constructively and conceptually acting in a team.",
        "inhalt": "• Object-oriented software development with Java\n• SQL integration in Java\n• Agile software development processes (typically Scrum)\n• Revision control systems (typically GIT)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3277242&pOrgNr=1",
        "name": "Introduction to Programming",
        "kennung": "CIT5230000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of the module, participants understand the essential concepts of computer science on a basic, practical, but scientific level. Participants can solve manageable algorithmic problems and implement basic applications in Java or a similar object-oriented language on their own. They understand the underlying concepts and models and are therefore able to acquire skills in other object-oriented programming languages on their own.",
        "inhalt": "• Introduction\n- Basic notions: Problem – algorithm – program\n- Imperative programming constructs\n• Object-oriented programming\n- Objects, classes, methods\n- Inheritance, abstract classes, and interfaces\n- Polymorphism\n- Generics\n• Functional programming\n- Iterators and collections\n- Lambda expressions and streams\n• Data structures\n- Numbers, strings, arrays\n- Lists, stacks, queues, trees\n• Recursion\n- Binary search\n- Patterns of recursion\n• Syntax and semantics\n- Syntax of programming languages: regular expressions and context-free grammars\n- Semantics of programs: control-flow graphs\n• Programming in the large (perspectives)\n• Graphical user interfaces\n• Concurrency and Threads"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=936739&pOrgNr=1",
        "name": "Introduction to Surgical Robotics",
        "kennung": "IN2292",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer lernen die Grundzüge des Einsatzes von Robotik in chirurgischen Anwendungen:\n+ Abschätzung, unter welchen Voraussetzungen Robotik entscheidende Vorteile haben kann\n+ Integration der Robotik in bestehende chirurgische Arbeitsabläufe\n+ Vermittlung eines fundierten Basiswissens über die Funktionsweise, Auslegung, Spezifikation und Integration von Robotik-Systemen\n+ Konzeption und Modellierung von Lösungen für identifizierte Probleme mit Methoden der Robotik\nZentrale Inhalt ist neben diesen medizinischen und technischen Grundlagen die Definition eines klinischen Projekts mit der Zielsetzung, durch den Einsatz von Robotik bestehende chirurgische Anwendungen zu verbessern. Dieser Kurs verbindet die Übermittlung der Grundlagen mit der Möglichkeit, kreative Ideen zu modellieren und zu implementieren.",
        "inhalt": "Anwendungsorientierter Kurs, der mit der Darstellung der klinischen Anwendungen beginnt (in Kooperation mit einer Klinikabteilung). Hierbei werden sowohl konventionelle Techniken als auch Roboter-unterstützte Methoden präsentiert und gegenübergestellt. Im zweiten Schritt werden die theoretischen Grundlagen der (Medizin)-Robotik vermittelt. Schließlich soll dieses neue Wissen angewendet werden, um unter Einsatz von Roboter-unterstützten Methoden innovative Lösungen für medizinische Problemstellungen zu entwickeln.\n\nVorlesung:\n+ Grundlagen des Einsatzes von Robotik in ausgewählten medizinischen Anwendungen in der Chirurgie (Potential, Herausforderungen und Problemstellungen beim Einsatz von Robotik in der Chirurgie)\n+ Grundlagen der Robotik:\n++ System\n++ Kinematik\n++ Dynamik\n++ Mechanik\n++ Elektronik\n++ Sensorik\n++ Regelung\n++ Software-Infrastruktur\n++ Sicherheit\n++ Workflow\n++ Kalibrierung und Registrierung\n++ Benutzerschnittstelle\n+ Analyse derzeitiger Operationstechniken und aktueller Trends aus der Chirurgie und aus verwandten Bereichen (z.B. Industrie, Servicerobotik, Automobil) und Ableitung von Innovationspotential für zukünftige robotisierte Applikationen in der Chirurgie\n++ Wie werden die Verfahren derzeit durchgeführt?\n+++ Arbeitsablauf (Zeitbedarf?)\n+++ Datenaufzeichnung, „Digitale Lücken“ (Kontrolle, Wiederholbarkeit?)\n+++ Verwendete Werkzeuge\n+++ Herausforderungen (was macht den Eingriff anspruchsvoll?)\n++ Welche Technologien sind „reif“?\n+++ Sensorik, medizinische Bildgebung, Aktuatoren, Lernverfahren\n++ Entwicklung neuer robotisierter Anwendungen in der Medizin\n+++ Aufwandsabschätzung\n+++ Erste Schritte\n+++ Projektplan\n\nProjektarbeit (3-4 Teamaufgaben in Teams von 3-5 Studenten):\n++ Ideenfindung, Beschreibung der medizinischen Anwendung und des Problems, sowie des geplanten Entwicklungsvorhabens,\n++ Entwurf eines Projektplans und Analyse der Machbarkeit sowie\n++ Implementierung eines Funktionsmusters und Präsentation von diesem (inkl. Ausarbeitung eines Projektplans – max. 15 Seiten)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3126247&pOrgNr=1",
        "name": "Inverse Problems in Medical Imaging",
        "kennung": "IN2409",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "The students will learn basic mathematical tools to analyze and solve inverse problems. The aim of this lecture is to provide sufficient understanding of the underlying inverse problems and strategies for solving these problems. At the end of the lecture, the students will be able to theoretically and practically analyze, experimentally design and implement the required algorithms to solve various inverse problems in medical imaging.",
        "inhalt": "Introduction and examples of inverse problems; vector spaces; definition of inverse problem; well-posedness according to Hadamard; injection, surjection, bijection of functions; Null-space and range space of operators; linear inverse problems; eigenvalue problem; decomposition theorem; singular value decomposition; inverse methods based on length; least squares and determinancy; minimum length; the generalized inverse; nonlinear inverse problems; regularization methods and comparison of different classes; Computed Tomography; Radon transform; backprojection; Fourier-slice theorem; filtered backprojection; deconvolution methods."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456924&pOrgNr=1",
        "name": "IT und Unternehmensberatung",
        "kennung": "IN2079",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage IT-Beratungsprozesse inhaltlich und in ihren Wechselbeziehungen zu analysieren. Sie können die grundsätzlichen strategischen Entscheidungen im IT-Management und deren Implikationen bewerten. Die Teilnehmer verstehen typische Probleme der praktischen Umsetzung der IT-Beratung, wie z.B. die Definition einer IT-Strategie oder die erfolgreiche IT-Organisation, und können adäquate Lösungsansätze entwickeln und anderen gegenüber rechtfertigen.",
        "inhalt": "Das Modul verschafft den Studierenden einen Überblick über die grundsätzlichen Strukturen und aktuellen Problemstellungen der IT-Beratung. Konzepte wie z.B. IT-Strategie, IT-Governance, IT-Organisation und Prozesse werden vorgestellt. Ferner führt das Modul die Studierenden in das IT-Controlling, IT-Kosten- und IT-Wertemanagement ein. Alle Themen werden anschaulich anhand praxisrelevanten Fallbeispielen erläutert."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1200390&pOrgNr=1",
        "name": "IT-Recht in der öffentlichen Verwaltung: E-Government-Gesetz, IT-Sicherheit und Auftragsvergabe",
        "kennung": "IN9046",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, die grundlegenden Rahmenbedingungen des Einsatzes von IT in der öffentlichen Verwaltung zu benennen und wichtige Begriffe des IT-Rechts in der öffentlichen Verwaltung zu definieren. Darüber hinaus sind die Studierenden in der Lage, die wesentlichen Regelungen des E-Government-Gesetzes, des Rechts der IT-Sicherheit und des Rechts der IT-Auftragsvergabe zu verstehen und anzuwenden.",
        "inhalt": "- Grundlagen des IT-Rechts in der öffentlichen Verwaltung\n- E-Government-Gesetz (BayEGovG, Bundes-EGovG Bund und De-Mail-Gesetz)\n- Rechtsgrundlagen im Bereich IT-Sicherheit (Grundzüge BSI-Gesetz, TKG und TMG, Verhältnis zum BayDSG)\n- Rechtsgrundlagen der IT-Auftragsvergabe (GWB, VOL/A, VgV)\n- Besondere Vertragsbedingungen bei IT-Verträgen der öffentlichen Verwaltung (EVB-IT)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1446511&pOrgNr=1",
        "name": "Lambda Calculus",
        "kennung": "IN2358",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After the successful completion of this module, students will have an\nin-depth understanding of lambda calculus as a model of programming languages. They will be able to\n- prove fundamental properties of reduction in lambda calculus,\n- model common programming language data types and control constructs in lambda calculus,\n- translate between lambda terms and combinators,\n- infer a principal type of an untyped term,\n- translate between lambda terms and proofs.",
        "inhalt": "The module introduces students to lambda calculus, the foundation of many programming languages, in particular functional ones. The first half of the course introduces untyped lambda calculus. The focus is on the detailed study of the reduction rules of lambda calculus, their computational behaviour, and how to define evaluation strategies like call-by-value and call-by-name. It is shown that lambda calculus is a Turing-complete programming language. The second part of the course is dedicated to typed lambda calculi. It covers type systems prevalent in functional languages and the relationship between type systems and logic, the Curry-Howard correspondence."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2805476&pOrgNr=1",
        "name": "Legal Data Science and Informatics",
        "kennung": "IN2395",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After completing this module, students will be able to:\n- explain knowledge representation and argumentation formalisms used in AI&Law\n- explain the application of techniques from statistics, applied machine learning, and natural language processing to legal data\n- examine and critique experimental work and systems in legal data science/informatics\n- explain the planning, implementation, and evaluation of legal data science/informatics research work",
        "inhalt": "The way lawyers, Judges, corporate legal counsel, government agencies, and businesses engage with legal systems, requirements, and processes is increasingly influenced by technology. Prominent areas of practical interest are the intelligent search and analysis of legal documents, the role of machine learning in supporting legal decision making, and modeling legal processes using expertise encoded in formal rule systems. This module provides an in-depth overview of landmark research and the state of the art in applying data science and artificial intelligence methods to tasks and problems arising in and around the public and private practice of law.\n\nLegal decision making, legal data, and legal documents in particular challenge many mainstream modeling and analysis techniques. Hence, the module is intended to be taken by (1) broadly interested students from technical majors interested in challenging interdisciplinary work, and (2) political science / business / law students seeking to enhance their understanding of how new technologies can shape their field.\n\nThe module consists of a mix of lectures, discussion sessions, and small practical workshops following a thematic progression:\n- Introduction to legal systems, legal reasoning, and the impact of AI on legal practice\n- Basics of machine learning and natural language processing (NLP) (intended as a primer/refresher for nontechnical students; largely tailored to specific legal applications contexts)\n- Case- and rule-based formalisms of legal reasoning\n- Legal data analytics, including case outcome prediction and empirical legal studies\n- Equal treatment imperatives and fair machine learning\n- Applications of NLP on legal text"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3501529&pOrgNr=1",
        "name": "Lernen durch Lehren: Programmierkurse an Schulen",
        "kennung": "CIT6230000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreichem Abschluss des Moduls können die Teilnehmer:\n- Begeisterung für Informatik vermitteln\n- Grundlegende Programmierkenntnisse an Menschen ohne IT-Erfahrung vermitteln\n- Digitale Präsentationstechniken und Online-Moderationsmethoden anwenden\n- Mit Menschen kommunizieren, kollaborieren und auf deren individuelle Bedürfnisse eingehen, die nicht mit der IT vertraut sind\n- Jugendlichen Selbstwirksamkeit als Vorbild vorleben\n- Die Bedeutung grundlegender IT-Fähigkeiten, Digitalisierungsfertigkeiten und Medienkompetenz vermitteln\n- Die Bedeutung von Kreativität und kritisches Denken sowie einer positiven Fehlerkultur weitergeben",
        "inhalt": "Dieser Praxis-Kurs findet vollständig virtuell statt. Teilnehmende inspirieren Schülerinnen und Schüler mit Programmierkursen auf einfachem Niveau. Durch kleine Programme und Spiele vermitteln sie Jugendlichen Einblicke in digitale Themen, stärken ihre IT-Kompetenzen und teilen ihre Leidenschaft für ihre Studienwahl. Die Teilnehmenden arbeiten in Teams und betreuen selbstständig Jugendlichen einer Schulklasse. Sie verbessern ihre Kommunikation zu IT-Themen mit Jugendlichen ohne IT-Erfahrung, wenden Präsentationstechniken an, üben Moderationsfähigkeiten und trainieren Kreativität in neuen Situationen. Die Dozierenden des Kurses bereiten die Teilnehmenden für den Einsatz vor: mit praxiserprobten und didaktisch fundierten Konzepten für Programmierkurse in unterschiedlichen Sprachen und Themen wie z.B. Scratch, HTML, Python, Bash und Swift."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2917679&pOrgNr=1",
        "name": "Level Engineering: Methoden und Werkzeuge für die Erstellung von Spielumgebungen und Level Design",
        "kennung": "IN2402",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul sind die Studierenden in der Lage ingenieurwissenschaftliche Ansätze für die Entwicklung von Spielumgebungen systematisch anzuwenden. Die Studierenden verstehen die Gestaltung von Spielumgebungen innerhalb der professionellen Prozesse in der Spieleentwicklung. Die Studierenden können Spielwelten eigenständig und strukturiert erstellen und auch bewerten. In Verbindung mit Software können eigenständig Lösungsansätze in Form von Tools für unterschiedliche Herausforderungen des Design- und Entwicklungsprozesses entworfen und umgesetzt werden.",
        "inhalt": "Spielumgebungen sind ein fundamentaler Aspekt von Spielen. Level Designer beschäftigen sich mit dem Erstellen von Spielumgebungen, in der der Spieler mit dem Spiel interagiert.\n\nIn diesem Fach „Level Engineering“ setzen sich die Studierenden mit der systematischen Anwendung ingenieurwissenschaftlicher Ansätze für die Entwicklung von Spielumgebungen auseinander. Die Studierenden lernen die Grundlagen von Level Design und 3D Nutzerschnittstellen. Anhand von aktuellen Beispielen aus industrieüblichen Spielprojekten beschäftigen sich die Studierenden mit ingenieurwissenschaftlichen Methoden und Tools für die Konzeptionierung und Entwicklung von Spielumgebungen für Computerspiele.\n\nThemenschwerpunkte sind:\n• Einführung in Level Design\n◦ Grundkenntnisse über die Rolle des Level Design im Kontext von Spieleentwicklungsprozessen, vor allem auch mit Blick auf Schnittstellen zu anderen Aspekten von Spielen und Bereiche der Spieleentwicklung.\n◦ Designprinzipien für Spielumgebungen\n◦ Balance zwischen ästhetischer Gestaltung, Gameplay und Performance\n• 3D Nutzerschnittstellen\n◦ Der Zusammenhang von Level Design und klassischen 3D Nutzerschnittstellen (Travel Techniques, Camera Control, Wayfinding, etc.)\n◦ Grundlagen von 3D Nutzerschnittstellen im Kontext von Spielumgebungen\n• Einführung in Tool Engineering für Game Engines\n• “Level Engineering”-Methoden und Tools\n◦ Dokumente in der Spieleentwicklung.\n◦ Erstellung von Prototypen für Spieleumgebungen\n◦ Die Entwicklung und Anwendung komplexer Software und Tools zur Unterstützung des Design- und Entwicklungsprozesses."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456426&pOrgNr=1",
        "name": "Logik",
        "kennung": "IN2049",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "The students understand the fundamental difference between syntax and semantics. In particular, they are able to perform proofs in a deductive system and can prove the soundness and completeness of that system w.r.t. a semantics. They understand the limitations of logic and the relationship between logic and computability. In particular they can prove the undecidability of some basic problem like validity of formulas. They can formalize problems in informatics or mathematics in logic and can solve them algorithmically using decision or semi-decision procedures like resolution.",
        "inhalt": "In the context of propositional and predicate logic the following basic notions are covered:\n- Syntax and semantics\n- Proof system and proof search\n- Soundness and completeness\n- Decidability\n- Expressiveness\n\nPossible further topics (non exhaustive):\n- Proof systems\n- Automated theorem proving\n- Verification\n- Decision procedures\n- Prolog\n- Data base theory\n- Higher-order logic\n- Set theory\n- Constructive logic\n- Fuzzy logic."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456537&pOrgNr=1",
        "name": "Machine Learning",
        "kennung": "IN2064",
        "organisation": "Department Computer Science",
        "anmerkung": "ab WS12/13 8 Credits",
        "lernergebnisse": "Nach dem Bestehen des Moduls verstehen die Teilnehmer und Teilnehmerinnen die probabilistischen Grundlagen des maschinellen Lernens und verfügen über Kenntnisse zu essentiellen Lernalgorithmen; sie sind in der Lage, bei gegebener Problemstellung geeignete Algorithmen auszuwählen, zu beschreiben und herzuleiten.",
        "inhalt": "Wahrscheinlichkeitstheorie; kNN & k-means; lineare Methoden; Bayes-Regel, MLE-Schätzer, MAP-Schätzer, Erwartungs-Maximierung, nichtlineare neuronale Netze und Fehlerpropagierung, Mixturmodelle, Stützvektormaschinen, stochastische Suche, unüberwachtes Lernen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1799629&pOrgNr=1",
        "name": "Machine Learning for Graphs and Sequential Data",
        "kennung": "IN2323",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students will be able to describe data\nmining and machine learning methods and their applicability for complex data types.\nThe students will get to know concepts for handling non-independent data in machine\nlearning models. Furthermore, the students will be able to understand, apply, and\nevaluate principles for analyzing complex data such as graphs, network data, and\ntemporal data.",
        "inhalt": "1. Introduction\n* Machine Learning, Data Mining Process\n* Basic Terminology\n\n2. Sequential Data\n* ML models for text data and temporal data\n* Autoregressive Models\n* Markov Chains, HMMs\n* Embeddings (e.g. Word2Vec)\n* Neural Networks (e.g. RNN, LSTM, ConvNets, Transformer)\n* Temporal Point Processes\n\n3. Graphs & Networks\n* Laws, Patterns\n* (Deep) Generative Models for Graphs\n* Spectral Methods\n* Ranking (e.g., PageRank, HITS)\n* Community Detection\n* Node/Graph Classification\n* Label Propagation\n* Graph Neural Networks\n* (Unsupervised) Node Embeddings\n\n4. Robustness\n* Adversarial Examples\n* Improving Robustness\n* Certifiable Robustness"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2806034&pOrgNr=1",
        "name": "Machine Learning for Regulatory Genomics",
        "kennung": "IN2393",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Gene expression refers to how cells read the information encoded in genomes. At the end of the module students are able to:\n1. Describe major steps of gene expression from accessing DNA to determining protein abundance.\n2. Describe genome-wide assays employed to assess various steps of gene expression\n3. Describe the concept of massively parallel reporter assays\n4. Describe and apply deep learning methods to perform sequence-based predictions\n5. Describe and apply the concept of model interpretation\n6. Describe and apply the concept of convolutional neural network\n7. Describe and apply the concept of transformers\n8. Apply deep learning for sequence-based modeling of a genome-wide assay. Evaluate model performance and provide biological interpretation of its application to real data.",
        "inhalt": "This is a two-part module: (1) Six lectures\nintroduce biological mechanisms, experimental assays, and computational models for regulatory genomics. The six lectures are supported with modeling exercises in python. This is followed by (2) an eight-week hands-on project.\n\nThe lectures are organized around steps of gene expression:\n- Introduction to gene regulation and sequence-based computational models of gene regulation\n- Transcriptional regulation\n- Chromatin-mediated regulation\n- RNA splicing\n- RNA modification and degradation\n- Translation\n\nOver these lectures, computational methods are introduced including:\n- Fitting procedures of deep neural network\n- Convolutional Neural Networks\n- LSTM and transformers\n- Embeddings for sequence data\n- Multi-task learning and transfer learning\n- End-to-end learning\n- Analytical and visualisation techniques for model interpretation"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2808442&pOrgNr=1",
        "name": "Machine Learning for 3D Geometry",
        "kennung": "IN2392",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of this module, students will have gained advanced knowledge of theoretical concepts behind machine learning techniques for 3D geometric data, including deep learning architectures for both discriminative and generative tasks on 3D shapes and scenes. In addition to the theory, students are introduced to practical implementations of aforementioned approaches and familiarize themselves with them by execution in real-world applications.",
        "inhalt": "Geometric Foundations; Recap of machine learning and graphical models; Shape descriptors, shape similarity, shape segmentation and labeling; Shape modeling, reconstruction, and synthesis; Deep learning for multi-view, volumetric, point cloud, and graph data"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1695463&pOrgNr=1",
        "name": "Masterpraktikum Bioinformatik",
        "kennung": "IN2370",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme am Modul sind die\nStudierenden in der Lage, sich eigenständig und\nsystematisch im Team in ein klar umrissenes\nForschungsthema einzuarbeiten, das daraus\nresultierende Forschungsprojekt im Detail\nsowohl inhaltlich zu spezifizieren als auch\nzeitlich zu planen, dieses dann dementsprechend\numzusetzen (ggf. Anpassungen am Plan\nvorzunehmen) und die erzielten Ergebnisse zu\nbewerten und zu diskutieren sowie die Resultate\nzu präsentieren.\nDie Studierenden können selbständig und in\nGruppen die Thematik und den biologischen bzw.\nbiotechnologischen Hintergrund eines\nForschungsthemas (wie z.B. Proteinstruktur- und\nFunktionsvorhersage, Epigenomics,\nTrankriptomics, Analyse von NGS-Daten,\nVorhersage und Analyse regulatorischer\nNetzwerke, genetisch bedingte Krankheiten)\nmithilfe eines aktuellen Literaturstudiums und\nVorträgen erarbeiten. Sie können daraus ein\nkonkretes Forschungsprojekt spezifizieren, die\nzugehörigen Meilensteine samt Zeitplan\ndefinieren, so dass diese in einem Team von 3-5\nMitgliedern in der vorgegeben Zeit bearbeitet\nwerden können. Die Studierenden können die für\ndie Lösung benötigten bioinformatischen\nMethoden (wie z.B. das Mapping, differentielle\nExpression, Splicing Detection, Enrichment\nAnalysis und Pathway Mapping für NGS) und\nexistierende Softwaretools bzw.\nSoftwareplattformen recherchieren, bewerten,\nauswählen, anwenden und in der Regel an die\ngegebenen Anforderungen anpassen bzw. neu\nentwerfen und darauf aufbauend, ein\nProgrammpaket zur Lösung entwickeln. Die\nStudierenden können die erzielten Ergebnisse\nevaluieren, zugehörige Gold-Standards\nauswählen, die Ergebnisse daran validieren\nsowie diese Resultate in einem Vortrag\npräsentieren und im Rahmen eines\nwissenschaftlichen Diskurses diskutieren und\ndiese dann im Stile einer wissenschaftlichen\nPublikation zusammenfassen.",
        "inhalt": "Der thematische Schwerpunkt wird jeweils vom\nausrichtenden Lehrstuhl vorgegeben. Er\norientiert sich an aktuellen Forschungsthemen\nder Lehrstühle der Bioinformatik (z.B. -omics\nDatenanalyse, System-biologie, Analyse und\nInterpretation biologischer Netzwerke, Analyse\nvon Proteinstruktur- und Proteinfunktionsdaten,\ngenetisch bedingte Krankheiten) und an\naktuellen Forschungsfragestellungen der\nBioinformatik (z.B. der Sequenzierung des\nmenschlichen Genoms, dem Aufkommen neuer\nTechniken wie DNA-Chips oder der neuen\nGeneration von Genom- und Transkriptom-\nSequenzierung und der Veröffentlichung neuer\numfassender Datensätze wie ENCODE,\nEpigenomics Roadmap und TCGA). Themen sind\nauch die Vorbereitung und Beteiligung an\ninternationalen Bioinformatikwettbewerben wie\nCASP (Proteinstrukturvorhersage), BioCreative\n(Text Mining), DREAM (Analyse von Netzwerken,\nExpression und komplexer Krankheiten)."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2990448&pOrgNr=1",
        "name": "Masterpraktikum Computational Science and Engineering",
        "kennung": "IN2397",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden sind in der Lage, in einem anspruchsvollen Teilgebiet des Wissenschaftlichen Rechnens Simulationsanwendungen und –Pipelines methodisch sauber zu entwickeln. Hierzu gehört, dass sie die unterschiedlichen Phasen der Simulationspipeline im Wissenschaftlichen Rechnen durchlaufen und bearbeiten können (Modellierung, Diskretisierung, numerische Löser, Software-Entwicklung, parallele Implementierung und Optimierung, Simulationsläufe und Auswertung der Ergebnisse).\nSie können anwendungsspezifische Methoden und Systeme einsetzen, die dem aktuellen Stand der Technik entsprechen.\n\nSie sind in der Lage, Simulationsaufgaben im Team zielorientiert zu bearbeiten und sich dabei gewinnbringend zu verständigen. Sie können im Team Teilaufgaben identifizieren, delegieren und in das gemeinsame Projekt integrieren. Dazu gehört, dass sie verschiedene Meinungen und Ansichten diskutieren und berücksichtigen können. Sie können die Korrektheit, Reproduzierbarkeit und Vertrauenswürdigkeit der erzielten Ergebnisse gemäß anerkannter Best Practices der Wissenschaftlichen und allgemeinen Öffentlichkeit diskutieren und bewerten.\n\nSie beherrschen die Arbeitstechniken, um das Vorgehen innerhalb einer Simulationspipeline korrekt zu dokumentieren. Sie sind in der Lage, die Ergebnisse auf den wesentlichen Kern reduziert in anschaulicher und verständlicher Weise einem Fachpublikum zu präsentieren.",
        "inhalt": "- Umsetzung bzw. Einsetzen einer größeren Simulations-Softwareanwendung oder -teilanwendung im Team\n- Anwendungsspezifische Methoden und Systeme nach aktuellem Stand der Technik in einem interdisziplinären Umfeld\n- Postprocessing und Auswertung der erzielten Simulationsergebnisse\n- Diskussion der Korrektheit und Verlässlichkeit der erzielten Ergebnisse; Sicherstellung der Reproduzierbarkeit von Ergebnissen.\n- Techniken zur Dokumentation und Präsentation von Ergebnissen bzw. Zwischenergebnissen bei der Anwendungsentwicklung\n\nDas Praktikum wird von verschiedenen Dozent*innen angeboten, so dass die Fachlichkeit der Anwendung aus deren jeweiligem Forschungsgebiet stammt."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458554&pOrgNr=1",
        "name": "Master's Thesis (CSE)",
        "kennung": "IN2192",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After the successful completion of a Master's Thesis the participants are able to quickly acquaint themselves with topics in Computational Science and Engineering. Given a concrete problem statement, they are able to analyze and evaluate the essential aspects in the field of CSE, necessary for a successful solution. They are able to span, describe and categorize the space of possible solutions, and to choose a well-founded solution on the basis of given or self-developed criteria. They are able to create a solution and to describe and discuss it concisely.",
        "inhalt": "Under guidance of a supervisor, participants get familiar with a topic of CSE. They are given a problem statement, which is kept rather general, i.e., no details have been specified. They investigate and evaluate different approaches to a solution, and choose one which they implement. The accompanying written document captures the essential aspects of the topic, discusses the different approaches to solution, justifies the choice of the way towards a solution, and describes the latter. This module is being offered by all chairs. The chairs choose well-suited topics from their area of expertise, usually a small part of their ongoing research projects. They assist students in acquiring scientific abilities, in exploring an aspect of a topic in depth, and in answering an isolated and yet general problem statement with scientific means, based on the preceding exploration."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=936744&pOrgNr=1",
        "name": "Medical Augmented Reality",
        "kennung": "IN2293",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "In-situ visualization in medical augmented reality (AR) enables the registered view of virtual data such as a 3D CT scan, with a video view of the real anatomy of a patient. Data can be aligned with the required accuracy such that surgeons do not have to analyze data on an external monitor in the operating room. Instead, surgeons get a direct view onto and into the patient. Mental registration of medical imagery with the operation site is not necessary anymore. Augmenting medical images and virtual surgical instruments within the body provides the most intuitive way to understand the patient’s anatomy within the region of interest. This allows for the development of completely new generations of surgical navigation systems. Our Chair for Computer Aided Medical Procedures (CAMP) is one of the strongest and leading research centers for medical AR world-wide, featuring the world’s most accurate video-see-through AR system based on a head-mounted-display. Also, CAMP has developed the world’s first AR-enabled C-arm, CamC, which has already been tested in clinical trials in Munich. The objectives of this lecture are to have students learn the theoretical basics and practical aspects of augmented reality solutions related to the medical field. The content of the lectures are outlined below.",
        "inhalt": "Lecture:\n+ Basics of intra-operative imaging and navigation.\n+ Camera calibration using multi-view approaches.\n+ Different tracking technologies including: RGB and infrared cameras, optical trackers, Kinect.\n+ Projective geometry basics including transformations and reconstruction.\n+ Review of multimodal registration, visualization and user interfaces.\n+ Real-examples using head mounted display (HMDs), Camera augmented mobile C-arm (CamC) and, intraoperative gamma probes coupled with AR capabilities, AR magic mirror for anatomy education.\n+ Includes visits to the Navigated Augmented Reality Visualization Systems Laboratory, Chirurgische Klinik und Poliklinik Innenstadt; and IFL: Interdisziplinäres Forschungslabor, Klinikum rechts der Isar.\n\nExercises (every two weeks):\n+ Using MatLab or C++\n+ Implementation of lecture course topics with students in groups of 2."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=557078&pOrgNr=1",
        "name": "Medizintechnik Entrepreneurship",
        "kennung": "IN9038",
        "organisation": "Department Computer Science",
        "anmerkung": "Ab SS 2011 4 statt 2 Credits",
        "lernergebnisse": "Nach Besuch dieses Moduls sind die Teilnehmer in der Lage einen Business Plans im Bereich Medical Imaging zu erstellen. Sie haben einen Überblick über spezielle Richtlinien, insbesondere hinsichtlich Soft- und Hardwarezertifizierung und verstehen Grundlagen zur Teambildung für Unternehmensgründung, zur Patentierung, Marketing, Vertrieb, und Finanzkonzepte für Unternehmen im Bereich Medical Imaging.",
        "inhalt": "- Grundlagen zu Lebenswissenschaften und Medical Imaging\n- Qualifikation eines Medical Imaging Entrepreneur\n- Notwendige Kriterien eines Start-up Unternehmens\n- Grundlagen für Patentierung, Marketing, vertrieb, Finanzen\n- Grundlagen zur Erstellung eines Business Plans\n- Unternehmensfinanzierung\n- 2 Teamaufgaben: (a) Ideefindung, Beschreibung und Entwicklungsvorhaben, (b) Entwurf eines kleinen Business Plans (max. 20 Seiten)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=756539&pOrgNr=1",
        "name": "Middleware und verteilte Systeme",
        "kennung": "IN2258",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "1. Understand common pitfalls that determine the development of distributed applications.\n2. Apply basic programming abstractions for building distributed applications (e.g., sockets, messaging, remote procedure call).\n3. Understand characteristics and properties of common middleware abstractions.\n4. Apply higher-level middleware abstractions for building distributed applications (e.g., publish/subscribe, transactions).\n5. Evaluate the applicability of common middleware abstractions in building distributed application architectures.\n6. Understand patterns applicable for implementing middleware abstractions.",
        "inhalt": "A \"middleware system\" is a programming abstraction and constitutes a set of services that aim at facilitating the development of distributed applications in heterogeneous, networked environments. The primary objectives of middleware are to foster application portability, distributed application interoperability, and facilitate software system integration. At least conceptually, the \"middleware layer\" comprises a layer below the application and above the operating system and network substrate. This course introduces basic distributed system principles and middleware systems, aims at identifying the principles underlying the use of middleware systems, and characterizes common middleware paradigms and abstractions. The course describes a large variety of Middleware systems, starting with original Middleware technologies (e.g. DCE, CORBA, DCOM); going to more modern and lightweight solutions (e.g. Java RMI, J2EE, MQ-Series, JMS, Web Services); and finally finishing with state-of-the-art and large-scale technologies (e.g. Apache Thrift, Protocol Buffers, Avro). Examples, case studies, as well as Middleware implementations are studied to achieve a better understanding of the topic.\nCourse outline:\n1. Introduction\n2. Communication basics:\na. Protocol design\nb. Socket programing\nc. External data representation\nd. Remote procedure calls & remote invocations\n3. Middleware foundations\na. Roots, origins, historical development, principles\nb. Role of standards, standardization processes\nc. Reference models (e.g., OMA, RMODP, SOA)\nd. Interoperability, system integration, multi-tiered systems\n4. Middleware paradigms\na. Distributed computing (procedural paradigm, failure semantics)\nb. Distributed objects (object-oriented paradigm)\nc. Messaging Patterns (e.g., request/reply, messaging, publish/subscribe)\nd. Queuing theory/networks\ne. Service-oriented architecture (SOA) and services\nf. Event-driven architecture (EDA))\n5. Middleware systems\na. Naming and directory services\nb. Web Services\nc. Messaging systems\nd. Application servers\n6. Case studies and examples\n7. Middleware implementation techniques"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460548&pOrgNr=1",
        "name": "Mobile verteilte Systeme",
        "kennung": "IN2098",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden kennen die Grundlagen der mobilen verteilten Systeme (MVS). Sie sind in der Lage, die Grundlagen, Probleme und Lösungen der MVS zu verstehen und die aktuellen Entwicklungen einzuschätzen. Sie sind zudem in die Lage, die erworben Grundlagenkenntnisse direkt auf neue Entwicklungen im Bereich der drahtlosen Kommunikation (inklusive ihrer Protokolle) und dem Bereich der mobilen Betriebssysteme (inklusive wichtiger Apps) anzuwenden.",
        "inhalt": "Mobilität, Drahtlose Kommunikation, Mobile Betriebssysteme, Gesamtarchitekturen, Konzepte, Mechanismen,\nVerfahren und deren Bewertung"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456482&pOrgNr=1",
        "name": "Model Checking",
        "kennung": "IN2050",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Successful participation enables students to\n- explain the role of model checking for ensuring hardware and software quality\n- give formal models of simple hardware and software systems\n- write formal specifications of simple safety and liveness properties using temporal logic\n- explain algorithms for checking if a program satisfies a given specification and apply them to small examples\n- understand and explain techniques for palliating the state-explosion problem",
        "inhalt": "The course teaches the fundamentals of Model Chekcing. Topics include:\n- Representation of hardware and software systems using formal models of computations, e.g., transition systems, pushdown systems, Kripke structures, finite and infinite state automata.\n- Representation of specifications using formal logics and automata, e.g., linear and branching time temporal logics, automata on finite and infinite.\n- Decidability and complexity of various classes of formal models and specifications, e.g., complexity of finite state model checking for linear and branching time logics.\n- Techniques for palliating the state-explosion problem e.g., binary decision diagrams, partial-order reduction, abstraction.\n- Industrial application of model checking, e.g., discovery of concurrency bugs, verification of systems software.\n- Practical experience in applying model checking tools, e.g., Spin, Blast, CBMC."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1508039&pOrgNr=1",
        "name": "Modellbildung und Simulation (Fokus Analysis)",
        "kennung": "IN2366",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme am Modul verstehen die Studierenden die Grundkonzepte der mehrdimensionalen Analysis und können sie auf beispielhaft gegebene Probleme anwenden. Sie sind in der Lage, für eine verbal vorgetragene Aufgabenstellung formale (mathematische oder informatische) Modellkonzepte zu entwickeln sowie zu bewerten und Strategien zur Simulation, also zur rechnergestützten Lösung dieser Modelle, auszuwählen und dann auch erfolgreich einzusetzen. Sie haben exemplarisch wichtige Modellklassen kennen gelernt und können für einfache Szenarien eigene Lösungsverfahren entwickeln.",
        "inhalt": "- Einführung in die Analysis mehrerer Veränderlicher (partielle Ableitungen, partielle Differenzialgleichungen, Integration)\n- Einführung in die mathematische Modellierung (Begriffsbildung, Anwendungsbeispiele, Herleitung von Modellen, Analyse von Modellen, Klassifizierung von Modellen, Betrachtungsebenen und Hierarchie)\n- Diskrete Modellierung und Simulation (Entscheidungsmodelle: Spiele, Strategien, Wahlen; Reihenfolgeprobleme: Scheduling; Diskrete Ereignissimulation: Verkehr in Rechensystemen; Neuronale Netze)\n- Kontinuierliche Modellbildung und Simulation (Populationsdynamik: Modelle und ihre numerische Behandlung; Regelungstechnik: Deterministische und Fuzzy Logic Ansätze; Verkehrsfluss: Modellierung über kontinuierliche Größen; Wärmeleitung: Modell und numerische Lösung)\n- Modellierung im Software-Entwurf (optional; grundlegende Konzepte, Beschreibungstechniken, Methodik)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=485660&pOrgNr=1",
        "name": "Modellierung und Entscheidungsunterstützungssysteme in der Umweltinformatik",
        "kennung": "IN2208",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Studierende verstehen\n- Umweltprobleme und Anforderungen an computerunterstützte Lösungen\n- Repräsentation von Wissen über ökologische und Umweltsysteme\n- Modellierungsmethoden und -systeme, insbesondere aus der Künstlichen Intelligenz, sowie deren Möglichkeiten und Grenzen\n- Formalisierung von Anwendungsaufgaben (Situationsanalyse, Therapie-Generierung, ...)\n- Grundlagen und Architektur von Umweltentscheidungsunterstützungssystemen\n- Algorithmen modellbasierter Problemlöser\n- Beispiele von Modellen und Anwendungssystemen\n\nSie sind in der Lage,\n- Umweltsysteme und Anwendungsaufgaben systematisch zu analysieren\n- Modellierungs- und Problemlösungsansätze zu bewerten und auszuwählen\n- Modelle einfacher Zusammenhänge in Umwelt und Ökologie zu erstellen\n- Anwendungsbezogene Umweltentscheidungsunterstützungssystem zu entwerfen",
        "inhalt": "- Das Thema\n- Grundlagen\n++ Begrifflichkeit (ökologische Systeme, Umwelt, ...)\n++ Umweltprobleme und -management\n++ Ziele und Nutzen der Modellierung\n- Modellierung\n++ Konzepte und Formalismen der Modellierung Black-box-Modelle, reduktionistische, kompositionale Modellierung\nStruktur von Modellen\n++ Modellierungsformalismen und deren Bewertung\n++ Numerische und qualitative Modellierung\n++ Zeitliche und räumliche Modellierung\n++ Differentialgleichungen, Einflußgraphen, konzeptuelle Modellierung\n++ Modellierungsprozeß\n++ Modelle ausgewählter Beispiele\n- Umweltentscheidungsunterstützungssysteme\n++ Architektur und Softwarekomponenten von Umweltentscheidungsunterstützungssystemen\n++ Empiriegestützte Verfahren\n++ Regelbasierte und fallbasierte Verfahren\n++ Modellbasierte Verfahren\n++ Beispiele von Umweltentscheidungsunterstützungssystemen\n- Einsatzsapekte\n++ Validierung von Modellen und Umweltentscheidungsunterstützungssystemen\n++ System-Benutzer-Interaktion\n- Herausforderungen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456926&pOrgNr=1",
        "name": "Modellierung verteilter Systeme",
        "kennung": "IN2080",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer kennen die wesentlichen Grundbegriffe zu Methoden der Spezifikation, Modularisierung, Abstraktion, Verfeinerung und Verifikation nebenläufiger, verteilter kooperierender Systeme. Sie wissen um die Bedeutung sowohl der Anforderungsdefinition (Spezifikation) als auch der Korrektheitsbeweise (Verifikation) von Implementierungen. Sie beherrschen fundamentale Techniken und Methoden und sind in der Lage, eine Vielzahl existierender Modellierungs- und Beschreibungstechniken zielgerichtet einzusetzen und gegeneinander abzugrenzen.",
        "inhalt": "Fast alle Rechner und Softwaresysteme sind verteilt und vernetzt bzw. laufen in irgendeiner Form vernetzt ab. Ein große Zahl dieser Systeme sind nicht nur untereinander verteilt und vernetzt, sondern sind auch mit physikalischen und technischen Prozessen verbunden und weisen dementsprechend vielfältige Benutzungsschnittstellen auf. Für die systematische Entwicklung moderner Softwaresysteme sind Themen wie Nebenläufigkeit, Vernetzung, Interaktion und Koordination von Systemen somit zentral. Die Modellierung und systematische Behandlung derartiger Systeme bringt eine Vielzahl von Fragestellungen, Phänomenen und Schwierigkeiten, die deutlich über die Behandlung sequentieller, nichtinteraktiver Systeme hinausgehen. Die Vorlesung präsentiert grundsätzliche Konzepte und Modelle für verteilte Systeme sowie Möglichkeiten, diese zu beschreiben, zu spezifizieren, zu strukturieren, ihre Eigenschaften zu analysieren und schließlich auch zu verifizieren. Die Inhalte der Vorlesung behandeln speziell Fragen und Ansätze der Modellierung verteilter Systeme, der gängigen Modelle und ihrer Theorien, Strukturen und Zusammenhänge. Es werden folgende Inhalte vermittelt:\n- Nebenläufige, verteilte, kooperierende Systeme: Grundbegriffe und wesentliche Eigenschaften\n- Systeme als Zustandsmaschinen\n- Funktionale Beschreibung von Systemkomponenten\n- Struktur- und Verteilungssicht\n- Prozesse als Abläufe verteilter Systeme\n- Verfeinerung von Systemen\n- Nachrichtensynchrone Systeme"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456362&pOrgNr=1",
        "name": "Modelling and Simulation",
        "kennung": "IN2010",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme am Modul sind die Studierenden in der Lage, für eine verbal vorgetragene Aufgabenstellung formale (mathematische oder informatische) Modellkonzepte zu entwickeln sowie zu bewerten und Strategien zur Simulation, also zur rechnergestützten Lösung dieser Modelle, auszuwählen und dann auch erfolgreich einzusetzen. Sie haben exemplarisch wichtige Modellklassen kennen gelernt und können für einfache Szenarien eigene Lösungsverfahren entwickeln.",
        "inhalt": "- Einführung in die mathematische Modellierung (Begriffsbildung, Anwendungsbeispiele, Herleitung von Modellen, Analyse von Modellen, Klassifizierung von Modellen, Betrachtungsebenen und Hierarchie)\n- Diskrete Modellierung und Simulation (Entscheidungsmodelle: Spiele, Strategien, Wahlen; Reihenfolgeprobleme: Scheduling; Diskrete Ereignissimulation: Verkehr in Rechensystemen; Neuronale Netze)\n- Kontinuierliche Modellbildung und Simulation (Populationsdynamik: Modelle und ihre numerische Behandlung; Regelungstechnik: Deterministische und Fuzzy Logic Ansätze; Verkehrsfluss: Modellierung über kontinuierliche Größen; Wärmeleitung: Modell und numerische Lösung)\n- Modellierung im Software-Entwurf (optional; grundlegende Konzepte, Beschreibungstechniken, Methodik)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1506871&pOrgNr=1",
        "name": "Moderne Techniken für die Shader-Entwicklung und Bildsynthese",
        "kennung": "IN2363",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme am Modul sind die Studenten in der Lage gezielt visuelle Effekte zu analysieren und diese mithilfe von Shadern für Spiele und andere Applikationen zu erstellen. Die erlernten Technologien umfassen Beleuchtung, Bildeffekte, Compute und fortgeschrittene Technologien wie Tessellation. Die Studenten können Shader optimieren und Gelerntes auch auf Bereiche außerhalb des Games Engineering anwenden. Sie erhalten einen tiefen Einblick in die Funktionsweisen und den Aufbau moderner Renderer und verstehen die Einordnung verschiedener Shader in die Graphics Pipeline.",
        "inhalt": "Anhand von aktuellen Beispielen wird den Studenten die plattformübergreifende Entwicklung von Shadern für Games und andere, Computergraphik fokussierte, Anwendungen erläutert. Als Entwicklungsumgebung kommen Unity3D, sowie Visual Studio zum Einsatz. Spezieller Fokus liegt hier auf:\n- Aufbau von Shadern: Vertex, Fragment, Geometry und Surface Shader\n- Verschiedene Beleuchtungsmodelle\n- Physically Based Rendering, BRDFs\n- Optimierung, Performance Analyse, Tools\n- Rendering, Graphic APIs\n- Post-Processing, Image Effects\n- Compute Shader\n- Tessellation\n- Stylized Shading\n- Volume Rendering"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4388388&pOrgNr=1",
        "name": "Multimodal Deep Learning",
        "kennung": "CIT423003",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successfully completing this module, students will be able to:\n- Understand the structure of various data modalities and know the advantages and disadvantages of using different types of feature representations.\n- Select optimal neural network architectures that leverage the inherent structure of different data types.\n- Transfer their theoretical understanding to develop multimodal models for real-world applications.\n- Critically assess current research works and emerging trends in multimodal representation learning.",
        "inhalt": "1. Types of input modalities, their structure, and representations\nMotivating questions:\nHow are different types of inputs structured?\nWhich feature representations can be used for different input types?\nHow can we transform between different representations?\n\nTopics:\n- Representations, transformations, manifold hypothesis\n- Data structure, groups, and symmetries (e.g. sets, grids, graphs, manifolds)\n- Feature representations: encodings, embeddings, feature spaces, and distances\n- Implicit neural representations and implicit kernel functions\n\n2. Architectures for different modalities\nMotivating questions:\nWhich model architectures are optimal for each type of input data and why?\nHow can those architectures utilize the structure of input data?\nIn which way are different architectures related?\n\nTopics:\n- Underlying principles of learning representation\n- From multi-layer perceptrons to convolutional neural networks\n- Increasing inductive bias with geometric deep learning: equivariant convolutions, graph neural networks\n- Architectures for sequence-based modalities: recursive neural networks and structured state space sequence models\n- From sequences to sets: transformers and set encoders\n\n3. Training signals for representation learning\nMotivating questions:\nHow to get the most out of input data and architectures?\nWhich loss functions or training strategies are used in different settings and\nhow are they related?\n\nTopics:\n- Supervised loss functions and their properties\n- Alignment-based self-supervised learning, contrastive learning and clustering\n- Reconstruction-based self-supervised learning: masked autoencoders, BERT, GPT\n- Zero- and few-shot inference\n- Parameter-efficient finetuning\n\n4. Bringing it all together: multimodal models\nMotivating questions:\nHow can the previously introduced methods be used to build multimodal models?\nWhat are the best way to combine pre-trained unimodal models?\n\nTopics:\n- Types of multimodal models\n- Combining pre-trained models: Integrating other modalities into large language models\n- Difficulties of multimodal models\n- Case studies of prominent multimodal models from different application fields\n- Open questions and future direction of research"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=457018&pOrgNr=1",
        "name": "Netzwerkalgorithmen",
        "kennung": "IN2115",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer beherrschen fundamentale Konzepte im Gebiet der Netzwerkalgorithmen. Sie sind in der Lage, grundsätzliche Netzwerke und Netzwerkparameter zu klassifizieren, und können Algorithmen für Overlaynetzwerke und verteilte Anwendungen über diese Netzwerke anwenden.",
        "inhalt": "- Modelle für verteilte Algorithmen und Datenstrukturen\n- Netzwerktheorie\n- Routing und Scheduling\n- Hashing und Caching\n- Das kontinuierlich-diskrete Prinzip\n- Zentral gesteuerte logische Netzwerke\n- Dezentrale logische Netzwerke\n- Anycasting und multicasting\n- Suchen und sortieren\n- Selbst-stabilisierende logische Netzwerke\n- Selbst-erhaltende logische Netzwerke\n- Logische Netzwerke für drahtlose Netze\n- Logische Netzwerke für Configware"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458249&pOrgNr=1",
        "name": "Netzwerke für den Zahlungsverkehr",
        "kennung": "IN2161",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Verstehen und Einschätzen der Grundlagen, Architektur und Sicherheit von Netzwerken für den nationalen und internationalen Zahlungsverkehr sowie deren rechtliche Rahmenbedingungen",
        "inhalt": "Systemarchitektur (Hardware, Software)\nProtokollschichten und Protokolle (eg. ISO 8583)\nSicherheitsarchitekturen und Sicherheitsstandards\nAuthorisierungslösungen und Signaturen\nArten von Attacken\nMobile Architekturen und deren Sicherheitskonzepte (OTA Services)\nAnwendungen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3018441&pOrgNr=1",
        "name": "Neuroprosthetics: Artificial Limbs",
        "kennung": "IN2405",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "The module aims to provide knowledge about the main aspects, methodologies and tools for the design, control, testing and evaluation of robotic prosthetic systems, for upper and lower limbs. Particular emphasis is given to methods for mechatronic design, including integration with control interfaces and sensory feedback, and the development of novel functional assessments. On the basis of this knowledge, students are able to develop novel mechatronic systems, analyze electromyographic signals to control multi degrees of freedom devices and improve standard assessments.",
        "inhalt": "The module will present the following topics:\n- History and current evolution of neuroprosthetics, emerging trends in the field, opportunities and challenges.\n- Anatomy of the upper limb, general principles associated with the production of movements and muscle synergies, main causes of upper limb amputation, overview about different level of upper extremity amputation, current challenges.\n- Upper limb and hand bionic prostheses: (1) current strategies for the development of neuroprostheses; (2) myoelectric control; (3) advanced methods: invasive and non-invasive techniques; (4) overview about interfaces and novel surgical techniques.\n- Anatomy of the lower limb and main causes of amputation: general anatomy of the upper limb, general principles associated with locomotion, main causes of lower limb amputation, overview about different level of lower extremity amputation, current challenges.\n- Lower limb bionic prostheses: (1) current strategies for the development of neuroprostheses for the restoration of walking; (2) myoelectric control; (3) advanced methods: invasive and non-invasive techniques; (4) overview about interfaces and novel surgical techniques.\n- Haptic feedback: (1) current strategies for the development of systems for the restoration of haptic feedback; (2) advanced methods: invasive and non-invasive techniques.\n- Functional assessments: current methods to evaluate the performance of neuroprostheses, Cybathlon, emerging trends in the field, opportunities and challenges"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2911533&pOrgNr=1",
        "name": "Numerische Algorithmen im Hochleistungsrechnen",
        "kennung": "IN2398",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Participants know important algorithms from various representative problems in parallel and high performance computing, in particular motivated by applications in scientific computing. They can evaluate their range of application in standard scenarios, are familiar with their basic performance features, and can also evaluate their parallel scalability.\nStudents are able to decide whether a numerical algorithm is parallelizable in an efficient way and to analyze internal data dependencies and the runtime of parallel algorithms. They understand the different ways of parallelism and are able to exploit them when writing numerical code for different architectures.\nParticipants know different parallelization strategies for solving linear systems and partial differential equations and are able to implement and evaluate them.",
        "inhalt": "The lecture discusses selected algorithms from the following classical problem settings in scientific computing (\"the seven dwarfs of HPC\"):\n- Solvers for partial differential equations (and related problems) on structured and unstructured grids (e.g. domain decomposition methods)\n- Algorithms in numerical linear algebra on sparse and dense matrices (direct and iterative solution of linear systems on HPC architectures, eigenvalue problems, etc.)\n- Particle-oriented simulation (Barnes-Hut/Fast Multipole algorithm, etc.)\n- Spectral methods (parallel fast Fourier transform, etc.)\n\nIn that context, the following approaches for optimisation and analysis of algorithms will be discussed:\n- Performance analysis and performance models (Roofline, Cache, Bulk Synchronous Parallelism)\n- Shared-memory parallelism (data dependencies, parallel loop, tasking)\n- Distributed-memory parallelism (MPI; tiling, blocking and partitioning methods)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=454055&pOrgNr=1",
        "name": "Numerisches Programmieren",
        "kennung": "IN0019",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmenden verstehen die wesentlichen Grundsätze numerischen Programmierens, kennen die wichtigsten elementaren numerischen Algorithmen (z.B. Gauß-Elimination, QR-Algorithmen, Neville-Algorithmen, Jacobi und Gauß-Seidel-Algorithmen, Newtonverfahren), die für Aufgabenstellungen aus der Informatik relevant sind, und sind in der Lage, diese Algorithmen sicher anzuwenden und zu implementieren.",
        "inhalt": "- Gleitpunktarithmetik (Zahldarstellung, Rundungsfehleranalyse, Kondition, Stabilität)\n- Interpolation (Polynominterpolation, Splines, trigonometrische Interpolation, Schnelle Fourier-Transformation)\n- Integration (einfache und zusammengesetzte Regeln, Extrapolationsverfahren, Gauß-Quadratur)\n- Lösung linearer Gleichungssysteme (Gauß-Elimination, LR-Zerlegung, Pivoting, Least Squares)\n- Gewöhnliche Differentialgleichungen (Finite Differenzen, Euler-Verfahren, Runge-Kutta-Verfahren, Konsistenz, Stabilität und Konvergenz, Diskretisierungsfehler, Mehrschrittverfahren)\n- Iterative Verfahren (Relaxationsverfahren: Jacobi und Gauß-Seidel, Minimierungsverfahren: steilster Abstieg, Fixpunktiteration, nichtlineare Gleichungen: von der Bisektion zu Newton)\n- Das symmetrische Eigenwertproblem (Motivation, Kondition, Vektoriteration, QR-Verfahren, Reduktionsalgorithmen)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=977328&pOrgNr=1",
        "name": "Online and Approximation Algorithms",
        "kennung": "IN2304",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer des Moduls kennen die Resultate zu den grundlegenden untersuchten Online-Problemen, insbesondere im Bereich der Ressourcenverwaltung, der Datenstrukturierung und des Schedulings, sowie den studierten NP-harten Graphen-, Erfüllbarkeit- und Packungsproblemen. Des Weiteren beherrschen sie das Analysekonzept der Amortisierung und die Algorithmenentwurfstechnik basierend auf LP-Formulierungen. Die erlernten Resultate und Konzepten können sie anwenden, um neue algorithmische Problem zu lösen.",
        "inhalt": "Das Modul behandelt zunächst die Grundlagen der Online- und Approximationsalgorithmen. Dabei wird das Konzept der Leistungsgarantien eingeführt. Im Bereich der Online-Algorithmen studiert das Modul klassische Scheduling- und Paging-Probleme. Es wird das Konzept der amortisierten Analyse eingeführt und eingesetzt, um selbstorganisierende Listen zu analysieren. Anschließend untersucht das Modul randomisierte Online-Algorithmen mit dem zugehörigen Gegnerkonzept. Es werden Datenkompression-Algorithmen basierend auf selbstorganisierenden Listen, Online-Algorithmen für die Roboter-Navigation, bipartites Matching, energieeffizientes Scheduling, das k-Server-Problem und finanzielle Spiele entwickelt. Auf dem Gebiet der Approximationsalgorithmen werden Algorithmen für Max-Cut, das Traveling Salesman Problem und die Lastbalancierung hergeleitet. Ferner werden polynomielle Approximationsschemata entwickelt, wobei das Rucksackproblem und das Lastbalancierungsproblem im Fokus stehen. Weiterhin behandelt das Modul die Konzepte der LP-Relaxierung und das randomisiertes Runden. Schließlich werden Approximationen für Set-Cover und Shortest-Superstring erarbeitet."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1200766&pOrgNr=1",
        "name": "Open Real Time Games Workshop",
        "kennung": "IN2331",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden erlernen und vertiefen, ein digitales Spiel praxisbezogen zu konzipieren, zu entwickeln und umzusetzen – mit speziellem Fokus auf adäquater Szenenmodellierung und neuartiger, durch Biofeedback gesteuerter Interaktion. Sie verstehen, die professionellen Abläufe mit den üblichen Softwarepaketen gestalterisch, technisch und wirtschaftlich umzusetzen und die Arbeit in einem Team erfolgreich zu koordinieren.",
        "inhalt": "Es gibt mehrere, parallele Sessions für Studierende und mit Studierenden, sowie mit Partnern aus Wirtschaft, Industrie und Forschung.\nThemenschwerpunkte sind Game Development, Game Design mit Augmented Reality und BioFeedback, Sim Games, Simulation und industrielle Anwendungen, sowie 3D-Echtzeitvisualisierung mit Open Source Software. Im Zentrum des Moduls „Open Games Workshop“ steht die Auseinandersetzung mit digitalen Werkzeugen für die professionelle Spieleentwicklung – sowohl bei der Modellierung und Spieleprogrammierung als auch bei der Einbindung von Interaktionsgeräten und –methoden (z.B.: BioFeedback, Eyetracking, Gaze and Gesture etc.). Es werden notwendiges theoretisches Wissen und Kenntnisse der Konzeption und praktischen Umsetzung von Computerspielen behandelt. In Form eines Praxisseminars erfolgt die Bearbeitung anhand einer praxisnahen Fragestellung.\n\nFachliche Inhalte:\nVertiefende theoretische und praktische Kenntnisse zu Game Design, Level Design, Konzeption und Umsetzung einer digitalen Echtzeitanwendung, mit Bildverarbeitung, BioFeedback und Interaktiven Medien.\n\nMethodische Inhalte:\nGrundlagen und Prinzipien von Game und Level Design und deren adäquate Präsentation."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1498603&pOrgNr=1",
        "name": "Operations Research",
        "kennung": "IN0024",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach Absolvieren des Moduls kennen die Teilnehmer grundlegende Verfahren aus den Bereichen Entscheidungsanalyse, Lineare Optimierung, und Ganzzahlige Lineare Optimierung. Sie sind in der Lage betriebliche Planungs- und Entscheidungsprobleme wie z.B. Transportprobleme oder Netzflussprobleme zu modellieren und verstehen Algorithmen, um diese Probleme effektiv zu lösen. Studierende kennen die wesentlichen Eigenschaften dieser Algorithmen und betriebswirtschaftlich relevante Anwendungen.",
        "inhalt": "Entscheidungsanalyse (Entscheidungsbäume, MCDM, InvesMMonsrechnung), Lineare Optimierung, Modellierung betrieblicher Optimierungsprobleme (Transportproblem, Zuweisungsproblem, Zielprogrammierung), Simplex (Normalform, Basivariablen und Basislösungen, Primaler Simplex-Algorithmus, Simplex Tableau, Revidierter Simplex), Sensitivitätsanalyse und Dualitätstheorie, Ganzzahlige Programmierung (Branch-and-Bound, Komplexitätstheorie, Modellierung ganzzahliger Probleme), Netzplantechnik und Netzflussprobleme"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456366&pOrgNr=1",
        "name": "Parallel Numerics",
        "kennung": "IN2012",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After the successful participation students are able to decide whether an algorithm is parallelizable in an efficient way and to analyze internal data dependencies and the runtime of parallel algorithms. They understand the different ways of parallelism and are able to exploit them when writing numerical code for different architectures. Participants know different parallelization strategies for solving linear systems and are able to evaluate them.",
        "inhalt": "- Performance analysis,\n- Data dependency graphs,\n- MPI and parallel BLAS, block methods\n- Direct and iterative solution of linear systems\n- Eigenvalue problems, Domain decomposition methods"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456364&pOrgNr=1",
        "name": "Parallele Algorithmen",
        "kennung": "IN2011",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer des Moduls beherrschen die fundamentale Konzepte der Parallelrechnung. Sie kennen Maschinenmodelle, beherrschen die Grundlagen paralleler Komplexitätstheorie und können parallele Algorithmen entwerfen und bewerten.",
        "inhalt": "Das Modul studiert eingehend parallele Maschinenmodelle. Es entwickelt elementare parallele Algorithmen. Ferner stellt es fortgeschrittene Algorithmen und Methoden für Routing und Sortieren vor."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456506&pOrgNr=1",
        "name": "Petrinetze",
        "kennung": "IN2052",
        "organisation": "Department Computer Science",
        "anmerkung": "Ab SoSe 2015 5 Credits",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul sind die Studierenden dazu in der Lage,\n- einfache nebenläufige Systeme mit Petrinetzen zu modellieren;\n- kleine Petrinetze von Hand zu analysieren;\n- automatische Analysetechniken und Softwaretools zur Analyse von größeren Netzen auszuwählen;\n- die Analyseergebnisse zu nutzen, um das Verhalten der nebenläufigen Systemen zu evaluieren.",
        "inhalt": "Petrinetze sind ein formales Modell für die Beschreibung und Analyse von nebenläufigen Systemen wie verteilten Algorithmen, Kommunikationsprotokollen, Fertigungssystemen, Geschäftsprozessen oder asynchronen Schaltkreisen. Die Stärken von Petrinetzen sind eine einfache, klare Notation mit einer präzisen Semantik und eine Fülle an vorhandenen Techniken zur Analyse und Verifikation.\nDas Modul ist eine Einführung in die Theorie von Petrinetzen. Es stellt mehrere Varianten von Petrinetzen und ihre relevantesten Analysetechniken vor: Erreichbarkeits- und Überdeckbarkeitsgraphen, lineare Invarianten, Strukturtheorie und Entfaltungen. Die Techniken werden auch durch Softwaretools veranschaulicht."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=454059&pOrgNr=1",
        "name": "Planen und Entscheiden in betrieblichen Informationssystemen",
        "kennung": "IN0022",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach Absolvieren des Moduls kennen die Teilnehmer grundlegende Verfahren aus den Bereichen Entscheidungsanalyse, Lineare Optimierung, und Ganzzahlige Lineare Optimierung. Sie sind in der Lage betriebliche Planungs- und Entscheidungsprobleme wie z.B. Transportprobleme oder Netzflussprobleme zu modellieren und verstehen Algorithmen, um diese Probleme effektiv zu lösen. Studierende kennen die wesentlichen Eigenschaften dieser Algorithmen und betriebswirtschaftlich relevante Anwendungen.",
        "inhalt": "Entscheidungsanalyse (Entscheidungsbäume, MCDM, InvesMMonsrechnung), Lineare Optimierung, Modellierung betrieblicher Optimierungsprobleme (Transportproblem, Zuweisungsproblem, Zielprogrammierung), Simplex (Normalform, Basivariablen und Basislösungen, Primaler Simplex-Algorithmus, Simplex Tableau, Revidierter Simplex), Sensitivitätsanalyse und Dualitätstheorie, Ganzzahlige Programmierung (Branch-and-Bound, Komplexitätstheorie, Modellierung ganzzahliger Probleme), Netzplantechnik und Netzflussprobleme"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1517639&pOrgNr=1",
        "name": "Praktikum: Echtzeit-Computergrafik",
        "kennung": "IN0039",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer beherrschen die Grundprinzipien der Programmiersprache C++ und der Graphik-Schnittstelle Direct3D. Sie können Programme eigenständig entwickeln und dabei wesentliche Konzepte der Programmierung und der interaktiven 3D Grafik auf einem grundlegenden, praxis-orientierten, aber wissenschaftlichen Niveau anwenden. Nach dem Besuch des Moduls kennen die Teilnehmer die wesentliche Funktionalität von Direct3D und können diese zur Programmierung von interaktiven Grafik-Anwendungen in C++ nutzen.",
        "inhalt": "Das Modul ist begleitend zum Modul IN0038. Die Studierenden entwickeln und programmieren kleinere Beispielanwendungen unter Anleitung. Hierbei erlernen die Studierenden die grundlegenden Konzepte von Graphik-Schnittstellen und der Grafikprogrammierung auf Grafikkarten mit Direct3D und C++ sowie die Grundlagen der Shaderprogrammierung. Die Studierenden programmieren in kleinen Teams unter Verwendung gängiger Version-Control Systeme."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=759664&pOrgNr=1",
        "name": "Praktikum GPU Programming in Computer Vision",
        "kennung": "IN4102",
        "organisation": "Department Computer Science",
        "anmerkung": "nur für Studiengang CSE",
        "lernergebnisse": "Upon the completion of the module, students are able to implement and parallelize computer vision algorithms in CUDA and harness the power of GPU computing.",
        "inhalt": "The goal of this course is to provide an introduction into the NVIDIA CUDA framework with the C programming language extension.\n\nCourse topics:\n- Introduction to Parallel Computing\n- Introduction to CUDA\n- Implementation of computer vision algorithms with CUDA (e.g. convolution, diffusion)\n- Student Project: Implementation of an advanced computer vision application which uses CUDA acceleration for real-time processing of webcam images.\n\nDuring the course students will learn how to program GPUs with CUDA. Afterwards the students will start to implement more sophisticated computer vision algorithms within a student project. The course finishes with a presentation and a live demo of the project results."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458540&pOrgNr=1",
        "name": "Praktikum Numerische Strömungsmechanik (CSE)",
        "kennung": "IN2186",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After the successful participation at the module, students are able to independently implement a code for the numerical simulation of fluid dynamics. They know the underlying fluid dynamic equations as well as basic methods of their numerical treatment. The participants are able to verify the code and the resulting simulations. They are able to visualize the simulation output with a suitable software and have the competence to interprete, document, and present the results.",
        "inhalt": "The lab course covers the following topics:\n- Numerical simulation of flows using the Navier-Stokes equations\n- Discretisation of space/time\n- Stability and convergence criteria\n- Implementational issues, efficient solver strategies"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=487484&pOrgNr=1",
        "name": "Praktikum Protein-Struktur- und -Funktions-Analyse",
        "kennung": "IN2225",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Das Praktikum soll einen Einblick in die Forschung am Lehrstuhl geben. Die Studierenden lernen, durch Literatursuche relevante Methoden zu finden, zu verstehen und für andere verständlich darzustellen. Bei der Anwendung an konkreten Beispielen können sie die Ergebnisse analysieren und die Möglichkeiten und Grenzen der Methoden diskutieren und bewerten. Sie lernen, die theoretischen Grundlagen sowie die konkreten Vorgehensweisen in einem Protokoll schriftlich darzustellen.",
        "inhalt": "Intro: what is protein function? Predicting protein function using sequence: sequence alignments, multiple sequence alignments, motifs, domain assignment, annotation transfer by homology, ab initio predictions. Predicting protein function using structure: structural alignments, structural motifs, annotation transfer via structure similarity. From structure prediction to function prediction: comparative modeling; prediction of: secondary structure, hydrophilicity profiles, solvent accessibility, transmembrane segments, disordered regions, contact maps, functional residues; template free modeling. During the practical the students apply these methods for the functional annotation of structural genomics structures of proteins of unknown function."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458284&pOrgNr=1",
        "name": "Praktikum Scientific Computing (CSE)",
        "kennung": "IN2182",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to apply important methods and algorithms of numerical programming and can implement these within a numerical programming environment. They have experience with the practical use of the respective techniques and tools and are able to recognize typical properties of numerical methods. Participants are able to work in small teams to design and implement software prototype solutions for the specified tasks. They are able to discuss and assess the correctness, reproducibility and reliability of their obtained results following established best practices of the scientific and general community.",
        "inhalt": "The lab course gives an application-oriented introduction to the following topics using the programming language MATLAB:\n- simulation of discrete processes\n- explicit and implicit single-step methods for ordinary differential equations\n- numerical methods for stationary and non-stationary partial differential equations relying on finite-difference discretizations"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1002907&pOrgNr=1",
        "name": "Praktikum: Social Gaming",
        "kennung": "IN0041",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an diesem Modul besitzen die Studierenden die Fähigkeit, die in dem Modul Social Gaming (IN0040) erworbenen Grundkenntnisse der Konzepte/-Modelle, Techniken/-Algorithmen und Denkweisen/Methodiken des Social Computing für die Konzeption und Implementierung von (insbesondere mobilen) sozialen Spielen und freizeitbezogenen Anwendungen, die individuelle und soziale Kontexte von Spielern intelligent einbeziehen, anwenden zu können.\nDie Studierenden können Methoden zum Design von sozialen Spielen anwenden.\nSie haben ihre in den ersten Semestern erworbenen Fähigkeiten im Programmieren (insbesondere in Java) vertieft und erweitert und praktische Erfahrungen im Software Engineering in kleinen Teams gewonnen. Sie haben die Fähigkeit gewonnen, sich benötigte Technologien (bspw. Umgang mit Geo-Informationssystemen in Bezug auf Location-based Mobile Social Games) schnell und effizient in dem Maße aneignen zu können, wie es für die praktische Lösung von Aufgaben im angestrebten Feld nötig ist.\nSie können Software für mobile Android Endgeräte und Serverkomponenten für Social Games und freizeitbezogene Social Computing Anwendungen entwickeln.",
        "inhalt": "In dem Modul IN0041 werden beispielhaft folgende Inhalte behandelt:\n- Design-Methoden für soziale Spiele und insbesondere mobile soziale Spiele (bspw. Sketching)\n- Anwendungen für Modelle sozialen Kontexts in (mobilen) sozialen Spielen in eigenen Implementierungen in Java.\n- Design eigener Formen sozialer Spiele und freizeitbezogene Social Computing Anwendungen im Web, insbesondere Social Networking Games, Location-Aware Mobile Social Games,-Socially-Aware Mobile Social Games\n- Programmierung von mobilen Endgeräten und Serverkomponenten für Social Games und freizeitbezogene Social Computing Anwendungen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1351020&pOrgNr=1",
        "name": "Praktische Arbeit Bioinformatik",
        "kennung": "IN2294",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden sind in der Lage, sich in ein spezifisches wissenschaftliches Problem der Bioinformatik einzuarbeiten, durch ein Literaturstudium, Verwendung öffentlicher Quellen und Diskussionen mit dem Betreuer den Hintergrund des Problems zu erläutern und die konkrete Problemstellung zu spezifizieren. Die Studierenden sind in der Lage, hierfür einen ersten Vorschlag zur Modellierung und zur Lösung des Problems zu entwerfen und ggf. die vorliegenden Daten auf Verwendbarkeit für die konkrete Problemstellung zu prüfen.",
        "inhalt": "Ziel ist das Durchdenken und der Entwurf eines konkreten Forschungsprojekts aus der Bioinformatik, das dann in der Regel in der Bachelor’s Thesis ausführlich bearbeitet wird. Studierende können eigene Themen für das Modul Praktische Arbeit vorschlagen, normalerweise schlagen aber die Themensteller/Betreuer geeignete Themen aus ihrem Fachgebiet vor, meist eine aktuelle Fragestellung aus einem ihrer Forschungsprojekte.\nDas konkrete Thema des Forschungsprojekts hängt in der Regel vom Betreuer ab, d.h. von dem Gebiet der zugehörigen Forschungsgruppe, in der die Arbeit ausgeführt wird. Der inhaltliche Rahmen der praktischen Arbeit ist daher naturgemäß weit gestreckt, Beispiele für Themen sind die Entwicklung effizienter Algorithmen für Proteinstrukturvorhersage, Proteinfunktionsvorhersage, Multiples Alignment oder Phylogenien; die Entwicklung eines Verfahrens zur Analyse und Interpretation neuer Hochdurchsatzdaten; die Entwicklung neuer Methoden zur kombinierten Auswertung verschiedener genomweiter Datensätze oder biologischer Netzwerke; die Entwicklung neuer Verfahren zur Inferenz von Charakteristika mittels maschinellen Lernens; die Auswertung spezieller biologischer Datensätze zur Erzielung biologischer Erkenntnisse."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1717275&pOrgNr=1",
        "name": "PREP: Practical Research Experience Program",
        "kennung": "IN2374",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dieser Modulveranstaltung sind die Studierenden in der Lage, im Rahmen eines Forschungsprojekts in einem anspruchsvollen Informatik-Fachgebiet methodisch sauber Informatikkonzepte und -lösungen zu erarbeiten, welche aus dem Gebiet des jeweiligen Lehrstuhls stammen (z.B. Datenbanken, Informationssysteme, Netzwerke, Groupware, Grafik, Robotik, Bilderkennung). Sie sind fernerhin in der Lage ihre erreichten Ergebnisse zu überprüfen und zu bewerten. Schließlich wird es ihnen möglich sein, ihre Arbeitsergebnisse einem Fach- oder Laienpublikum vorzustellen sowie unter Anleitung ihre Ergebnisse in Form wissenschaftlicher Veröffentlichungen publikationsreif zu präsentieren.\nNeben reinen Fachkompetenzen wird den Studierenden ein hohes Maß an Methodenkompetenz vermittelt. Mit Hilfe dieser, vom Fach unabhängig einsetzbaren Kenntnisse und Fähigkeiten werden die Studierenden in die Lage versetzt, komplexe Aufgaben und Probleme selbständig zu bearbeiten, Problemlösefähigkeiten einzuüben, selbstreguliert zu Lernen und ihre Fremdsprachenkenntnisse zu verbessern.\nIn Bezug auf ihre Sozialkompetenz werden sie über Fertigkeiten verfügen mit ihren Kolleginnen und Kollegen, ihren Betreuerinnen und Betreuern zu kommunizieren, mit ihnen zu kooperieren sowie individuelle oder gemeinsame Ziele zu verwirklichen. Sie werden die Fähigkeiten besitzen ihre Begabung, Motivation und Leistungsbereitschaft zu entfalten und hierdurch die Entwicklung einer individuellen Persönlichkeit voran zu bringen.",
        "inhalt": "Das PREP Modul ist ausschließlich von solchen Studierenden wählbar, die Teilnehmer am PREP Austauschprogramms der TUM sind. Für alle anderen Studierenden ist dieses Modul nicht wählbar.\nDas PREP Modul wird als Blockveranstaltung abgehalten, die Anfang Juni beginnt und Mitte August endet. Es beinhaltet die individuell geplante Mitarbeit von Studierenden in einem wissenschaftlichen Arbeitskreis. Hierbei werden die Studierenden eine Teilaufgabe aus einem wissenschaftlichen Projekt unter Anleitung, selbständig bearbeiten. Das Projekt wird von einer erfahrenen Wissenschaftlerin / einem erfahrenen Wissenschaftler erstellt und die Studierenden bewerben sich im Rahmen eines Auslandsaufenthalts auf die Durchführung des Projekts. Die Studierenden werden während der Projektlaufzeit in die jeweilige Arbeitsgruppe integriert und von einer erfahrenen Wissenschaftlerin / einem erfahreneren Wissenschaftler direkt betreut. Die betreuende Person erklärt zunächst das Projekt, stellt es in einen größeren Zusammenhang, erklärt die Einzelheiten und umreißt schließlich eine Teilaufgabe, die der Studierende innerhalb der Praktikumszeit bearbeiten soll. Der Umfang des Projekts ist von der betreuenden Person so bemessen, dass innerhalb der zur Verfügung stehenden Zeit ein präsentierbares Ergebnis erreicht werden kann.\nBei der Durchführung des Projekts arbeiten die Studierenden in der Regel selbstständig an ihrem Projekt. Sie müssen daher ihr Arbeitspensum am jeweiligen Projektfortschritt ausrichten und die Fähigkeit zu selbstreguliertem Lernen demonstrieren.\nDas PREP-Modul wird von verschiedenen Lehrstühlen angeboten, so dass die Fachlichkeit der Anwendung aus dem Gebiet des jeweiligen Lehrstuhls stammt (z.B. Datenbanken, Compilerbau, Informationssysteme, Netzwerke, Groupware, Grafik, Robotik, Bilderkennung)."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3155602&pOrgNr=1",
        "name": "Problembasiertes Lernen Bioinformatik",
        "kennung": "IN2343",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme am Modul sind die Studierenden in der Lage, selbstständig aktuelle Forschungsergebnisse aus der Literatur zu verstehen, zu extrahieren, zusammenzufassen, zu analysieren und zu bewerten sowie diese klar schriftlich und mündlich zu präsentieren und zu diskutieren. Diese Kompetenzen werden sowohl in den Bioinformatik-Praktika als auch in der Bachelor’s Thesis zum Verständnis und zur Präsentation konkreter biologischer Fragestellungen sowie informatischer Methoden und mathematischer Modelle benötigt.",
        "inhalt": "Techniken und Methoden zur Vortragsplanung, zur Literatursuche, zur Erstellung von Vorträgen, zur visuellen Präsentation, zur Erstellung und Gliederung wissenschaftlicher Ausarbeitungen und zur Moderation.\nAnhand aktueller Forschungsarbeiten in der Bioinformatik wird eine Präsentation mit zugehöriger Ausarbeitung erstellt und präsentiert. Die Studierenden arbeiten sich unter Anleitung in das Themengebiet und die aktuelle Forschungsfrage ein. Sie verstehen und reproduzieren Teile der publizierten Ergebnisse. Die Auswahl der Themengebiete obliegt dem jeweiligen Dozenten. Beispiele für Themen sind effiziente Algorithmen zur Alignierung, Sequenzanalyse, Proteinstrukturvorhersage, Proteinfunktionsvorhersage, oder Phylogenien; Methoden zur Analyse und Interpretation neuer Hochdurchsatzdaten."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1605337&pOrgNr=1",
        "name": "Project Work in Informatics",
        "kennung": "IN8028",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of the module, participants are able to apply knowledge and methods in a research project in the field of Informatics.\nThey have deepened and further cross-linked their understanding of Informatics and the Informatics-related topics acquired by the third-semester modules IN8005, IN8027 (Introduction to Informatics for Students of Management & Technology – Programming Lab Course).\nStudents are able to analyze elements of the solution space of the given research problem in a team under given technical, economic and social constraints. In doing so, they can work out important questions related to the research problem in an Informatics field and clarify them in close coordination with experts from this area.\nThey are able to apply the theoretical knowledge acquired in the third semester such as a basic understanding of Machine Learning and practical capabilities such as programming in Java, using Machine Learning Libraries, or practical Software Engineering skills to an Informatics research-problem and develop their own solutions or solution contributions to the related research questions in a team.\nThey are able to prepare the solution developed in the project in such a way that they can present it to application experts in a written form and orally.\nStudents acquire missing Informatics knowledge and skills related to the research question of the project by private study under the guidance of the advisors.",
        "inhalt": "The project work centers on a research question in the field of work of the supervisor and the advisor (typically a doctoral student). Students experience hands-on work in a project, where they work together in teams. They pass through the whole process of a small scientific project. The content depends on the research question and the elements of scientific project work. Example content: In a design science methodology driven research program, an intermediate technological artifact (e.g. a software system) has been developed as an intermediate result by the advisor under the guidance of the supervisor. As an example, consider a user interface for an interactive visual data-exploration system. The project work of the student team may consist in systematically evaluating this technological artifact with the help of human study participants in focus groups. The contents of the module then encompass quantitative and qualitative evaluation methods, the technology of the artifact, content elements of the theoretical background of the research question / research field (e.g. UI-Design, Information Visualization, Data-Mining)."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1150166&pOrgNr=1",
        "name": "Protein Prediction I for Bioinformaticians",
        "kennung": "IN2221",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studenten verstehen die grundsätzlichen Konzepte der Proteinsequenzanalyse, von Proteinstrukturen und der Vorhersage von Proteinstrukturen und sind in der Lage diese zu bewerten. Sie können die aktuellsten technischen Methoden entsprechend dieser Grundsätze in der Bioinformatik anwenden.\nDie Studenten können (in von Tutoren geleiteten Gruppen) ihre eigenen Vorhersagemethoden entwickeln, indem sie bestehende Methoden oder Algorithmen kombinieren und / oder neue Methoden entwickeln.\nDie Teilnehmer sind in der Lage, veröffentlichte Methoden zu analysieren und zu bewerten (sowohl als Leser der Veröffentlichung, als Gutachter und als Konkurrent). Basierend auf den Ergebnissen dieser Bewertungen sind sie in der Lage, ein Werkzeug zu erstellen, das für experimentelle Biologen und Bioinformatiker einfach anwendbar ist. Das bedeutet dass sie in der Lage sind, abstrakte Lösungsideen unter Berücksichtigung technischer Aspekte in Pseudo-Code und wahlweise während der Übungen weiter in funktionsfähige Programme umzusetzen.",
        "inhalt": "Einführung: Was ist ein Protein? Was sind Proteinstruktur & -funktion? Vorhersage der Proteinstruktur: Überblick.\nMethoden: Sequenzvergleiche (Sequenz – Sequenz, Sequenz – Profil, Profil – Profil, HMM); Vorhersage von Proteinstruktur in 1D (Sekundärstruktur, Lösungsmittelzugänglichkeit, Membranhelices), 2D (Kontaktvorhersagemethoden, zeitgemäße Methoden unter Verwendung korrelierender Mutationen), 3D (vergleichendes Modellieren, Molekulardynamik); Vorhersage von unstrukturierten Bereichen in Proteinen.\nDie Vorlesung beinhaltet eine Einführung ins Maschinelle Lernen mit speziellem Fokus darauf, wie überoptimistische Vorhersagen vermieden werden können."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1149546&pOrgNr=1",
        "name": "Protein Prediction I for Computer Scientists",
        "kennung": "IN2322",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Students understand the basic principles in protein sequence analysis, in protein structure and protein structure prediction. They understand the biological and computer science background of the methods toward these objectives in computational biology.\nStudents have acquired the theoretical background consisting of the presented knowledge to develop and implement simple independent solutions towards the presented problems.",
        "inhalt": "Introduction: What is a protein? What is protein structure & function? Overview of methods predicting protein structure.\nMethods: Sequence comparisons (sequence-sequence, sequence-profile, profile-profile, HMM); prediction of protein structure in 1D (secondary structure, solvent accessibility, membrane helices), 2D (contact prediction methods, contemporary methods using correlated mutations), 3D (comparative modeling, MD); prediction of disorder in proteins.\nThe lectures include an introduction to machine learning with particular focus on how to avoid over-estimating performance."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=608646&pOrgNr=1",
        "name": "Protein Prediction II for Bioinformaticians",
        "kennung": "IN2230",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studenten verstehen die grundsätzlichen Konzepte der Proteinsequenzanalyse mit dem Fokus auf Proteinfunktion und der Vorhersage von Proteinfunktionen und sind in der Lage diese zu bewerten. Sie können die aktuellsten technischen Methoden entsprechend dieser Grundsätze in der Bioinformatik anwenden.\nDie Studenten können (in von Tutoren geleiteten Gruppen) ihre eigenen Vorhersagemethoden entwickeln, indem sie bestehende Methoden oder Algorithmen kombinieren und / oder neue Methoden entwickeln.\nDie Teilnehmer sind in der Lage, veröffentlichte Methoden zu analysieren und zu bewerten (sowohl als Leser der Veröffentlichung, als Gutachter und als Konkurrent). Basierend auf den Ergebnissen dieser Bewertungen sind sie in der Lage, ein Werkzeug zu erstellen, das für experimentelle Biologen und Bioinformatiker einfach anwendbar ist. Das bedeutet, dass sie in der Lage sind, abstrakte Lösungsideen unter Berücksichtigung technischer Aspekte in Pseudo-Code und wahlweise während der Übungen weiter in funktionsfähige Programme umzuwandeln.",
        "inhalt": "Einführung: was ist ein Protein? Was ist Proteinfunktion? Überblick über die Vorhersage von Proteinfunktionen.\n\nVorhersage von Proteinfunktionen beruhend auf Sequenzen: Sequenzalignments, multiple Sequenzalignments, Leitmotive, Domänenzuweisung, Annotationstransfer durch Homologie, de novo-Vorhersagen. Vorhersage von Proteinfunktionen durch die Verwendung von Struktur: Strukturalignments, Strukturmotive, Annotationstransfer aufgrund der Ähnlichkeit von Strukturen. Von Strukturvorhersage zu Funktionsvorhersage: vergleichendes Modellieren, Vorhersage von: subzellulärer Lokalisierung, Protein-Protein Interaktionen, Protein-DNA und -RNA-Interaktionen, Protein-Substrat-Interaktionen, Proteinnetzwerke, Gen-Ontologie (GO), Enzymklassifikationen, Vorhersage von enzymatischer Aktivität, Vorhersagen von funktionellen Klassen (z.B,: GO-Klassen).\nVorhersage des Effekts von einzelnen Punktmutationen (Sequenzvarianten) auf Proteinfunktion und Organismus. Vorhersage vom Phänotyp aus dem Genotyp.\nWie beim ersten Teil (Protein Prediction I) beinhaltet das Modul eine Einführung ins Maschinelle Lernen mit speziellem Fokus auf der Vermeidung von überoptimistischen Vorhersagen.\nIm Gegensatz zum ersten Teil (Protein Prediction I) spielt die Proteinstruktur nur eine untergeordnete Rolle: die Einführung in die Proteinstruktur dient lediglich dazu, das Verständnis der Proteinfunktion zu unterstützen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=930647&pOrgNr=1",
        "name": "Protein Prediction II for Computer Scientists",
        "kennung": "IN2291",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Students will learn the basic principles of protein sequence analysis with focus on protein function and protein function prediction. They will be confronted with the biological and computer science background of the methods toward these objectives in computational biology. Particular focus will be on learning safeguards to correctly estimate performance of machine learning. As opposed to the first part (Protein Prediction I for Computer Scientists), protein structure plays at most a minor role: it will be introduced only if it has been helpful to further our understanding of function.\nStudents will acquire the theoretical background consisting of the presented knowledge to develop and implement simple independent solutions towards the presented problems.",
        "inhalt": "Introduction: What is a protein? What is protein function? Overview over prediction of protein function.\nPredicting protein function using sequence: motifs, annotation transfer by homology (homology-based inference), de novo predictions. Predicting protein function using structure: structural motifs, annotation transfer via structure similarity. Prediction of: subcellular localization, protein-protein interactions, protein-DNA and –RNA interactions, protein-substrate interactions, protein networks, GeneOntology (GO), Enzyme Classification, prediction of enzymatic activity, prediction of functional classes (e.g. GO classes).\nPrediction of the effect of single point mutations (sequence variants) on protein function and the organism (focus on single amino acid variants). Prediction of phenotype from genotype.\nAs opposed to the first part (Protein Prediction I), protein structure plays a minor role confined to what is helpful to further our understanding of protein function. Another major difference is that alignment methods will not be discussed although their results (evolutionary information) will be central to almost all prediction methods."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1254191&pOrgNr=1",
        "name": "Quantitative Verification",
        "kennung": "IN2340",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Successful participation enables students to\n• explain the role of quantitative modelling and analysis for ensuring hardware and software quality.\n• give formal models of simple hardware and software systems describing their probabilistic and timed behavior.\n• write formal specifications of simple safety, dependability, reliability, and performance properties.\n• explain algorithms for checking if a system satisfies a given specification and apply them to small examples.\n• understand and explain techniques for improving practical performance of the analysis algorithms.",
        "inhalt": "The course teaches the fundamentals of modelling and analysis of systems featuring quantitative behavior, such as time and probabilities. Topics include:\n• Representation of hardware and software systems using formal models of computations, e.g., transition systems, discrete-time and continuous-time Markov chains, Markov decision processes, stochastic games, timed automata.\n• Representation of specifications using formal logics, e.g., probabilistic linear temporal logic, probabilistic computation-tree logic, continuous stochastic logic, metric temporal logic.\n• Algorithms for various classes of formal models and specifications, e.g., transient analysis, stationary analysis, mean-payoff optimization, reachability-game solving.\n• Theoretically optimal as well as practical techniques for analysis of large systems, e.g., linear programming, value iteration, strategy iteration, reinforcement learning.\n• Industrial application of the analysis, e.g., randomized communication protocols, embedded systems, cyber-physical systems, safety-critical missions.\n• Practical experience in applying model checking tools, e.g., PRISM, MRMC, UPPAAL."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=487478&pOrgNr=1",
        "name": "Query Optimization",
        "kennung": "IN2219",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer beherrschen die wesentlichen Optimierungstechniken der Anfrageoptimierung, können sie problembezogen entwickeln sowie die Komplexität von konkreten Anfragen analysieren bzw. die Anfragen zwecks Verbesserung bewerten.",
        "inhalt": "- Anfrageverarbeitung in relationalen Datenbanksystemen\n- grundlegende Techniken der Anfrageoptimierung\n- Bestimmung der optimalen Joinreihenfolge\n- Techniken der dynamischen Programmierung\n- Kostenmodelle für die Anfrageverarbeitung\n- Optimierung unter der Berücksichtigung von physikalischen Eigenschaften"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458193&pOrgNr=1",
        "name": "Randomisierte Algorithmen",
        "kennung": "IN2160",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Teilnehmer des Moduls verfügen über gründliche Kenntnisse verschiedener Grundprinzipien randomisierter Algorithmen, zugehöriger Berechnungsmodelle, der entsprechenden mathematischen Analysen (Abschätzungen nach Markov, Chebyshev, Chernoff) sowie mehrerer paragdigmatischer Anwendungen.",
        "inhalt": "Das Modul entwickelt zunächst grundlegende Ergebnisse im Bereich der randomisierten Algorithmen. Es werden der randomisierte Quicksort-Algorithmus sowie randomisierte Algorithmen für Min-Cut, Binary-Planar-Partition und die Verifikation von Matrizenmultiplikation hergeleitet.\nDas Modul behandelt die Konzepte von Las-Vegas und Monte-Carlo-Algorithmen und definiert verschiedene randomisierte Komplexitätsklassen. Es behandelt spieltheoretische Techniken wie Yao’s Minimax-Prinzip und wendet dieses auf die Spielbaumevaluation an.\nDas Modul stellt Momente vor und entwickelt elementare Ungleichungen wie die Markov-Ungleichung und die Chebyshev-Ungleichung. Diese werden eingesetzt, um das Coupon-Collector-Problem sowie die Probleme der Medianberechnung und der stabilen Heirat eingehend zu analysieren. Weiterhin entwickelt das Modul Chernoff-Schranken und analysiert mit ihrer Hilfe Routing- und Verdrahtungsprobleme.\nDie probabilistische Methode wird vorgestellt und auf zahlreiche Probleme angewandt.\nSchließlich studiert das Modul randomisierte Datenstrukturen wie Treaps sowie das universelles und perfektes Hashing."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2809336&pOrgNr=1",
        "name": "Requirements Engineering",
        "kennung": "IN2394",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with the basic concepts and methods of Requirements Engineering. They have the ability to analyse typical scenarios and identify typical challenges. Furthermore, students can apply and evaluate suitable concepts and methods for concrete problems.",
        "inhalt": "Requirements Engineering (RE) as a first and ongoing activity of a development project, is crucial for the success of every project, as its outcome determines the further course of the project.\n\nIn this activity, the stakeholders are identified. Their goals are analysed and conflicting goals resolved. A variety of elicitation methods and decomposition techniques are applied to deduce concrete requirements. Depending on the context of the project, different methods to formulate these requirements are necessary. Continuous quality control is essential to mitigate the risk of project failure due to ill-formulated or invalid specifications.\nFurthermore, non-functional requirements need to be formulated with great care to minimize subjectiveness. One major challenge in the context of RE is to manage permanently occurring change. This change can happen due to moving goals of the stakeholders or changes in the environment of the system under construction.\n\nThe lecture \"Requirements Engineering\" covers all important topics of Requirements Engineering (RE), especially the RE-Tasks, different types of requirements, requirement extraction, negotiation, documentation, and management. It is shown how the first, mostly informal, requirements are described, concretized, potentially formalized, managed, and evolved. This lecture considers different process models that are used for and within RE.\nThis forms a solid basis for students to become active in both industrial requirements engineering and RE research."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1350593&pOrgNr=1",
        "name": "Ringvorlesung Digitalisierung",
        "kennung": "IN2348",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an den Modulveranstaltungen sind die Studierenden in der Lage, auf universitärem Niveau die verschiedenen Facetten der Digitalisierung zu verstehen, zu analysieren, zueinander in Bezug zu setzen und Zielkonflikte zu identifizieren.",
        "inhalt": "Aspekte der Digitalisierung aus der Sicht verschiedener Disziplinen: Informatik, Wirtschaftsinformatik, Recht, Ökonomie, Politikwissenschaft, Soziologie, Philosophie und Ethik, Sicherheit und Privatheit und aus der Sicht industrieller Anwendungen."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1629493&pOrgNr=1",
        "name": "Ringvorlesung Games Engineering",
        "kennung": "IN2368",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an den Modulveranstaltungen sind die Studierenden in der Lage, auf universitärem Niveau die verschiedenen Facetten der Games Branche zu verstehen und zu analysieren. Zusätzlich erwerben die Studierenden ein breites Wissen über die aktuellen Entwicklungen und Trends dieser Branche, sowie Einblicke in den aktuellen Stand und Technologie aus dem Feld des Games Engineerings.",
        "inhalt": "Aspekte aus dem Feld des Games Engineering aus der Sicht von verschiedenen Disziplinen, wie Informatik, Wirtschaft, Recht, Business, Forschung und Entwicklung mit direktem Industriebezug."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4115503&pOrgNr=1",
        "name": "Scientific Computing and Machine Learning",
        "kennung": "CIT423000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreichem Abschluss des Moduls beherrschen Studierende die Grundlagen und den mathematischen Formalismus von Problemen und Methoden des Scientific Computing, die für Machine Learning wichtig sind. Insbesondere verstehen sie die Beschreibung dynamischer Systeme (gewöhnliche und partielle Differentialgleichungen). Studierende können relevante Softwareframeworks (z.B. numpy, scipy, tensorflow, pytorch, JAX, CUDA) in praktischen Anwendungen verwenden. Darüber hinaus können sie mögliche Anwendungsfelder des maschinellen Lernens in den Naturwissenschaften bewerten.",
        "inhalt": "Scientific Computing and Machine Learning behandelt Algorithmen des maschinellen Lernens im Kontext von Scientific Computing, um Lösungsmethoden für Probleme in den Naturwissenschaften und dem Ingenieurwesen zu entwickeln. Inhalte der Vorlesung sind unter anderem:\n- Numerische Approximationsmethoden von Lösungen gewöhnlicher und partieller Differentialgleichungen (Physics-informed neural networks, Deep neural operators, Random feature methods, Gaussian processes, Modellreduktion)\n- Regelungstechnik für dynamische Systeme\n- Inverse Probleme, die Differentialgleichungen enthalten\n- Bedingungen und Erhaltungssätze (Hamilton- and Lagrange Formalismus, „hard constraints“ für Algorithmen des maschinellen Lernens)\n- Probleme, die beim maschinellen Lernen auf kleinen Datensätzen auftreten\n- Maschinelles Lernen auf spezialisierter Hardware (v.a. CPU vs. GPU)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456354&pOrgNr=1",
        "name": "Scientific Computing I",
        "kennung": "IN2005",
        "organisation": "Department Computer Science",
        "anmerkung": "ab WS12/13 4 SWS und 5 Credits",
        "lernergebnisse": "At the end of the module, participants know the steps of the scientific computing pipeline. They are able to classify and derive simple models, to analyze model behavior (e.g., critical points, asymptotic behavior), and to apply common discretization methods as well as explicit and implicit time stepping schemes to a given model.\nThey are able to assess the adequacy and accuracy of numerical methods and underlying models according to the criteria introduced in the lectures. They can discuss typical limitations and potential errors of models and discretizations. For selected scenarios they have learned that simulation results and simulation errors can have massive societal and economic impact.\nIn addition, students understand the impact of further parts of the simulation pipeline (such as grid generation, grid traversal, data storage, matrix assembly, parallelization, and visualization issues) on modelling and discretization.",
        "inhalt": "The module introduces the steps of the scientific computing simulation pipeline on selected simulation scenarios, focusing especially on aspects of modelling and discretization:\n- classification of mathematical models (discrete/continuous, deterministic/stochastic, etc.);\n- discrete models (e.g. Markov chain models)\n- modeling with ordinary differential equations for the example of population growth;\n- numerical solution of systems of ordinary differential equations;\n- modeling with partial differential equations (PDE) for the example of fluid dynamics;\n- numerical discretization methods for partial differential equations (finite elements, time stepping, grids and adaptivity);\n- limitations and errors encountered in models and discretized models\n- adequacy and asymptotic behavior of models (stability, consistency, accuracy, and convergence of numerical methods)\n\n\nAn outlook will be given on the impact that further steps of the simulation pipeline can have on the selection of modeling and discretization techniques, such as:\n- efficient sequential and parallel implementation (architectures, parallel programming, load distribution, domain decomposition, parallel numerical methods);\n- visualization or results\n- embedding of simulations in larger simulation environments (coupled models, workflows for parameter studies and uncertainty quantification)\n\nExamples are primarily selected from societally and economically relevant simulation scenarios, such as:\n- Discrete and continuous population models (incl. spreading of diseases, traffic simulation, use of population-type models in economy)\n- Simulation of hazards (e.g. shallow water models for tsunami simulation)\n- Computational fluid dynamics (towards weather and climate simulation)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=476730&pOrgNr=1",
        "name": "Scientific Computing II",
        "kennung": "IN2141",
        "organisation": "Department Computer Science",
        "anmerkung": "ab SoSe 13 4 SWS und 5 Credits",
        "lernergebnisse": "At the end of the module, students are familiar with typical problems arising in the algorithmic treatment and implementation stages of the numerical simulation pipeline. For large, sparse linear systems arising from the discretization of (systems of) partial differential equations, they know the main classes of iterative solvers. They can evaluate the range of application of such methods in standard scenarios and they remember their basic performance features. Students can apply these methods to a given problem and implement them in code. They are aware of restrictions and possible errors arising in certain application scenarios.\nStudents understand the typical steps of the simulation pipeline for particle-based simulations, from modeling over discretization and numerics to implementation and visualization. For the scenario Molecular Dynamics, they have detailed knowledge of these steps and are able to design and realize suitable simulation software. They can apply efficient algorithms to calculate pairwise forces between particles.",
        "inhalt": "The module introduces key steps of the scientific computing simulation pipeline on selected simulation scenarios, focusing especially on aspects of iterative solvers and efficient algorithmic treatment of numerical schemes. In terms of application areas, the module focuses on computational fluid dynamics and on particle simulations in scientific computing:\nParticular topics are:\n- sparse linear systems arising in discretized PDE systems (e.g. computational fluid dynamics)\n- multigrid methods (multigrid schemes, smoothers, impact of grid transfer operations and coarse grid discretization)\n- Krylov subspace methods (steepest descent, conjugate gradients)\n- preconditioning techniques (hierarchical basis preconditioning)\n- convergence properties and asymptotic performance analysis of solvers; possible errors and sources of inefficiencies in solver components\n- Modelling in molecular dynamics simulation\n- time stepping schemes for particle simulations\n- efficient implementation of all-to-all interaction (e.g. Linked Cell, Verlet lists, Barnes-Hut and Fast Multipole algorithm) including parallelization aspects"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=977334&pOrgNr=1",
        "name": "Scientific Computing in Circuit Simulation",
        "kennung": "IN2306",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, participants know the basic modeling and algorithms needed for circuit simulation. They are able to understand the necessary interaction between engineers, mathematicians, and computer scientists in industrial problem modeling. They understand the role and importance of mathematical problem analysis and its theoretical treatment, which are transformed into an engineer's solution. The participants are able to analyze the impact of different mathematical approaches for industrial problems. They can understand, apply, and interprete the basic methods how to implement the algorithms in an efficient way allowing a fast simulation of electronic circuits.",
        "inhalt": "The lecture includes the following scientific computing topics:\n- industrial design of electronic circuits\n- modeling of electrical networks and network elements\n- differential-algebraic equations (DAEs): theory, numerical integration\n- sparse matrix techniques\n- algorithms for parallel and distributed computing\n- further challenges (e.g., latency and bypass strategies, noise)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1020200&pOrgNr=1",
        "name": "Secure Coding",
        "kennung": "IN2313",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "The participants acquire:\n+ Capacity to apply general principles on secure software development, independent of the programming language\n+ Capacity to perform Basic Black-box and White-box Vulnerability analysis for PHP, Java and C/C++.\n+ Capacity to develop in-depth defense strategies and best practices for PHP, C/C++ and Java.\n+ Basic reverse-engineering and software obfuscation skills.\n+ Knowledge of software tools for vulnerability detection and code protection.\n+ Capacity to adequately report testing and fixing outcomes.",
        "inhalt": "In this lecture we focus on tools and guidelines for the development of secure software. The course will cover two main types of software: Web services (in PHP) and native applications (in C/C++ and Java). For these two categories, we will briefly recall the most exploited vulnerabilities (OWASP Top 10, memory errors, common logical vulnerabilities, errors using cryptography) and we will concentrate on best-practices to avoid them, as well as on tools that help developers to build security into their software, including automatic and semi-automatic security testing tools, syntactic analysis tools for source code, reverse engineering/obfuscation tools and code-reviewing. Parallel to the theoretical course, we will develop an actual application and analyse its security through five iterative development and testing phases."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456513&pOrgNr=1",
        "name": "Semantics",
        "kennung": "IN2055",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul verstehen die Teilnehmer die wesentlichen Konzepte der Semantik von Programmiersprachen auf einem wissenschaftlichen Niveau. Die Teilnehmer haben ein vertieftes Verständnis von mindestens einer der drei wichtigsten Techniken zur Definition der Semantik von Programmiersprachen: operational, denotational und axiomatisch.\nInsbesondere haben die Studenten folgende Fähigkeiten: Sie können\n- Semantiken lesen und deren logische Konsequenzen verstehen;\n- die Semantik einzelner Sprachkonstrukte selbst definieren;\n- Eigenschaften sowohl einzelner Programme als auch von Semantiken logisch herleiten;\n- Werkzeuge wie Compiler und Programmanalysatoren bezüglich einer Sprachsemantik verifizieren.",
        "inhalt": "Es werden folgende Kernthemen der Semantik von Programmiersprachen behandelt: Operationale und axiomatische Semantik und ihre Beziehung zu einander. Grundlegende induktive Definitionsprinzipien und Beweismethoden. Grundlegende Spracheigenschaften wie Typsicherheit. Anwendungen auf Werkzeuge wie Compiler und Programmanalysatoren. Programmverifikation mit axiomatischer Semantik. Je nach Ausprägung dient eine einfache imperative und/oder funktionale Sprache als Basis. Optionale weitere Themen (beispielhaft):\n- Denotationale Semantik\n- Semantik von Prozeduren, Arrays und Zeigern\n- Semantik objektorientierter Sprachen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473906&pOrgNr=1",
        "name": "Seminar Projektmanagement",
        "kennung": "IN9011",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Am Ende des Moduls verfügen die Studierenden über grundlegende Fähigkeiten und Kenntnisse im Projektmanagement und können diese auf einfache Szenarien anwenden, z.B. Ziele und Projektphasen definieren, Ressourcenpläne aufstellen oder Mitarbeiter in Projekten führen. Exemplarisch beherrschen die Teilnehmer den Einsatz eines verbreiteten Projektmanagement-Tools und sind in der Lage Aspekte aus dem Bereich Projektmanagement adäquat darzustellen.",
        "inhalt": "Grundlagen des Projektmanagements, Internationale Quasi-Standards für Projektmanagement, Phasen eines Projekts, Qualitäts- und Erfolgskontrolle und -sicherung, Planung und Einsatz von Ressourcen, Softwareunterstützung für erfolgreiches Projektmanagement, Zeitmanagement."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473902&pOrgNr=1",
        "name": "Seminar Wissenschaft und Ethik",
        "kennung": "IN9010",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreichem Absolvieren des Moduls sind die Studierenden in der Lage, ethische Aspekte unterschiedlicher Verhaltensweisen, die mit wissenschaftlichem Arbeiten verbunden sind (Ziele der Forschung, Durchführung von Forschungsarbeiten und auch die mögliche Anwendung der Forschungsresultate), zu analysieren und zu bewerten sowie diese adäquat darzustellen.",
        "inhalt": "- Biographien bedeutender Wissenschaftlerinnen und Wissenschaftler (Meitner, Einstein, Russell, Heisenberg, v. Braun,...)\n- Forschung in Diktaturen\n- Betrug, Irrtum und geistiger Diebstahl\n- Ethik und Informatik (Überwachung, Freiheit des Internet, Open Source, Star Wars,...)\n- Genforschung, Intelligent Design, Tierexperimente"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473900&pOrgNr=1",
        "name": "Sich und andere führen",
        "kennung": "IN9009",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme haben die Studierenden anhand von Erfahrungslernen durch Feedback und Selbstreflexion ihre Führungskompetenzen erweitert, indem sie auf Basis einer realistischen Einschätzung Stärken ausgebaut bzw. Schwächen abgefedert haben. Sie sind in der Lage, konstruktiv Feedback zu geben und zu erhalten.",
        "inhalt": "- Persönliche Definition von Führung, Kompetenzprofil einer erfolgreichen Führungskraft\n- Standortbestimmung: Eigene Stärken und Schwächen, Führungsanspruch\n- Wahrnehmung, Einschätzung, Kommunikation, Feedback\n- Führen einzelner Mitarbeiter: Führungssituationen und -gespräche\n- Führen von Gruppen: Gruppendynamik, Widerstand\n- Umgang mit Konflikten\n- Sich präsentieren und Sitzungen moderieren\n- Führungsinstrumente und Führungsstile (inkl. Coaching)\n- Führung zwischen Unternehmens- und Mitarbeiterinteressen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456382&pOrgNr=1",
        "name": "Simulation und Animation",
        "kennung": "IN2025",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer verstehen die grundlegenden (physikalischen) Modelle und die mathematischen Beschreibungen und Lösungsverfahren zur computer-unterstützten Simulation von Charakteranimationen, Starr- und Weichkörpern, und Fluiden. Die Teilnehmer sind in der Lage, die im bereich der Computergraphik zum Einsatz kommenden Techniken in Bezug auf Realismus und Komplexität zu analysieren und differenzieren.",
        "inhalt": "Industrial animation process, character animation (keyframing, inverse kinematic, ragdolls), rigid body motion (kinematics, collision detection, collision response), soft body simulation (mass-spring systems, linear elasticity, finite-elements), fluid simulation (wave equation, shallow water equation, Navier-Stokes equations, discretization), visualization techniques for volumetric phenomena"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=654521&pOrgNr=1",
        "name": "Social Computing",
        "kennung": "IN2241",
        "organisation": "Department Computer Science",
        "anmerkung": "5 Credits ab SoSe 2015",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme am Modul sind die Studierenden in der Lage, die im Inhalt genannten Grundbegriffe, Konzepte und Denkweisen des Social Computing zu verstehen, um diese zum einen bei der Konzeption und Implementierung von Social Computing Anwendungen anwenden zu können, die insbesondere individuelle und soziale Kontexte von Spielern intelligent einbeziehen. Zum anderen sind sie in der Lage, diese Grundbegriffe, Konzepte und Denkweisen, auch in der Forschung zum Thema Social Computing anwenden zu können. Hierzu zählt insbesondere die Fähigkeit, entsprechende Fachpublikationen lesen und verstehen zu können sowie die Fähigkeit, auch eigene Algorithmen und abstraktere soziotechnische Lösungsansätze für Social Computing Probleme in Zusammenhang mit den genannten Inhalten entwickeln zu können.",
        "inhalt": "In dem Modul IN2241 werden beispielhaft folgende Inhalte behandelt:\n- Grundlagen Social Computing, Social Media, Web2.0, (Mobile, Decentralized) Social Networking, Modelle sozialen Kontexts\n- Grundlagen Soziometrie: Zentralität: Konzepte und Algorithmen\n- Grundlagen Soziometrie: Dichte Subnetzwerke: Konzepte und Algorithmen\n- Grundlagen Soziometrie: Graph Clustering: Konzepte und Algorithmen\n- Metrische Clustering Verfahren für Social Computing / Social Gaming Anwendungen\n- Metriken, Eigenschaften und Modelle realer Netzwerke (Small Worlds etc.)\n- Modelle für soziale Beziehungen in Raum und Zeit\n- Grundlagen des Social Signal Processing\n- Grundlagen Spieltheorie\n- Optional: Visualisierung von statischen und dynamischen Netzwerken\n- Optional: Social Semantic Web"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1002906&pOrgNr=1",
        "name": "Social Gaming",
        "kennung": "IN0040",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme am Modul sind die Studierenden in der Lage, die im Inhalt genannten Konzepte/Modelle, Techniken/Algorithmen und Denkweisen/Methodiken des Social Computing und Social Gaming und bestehender und möglicher Anwendungen (insbesondere im Bereich Social Gaming) zu verstehen. Sie haben darüber einen Überblick gewonnen, um diese im Team in der praktischen Konzeption und Implementierung eigener sozialer Spiele und freizeitbezogener Social Computing Anwendungen anwenden zu können, die insbesondere individuelle und soziale Kontexte von Spielern intelligent einbeziehen. Zum anderen sollen sie in die Lage versetzt werden, die im Inhalt aufgeführten Konzepte/Modelle, Techniken/Algorithmen und Denkweisen/Methodiken auch in der Forschung zum Thema Social Gaming / Social Computing anwenden zu können. Hierzu zählt insbesondere die Fähigkeit, entsprechende Fachpublikationen lesen, verstehen und im Hinblick auf ihre Anwendung im Bereich soziale Spiele bewerten zu können sowie die Fähigkeit, auch eigene Algorithmen und abstraktere soziotechnische Lösungsansätze für Social Gaming / Social Computing Probleme (in Zusammenhang mit den genannten Inhalten, insbesondere im Hinblick auf die intelligente Nutzbarmachung sozialer Kontexte) entwickeln zu können.",
        "inhalt": "In dem Modul IN0040 werden beispielhaft folgende Inhalte behandelt:\n- Ludologische Grundbegriffe sozialer Spiele (Konzepte und Modelle)\n- Grundlagen Social Computing, Social Media, Web2.0, (Mobile, Decentralized) Social Networking, sozialer Kontext (jeweils algorithmisch verarbeitbare Konzepte und Modelle sowie grundlegende Denkweisen und Methodiken)\n- Formen sozialer Spiele und freizeitbezogener Social Computing Anwendungen im Web (Anwendung der besprochenen Konzepte und Modelle)\n- Grundlagen Soziometrie: Zentralität: Konzepte, Modelle und Algorithmen\n- Grundlagen Soziometrie: Dichte Subnetzwerke: Konzepte, Modelle und Algorithmen\n- Grundlagen Soziometrie: Graph Clustering: Konzepte, Modelle und Algorithmen\n- Metrische Clustering Techniken für Social Computing / Social Gaming Anwendungen\n- Metriken, Eigenschaften und Modelle realer Netzwerke (Small Worlds etc.). Algorithmen die diese Metriken, Eigenschaften und Modelle verwenden.\n- Konzepte und Modelle für soziale Beziehungen in Raum und Zeit\n- Grundlagen des Social Signal Processing: Konzepte, Modelle und Algorithmen und Anwendungen.\n- Grundlagen Spieltheorie: Konzepte und Algorithmen\n- Optional: Visualisierung von statischen und dynamischen Netzwerken: Konzepte und Algorithmen\n- Optional: Social Semantic Web: Konzepte und Algorithmen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1452141&pOrgNr=1",
        "name": "Software Engineering for Business Applications - Master's Course: Web Application Engineering",
        "kennung": "IN2087",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an dem Modul verfügen Studierende über die notwendige Kompetenz, Web Anwendung eigenständig zu konzipieren, zu planen und umzusetzen. Studierende sind nach der Teilnahme an dem Modul in der Lage, Geschäftsmodelle im Web zu identifizieren und die zugrundeliegenden Konzepte zu erklären, Muster für die Gestaltung von Web Anwendungen auszuwählen und anzuwenden.\nDarüber hinaus sind Studierende in der Lage, nutzerzentrierte iterative Vorgehensmodelle zu erklären, zu bewerten und im Team anzuwenden. Aktuelle webbasierte Technologien und Integrationstechniken können Studierende erklären, für die Implementierung eigener Webanwendungen auswählen und erfolgreich einsetzen. Das umfasst sowohl endgerätespezifische als auch serverseitige Aspekte.\nStudierende sind nach erfolgreicher Teilnahme in der Lage, moderne Web Applikationen mit Hilfe von aktuellen Entwicklungsframeworks zu implementieren. Sie besitzen grundlegende Kenntnisse, diese Frameworks mit anderen zu vergleichen und die Vor- bzw. Nachteile zu beschreiben.\nZuletzt besitzen Studierende die Fähigkeit das Ergebnis aus Web-Entwicklungsprojekten vor einem Fachpublikum zu präsentieren.",
        "inhalt": "1. Web Site Genres\n-- Business Models in the Web\n-- Web 2.0 and Social Software\n-- Anything as a Service (XaaS)\n2. Web Site Design\n-- Key Issues of Customer-Centered Web Design\n-- An Overview of Web Design Patterns\n-- Knowing Your Customers\n-- Involving Customers with Iterative Design\n-- Processes for Developing Customer-Centered Sites\n-- Additional Viewpoints and Aspects\n3. Patterns for Web Site Design\n-- Explaining your Value Proposition\n-- Creating a Navigation Framework\n-- Basic and Advanced E-Commerce\n-- Designing Effective Page Layouts\n-- Making Site Search Fast and Effective\n-- Making Navigation Easy\n-- Speeding Up Web Sites\n-- Supporting a Wide Range of Devices (Responsive design)\n-- Integrating Multiple Touchpoints (Mobile apps, progressive web apps, and hybrid apps)\n-- Integrating Independently Developed Web Services, Content, and Processes\n4. Fundamental Concepts of Single-Page Web Applications\n-- HTML Concepts and Evolution\n-- CSS Concepts and their Link to HTML\n-- JavaScript Basics\n-- SVG and Canvas\n-- Web Components\n-- Single-Page Applications\n-- Component-based Frameworks\n5. Developing Single-Page Applications with a Specific Web Application Framework\n-- Web Application Framework Comparison\n-- Basic Concepts of the chosen Framework\n-- State Management\n-- Navigation & Routing\n-- Client-Server Communication\n-- Consuming RESTful Service\n6. Building REST-enabled Back-End Service\n-- Target Architecture and Development Environment\n-- Event-Driven Architecture and Asynchronous I/O Operations\n-- Creating REST Interfaces\n-- Using Document-Oriented Database Storage\n-- Enabling User Authentication on the Web Service\n7. Advanced Topics in Web Application Engineering\n-- Real-Time Web Applications\n-- Virtual DOM\n-- Hybrid Web Applications\n-- Other Web Frameworks\n-- Traditional Web Stacks, Server-Side Rendering\n8. High Performance Web Applications\n-- Database Options for Web Applications\n-- Scaling Web Applications"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460528&pOrgNr=1",
        "name": "Software Engineering für betriebliche Anwendungen - Bachelorkurs",
        "kennung": "IN2085",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an dem Modul sind die Studierenden in der Lage, die bei der Analyse, dem Entwurf und der Realisierung betrieblicher Anwendungen auftretenden \"domänenspezifischen\" Problemstellungen (Persistenz, Verteilung, Customizing, Mehrsprachigkeit, Betrieb, Wartung, Konfigurationsmanagement) zu verstehen und zu bewerten. Weiterhin können die Studenten diese Probleme durch in der Praxis bewährte Methoden und Technologien unter der Verwendung von Individual- und Standardsoftware adressieren sowie Vor- und Nachteile der verfügbaren Methoden fundiert darstellen. Außerdem sind die Studierenden nach der Teilnahme an dem Modul in der Lage, eigenständig die erlernten Konzepte beim Programmieren von betrieblichen Anwendungen praktisch anzuwenden.",
        "inhalt": "Inhalte umfassen:\n- Charakterisierung betrieblicher Informationssysteme\n- Requirements-Engineering für betriebliche Anwendungen\n- Persistenz: Konzepte, Werkzeuge, Technologien und Frameworks\n- Verteilung in Informationssystemen: Konzepte, Middleware und Architekturen\n- Mehrsprachigkeit und Internationalisierung\n- Standardsoftware vs. Individualsoftware\n- Customizing und Konfigurationsmanagement\n- Weiterführende Programmierparadigmen und -techniken"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=476726&pOrgNr=1",
        "name": "Softwarearchitekturen",
        "kennung": "IN2088",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an den Modulveranstaltungen verstehen die Studierenden die Bedeutung der Architektur eines Softwaresystems für den erfolgreichen Verlauf eines Entwicklungsprojekts. Sie kennen Techniken die zur Beschreibung, Konstruktion, Wiederverwendung und Evolution von Softwarearchitekturen angewendet werden. Sie verstehen Architekturen die zur Entwicklung von verteilten Systemen eingesetzt werden, sowie aktuelle Trends der Modellierung von Softwarearchitektur als Teil modellgetriebener Softwareentwicklung und die Bedeutung der Softwarearchitektur für Softwarewiederverwendung.",
        "inhalt": "- Beschreibung von Softwarearchitekturen\n- Konstruktion von Softwarearchitekturen\n- Wiederverwendung von Softwarearchitekturen\n- Evolution von Softwarearchitekturen und Refaktorisierung\n- Architekturen von verteilten Systemen\n- Modellgetriebene Softwareentwicklung\n- Aktuelle Trends"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=608628&pOrgNr=1",
        "name": "Software-Engineering in der industriellen Praxis",
        "kennung": "IN2235",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul verfügen die Studierenden über einen fundierten, ganzheitlichen Überblick der verschiedenen Tätigkeitsprofile und Berufsbilder von Informatikern und Wirtschaftsinformatikern in der Software-Entwicklung für Unternehmen. Zudem verstehen Studierenden nach der Teilnahme an dem Modul aktuelle softwaretechnische Herausforderungen und Entwicklungen der Praxis.",
        "inhalt": "Die Vorlesung ist aus der industriellen Softwarepraxis motiviert. Anhand von Praxisbeispielen wird die typische Struktur von großen betrieblichen Informationssystemen gezeigt. Weiterhin werden wichtige Aspekte ihrer Gestaltung und Erstellung vorgestellt. Oft spielt ein solches System die Rolle des Nervenzentrums eines Unternehmens, es enthält wesentliches Geschäftswissen und ist Schlüssel für den wirtschaftlichen Erfolg des Unternehmens. Ein betriebliches Informationssystem mit dieser Bedeutung sollte entsprechend als Investitionsgut betrachtet werden. Sowohl für die Erstellung, als auch für den Betrieb und die Weiterentwicklung während der Lebensdauer sind nüchterne Kosten-Nutzen-Rechnungen (u. a. ROI) erforderlich. Eine durchdachte Software-Architektur verbessert in der Regel die Ergebnisse dieser Rechnungen.\nDie Vorlesung wird durch eingeladene Vorträge von Führungskräften aus Beratungsunternehmen und von großen Anwendern ergänzt."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3474598&pOrgNr=1",
        "name": "Statistical Foundations of Learning",
        "kennung": "CIT4230004",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, the students are able to:\nILO-1. mathematically analyze algorithms for data classification and clustering\nILO-2. remember techniques from statistics (limit theorems, concentration inequalities), which can be used in data analysis\nILO-3. apply statistical tools to improve performance of algorithms\nILO-4. judge the limitations of machine learning problem formulations, and statistical theories",
        "inhalt": "This course introduces the students to a statistical perspective of machine learning, and provides mathematical tools to analyze the performance of machine learning algorithms.\nThe first part of the course introduces concepts on statistical learning theory and other foundational results for machine learning. In particular, the following topics is covered:\n- Risk minimization, Bayes risk, Empirical risk (8 AE, 1 AE = 45 mins)\n- Statistical consistency and universal consistency (4 AE)\n- Vapnik-Chervonenkis (VC) theory of generalization (8 AE)\n- PAC learning and No free lunch theorem (6 AE)\n- Algorithmic stability (4 AE)\n- Universal approximation theorem (2 AE)\n- Boosting (4 AE)\n- Above techniques will be used to study generalization of Nearest Neighbor rule, Support Vector Machine and Neural Networks (6 AE)\n\nThe second part of the course introduces some advanced and recent topics on the theory of learning:\n- Approximation bounds for clustering (6 AE)\n- Theory of over-parametrized models (4 AE)\n- Training dynamics of neural networks, including neural tangent kernel (6 AE)\n\nA concluding lecture (2 AE) will present some current challenges and recent works in the statistical foundations of learning."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1764854&pOrgNr=1",
        "name": "Statistical Foundations of Learning",
        "kennung": "IN2378",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, the students are able to:\n1. mathematically analyze algorithms for classification, regression and clustering\n2. critically think about pitfalls and limitations of learning problems\n3. apply statistical tools to improve performance and efficiency of algorithms\n4. remember techniques from modern statistics (concentration inequalities etc), which can be used in broader context of data analysis",
        "inhalt": "The success of machine learning has been unprecedented in the past few years. It is natural to wonder why popular machine learning algorithms exhibit good performance on a wide range of problems. This course will take a foundational perspective on learning, and will describe the mathematical principles that are useful for theoretically analyzing the performance of machine learning algorithms. The course is intended for students with mathematical familiarity, who are curious to gain a deeper theoretical understanding of machine learning.\n\nThe course will focus on statistical learning theory that provides the foundation for a systematic study of supervised learning. The following topics will be covered:\n- Bayes error for classification and regression\n- Vapnik-Chervonenkis (VC) theory\n- Probably-Approximately-Correct (PAC) learning and No free lunch theorem\n- Empirical risk minimization and loss functions\n- Analysis of Nearest Neighbor, Support Vector Machine (SVM) and Neural Networks\n- Boosting\n\nThe course will also briefly cover some recent (advanced) topics, such as:\n- Gradient descent and its implicit bias\n- Double descent phenomena of over-parametrised ML models\n- Kernel approximation of wide neural networks"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3260506&pOrgNr=1",
        "name": "Strategic IT Management",
        "kennung": "CIT4230000",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After participating in the module, students will be able to understand the key challenges, concepts, methods and decision areas of strategic IT management and their interactions. Furthermore, students will understand the relationship between strategic IT management, enterprise architecture management, scaled agile software development and IT governance. Moreover, after participating in the module, students have in-depth knowledge of patterns and frameworks of enterprise architecture management and scaled agile software development in the areas of models, methods, metrics and visualizations, among others.",
        "inhalt": "1. IT Strategy and IT Management Frameworks\n2. IT Governance and IT Organisation\n3. Enterprise Architecture Management\n3.1 Schools of EAM\n3.2 Foundations of EAM\n3.3 Capability Based Planning\n3.4 Agile EAM and EAM Patterns\n4. Large-scale Agile Software Development\n4.1 Foundations and Frameworks of LSAD\n4.2 Selected Topics of LSAD\n5. Case Studies"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=563556&pOrgNr=1",
        "name": "Systems Engineering",
        "kennung": "IN8015",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach erfolgreicher Teilnahme an dem Modul sind die Studierenden in der Lage:\n- die unterschiedlichen Aktivitäten der Systementwicklung zu benennen, voneinander abzugrenzen und zueinander sowohl inhaltlich als auch in ihrer zeitlichen Verzahnung in Bezug zu setzen,\n- Spezifika unterschiedlicher technischer Domänen und die Konsequenz ihrer Unterschiede für die Entwicklung zu benennen,\n- grundlegende Abstraktionen, wie etwa Schnittstellen, und Modellierungsansätze für cyberphysikalische Systeme zu verstehen und im Systementwurf anzuwenden sowie\n- komplexe cyberphysikalische Systeme auf einem hohen Abstraktionsgrad mit üblichen Formalismen zu modellieren.",
        "inhalt": "Einführung in das Systems Engineering, Systemmodellierung, Entwicklungsmethoden, Phasenmodelle, Projektmanagement, Anforderungsermittlung/-analyse, Schnittstellen, Spezifikation, Systementwurf, Architektur und Schnittstellenspezifikation, Modul-, Integrations- und Systemtest, Versions- und Konfigurationsmanagement, Software- und Systemwartung"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=710375&pOrgNr=1",
        "name": "Tanz und Schauspiel im Virtuellen Studio",
        "kennung": "IN2264",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach Abschluss dieses Moduls sind Studierende in der Lage, eine Auswahl aktuell am Markt verfügbarer neuartiger Interaktionsgeräte zum Motion Capturing eigenständig in Spieleanwendungen einzubeziehen. Desgleichen können sie einfache virtuelle Charaktere erstellen und steuern. Sie kennen Softwaresysteme zur Interpretation von Bewegungsdaten, sowie Komponenten einer Pipeline zum Anlernen ausgewählter Gesten kennen. Durch den praktischen Umgang mit diesen Systemen haben sie Erfahrungen, wie der Schwierigkeitsgrad ausgesuchter Ideen für interaktiven Tanz und Schauspiel von der aktuellen Qualität und den Grenzen verfügbarer Interaktionsgeräte und Gesteninterpretationssoftware abhängt. Die Lernergebnisse entsprechen denen in dem parallelen Modul IN2265 (Active SportGames) – aber die Spielszenarien sind unterschiedlich.",
        "inhalt": "Grundlegende Kenntnisse und Umsetzungserfahrung in den Bereichen:\n+ Ansteuerung und Einbindung neuer Interaktionsgeräte\n+ Interpretation von Trackingdaten als Körperbewegungen\n+ Charakter Animation"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1446514&pOrgNr=1",
        "name": "Technik und Recht",
        "kennung": "IN9049",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der erfolgreichen Teilnahme an diesem Modul sind die Studierenden in der Lage:\n• die wichtigsten Entwicklungsphasen auf dem Weg zum Technikrecht und das Verhältnis von Technik und Recht zu skizzieren.\n• die wichtigsten Grundlagen der zivil- und strafrechtlichen Haftung und deren Anwendung auf autonome Systeme zu verstehen.\n• Sorgfaltsmaßstäbe zu identifizieren und somit Fragen der Fahrlässigkeit einer adäquaten Lösung zuzuführen.\n• anhand von unbekannten technischen Sachverhalten sich ergebende Probleme für die zivil- und strafrechtliche Haftung zu skizzieren.\n• die wichtigsten Strukturen und Prinzipien des Datenschutzrechts darzustellen und die europäischen Einflüsse auf das Rechtsgebiet nachzuvollziehen.\n• die Zulässigkeit von Fahrerassistenzsystemen und die Herausforderungen, die sich bei autonomen Fahrzeugen z.B. für die zivilrechtliche Haftung stellen, darzustellen und zu beschreiben.\n• die Verantwortlichkeit von Providern nach dem Telemediengesetz differenzieren zu können und problematische Einzelfälle diskutieren.\n• das Erlernte auf unbekannte Fälle anzuwenden und eigenständig Lösungen zu entwickeln, in denen sie die rechtlichen Aspekte mit den technischen verknüpfen. So werden sie die Linie zwischen „rechtlich Erlaubtem“ und „technisch Möglichem“ ziehen können.",
        "inhalt": "Folgende fachlichen Inhalte werden im Modul vermittelt:\n1. Einleitung\na) Das Verhältnis von Technik und Recht\nb) Die Geschichte des Technikrechts\n\n2. Grundlagen zivilrechtlicher Haftung\na) Grundsätzliches\nb) Herausforderungen durch die Autonomik\nc) Relevante Urteile\nd) Fallbeispiele zur vertraglichen Haftung\n\n3. Grundlagen strafrechtlicher Verantwortlichkeit\na) Grundsätzliches\nb) Relevante Straftatbestände\nc) Herausforderungen durch die Autonomik\nd) Relevante Urteile\ne) Fallbeispiele zur strafrechtlichen Verantwortlichkeit\n\n4. Datenschutz und Datensicherheit\na) Rechtshistorische und –politische Hintergründe des Datenschutzrechts\nb) Anwendungsbereich des BDSG\nc) Erlaubnistatbestände\nd) Rechte und Pflichten\ne) Datensicherheit\nf) Relevante Urteile\ng) Herausforderungen durch die Autonomik\nh) Fallbeispiele zum Datenschutz\n\n5. Fahrerassistenzsysteme im Straßenverkehr\na) Verkehrs- und Zulassungsrecht\nb) Änderungen des Wiener Übereinkommens im März 2016\nc) Rechtliche Auswirkungen des Betriebs von automatisierten Fahrzeugen auf die zivilrechtliche Haftung\nd) Relevante Urteile\ne) Fallbeispiel\n\n6. Providerhaftung\na) Grundsätzliches\nb) Das Telemediengesetz (TMG)\nc) Verantwortlichkeit der Anbieter nach dem TMG"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2809143&pOrgNr=1",
        "name": "Tensornetzwerke",
        "kennung": "IN2388",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with the mathematical formalism and graphical notation for tensor networks. They can assess and apply tensor network approaches for approximating high-dimensional data. They understand why tensor network methods are suitable for simulating strongly correlated quantum systems, and are familiar with corresponding algorithms.",
        "inhalt": "- Fundamentals and graphical representation of tensor networks\n- Mathematical approximation theory\n- Backpropagation through tensor network operations\n- Simulating strongly correlated quantum systems and digital quantum computers\n- Probability distribution sampling using tensor networks"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=487473&pOrgNr=1",
        "name": "Tracking and Detection in Computer Vision",
        "kennung": "IN2210",
        "organisation": "Department Computer Science",
        "anmerkung": "seit WS15 7 Credits und 6 SWS",
        "lernergebnisse": "In the end, the students will have a thorough description of the most important tracking and detection techniques. They should be able to understand and implement those solutions and apply them in reasonably complex problems. The concepts described in this course will be accompanied with brief explanations of the necessary mathematical tools. The participants of this course will be given an important basis to follow the vast and growing Computer Vision literature and use the acquired knowledge to solve new practical problems.",
        "inhalt": "Computer Vision, as a relatively young research area, has emerged as a key discipline in computer science.\nThis is not only evident by a growing and highly competitive research community with a high impact factor in computer science, but also by the emergence of numerous vision companies turning research ideas into a myriad of commercial applications. Besides well-known studies of 3D geometry and camera models, object tracking and detection in images and videos becomes one of the principal research directions of modern Computer Vision. The main objective of this course is to provide students with a gradual introduction to modern tracking, detection and recognition techniques developed in the last years. The course will provide in-depth knowledge of image features, their detection and description, matching techniques, key-point recognition, basic and advanced tracking algorithms based on image features and image intensities, basics of probabilistic and machine learning methods for tracking and object detection. Note that every year the course content is refreshed with new the most promising and potentially the most influential works in the field.\nThe following topics will be handled\n\n- Introduction (overview of the course)\n- Convolution and filtering:\n-- Basic of image formation\n-- Convolution and correlation\n-- Non-linear filtering\n-- Gaussian Filtering\n-- Image Derivatives\n-- Edge Detection\n- Local invariant feature detectors:\n-- Harris corner\n-- Harris Laplace/Affine\n-- Hessian, Hessian-Laplace/Affine\n-- FAST\n- Feature descriptors:\n-- Difference of Gaussians and SIFT\n-- Integral images and SURF\n-- Histogram of Oriented Gradients (HOG)\n- Keypoint recognition:\n-- Randomized trees\n-- FERNS\n-- Keypoint signatures\n- Face detection\n-- Haar features\n-- Ada-boost\n-- Viola-Jones Face Detection\n- Camera models and projections\n-- Model based tracking\n-- Pose estimation from 2D-3D coresspondencies (DLT, P-n-P)\n-- Rotation parametrization\n- Non-linear optimisation\n-- Robust estimators\n-- RANSAC\n- Template tracking methods:\n-- Lucas-Kanade,\n-- Compositional Alg.\n-- Inverse Compositional\n-- ESM\n-- Linear Predictor\n- Mean-shift tracking\n-- mean-shift for pdf estimation\n-- mean-shift for segmentation\n-- mean-shift for object tracking\n-- multi-scale\n- Template matching approaches\n-- basic correlation methods (SAD, NCC etc.)\n-- DOT(Dominant Orientation Template)\n-- LineMod (LINEarizing the memory multiMODal template matching)\n- Kalman and particle filtering\n-- basics Kalman filer\n-- basics Particle filer\n-- applications to visual tracking\n-- applications to camera tracking\n- Tracking with Dictionary Learning"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=757477&pOrgNr=1",
        "name": "Transaction Systems",
        "kennung": "IN2267",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Die Studierenden\n- verstehen die Interaktion von Transaktionsverwaltung und Recovery\n- können Transaktionen sicher und trotzdem effizient entwickeln, so dass ACID-Transaktionen mit hoher Nebenläufigkeit erreicht werden",
        "inhalt": "- Konzepte von Korrektheit\n- Algorithmen für die Mehrbenutzersynchronisation (Concurrency Control)\n- Multiversion Concurrency Control\n- Concurrency Control für Objekte\n- Concurrency Control für relationale Datenbanken\n- Concurrency Control für Indexstrukturen\n- Implementierung der Mehrbenutzersynchronisation\n- Transaktionsfehlerbehandlung (Recovery)\n- Crashrecovery\n- Mediarecovery\n- Anwendungsrecovery\n- Verteilte Mehrbenutzersynchronisation\n- Verteilte Transaktionsrecovery"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473924&pOrgNr=1",
        "name": "Trendseminar CDTM",
        "kennung": "IN9026",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Teilnehmer beherrschen die Grundlagen der Trendforschung ebenso wie die Grundlagen wissenschaftlichen Arbeitens, können in interdisziplinären Teams arbeiten, Seminararbeiten auf Englisch erstellen und Arbeitsergebnisse auf Englisch präsentieren.",
        "inhalt": "Technische, ökonomische und soziale Auswirkungen von ausgewählten, aktuellen Trends"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1060610&pOrgNr=1",
        "name": "Turbulent Flow Simulation on HPC-Systems",
        "kennung": "IN2311",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After participation in this module, the students are able to understand problems in the field of modelling turbulent flows. They can analyze and implement algorithms to solve the corresponding model equations. Furthermore they can implement these algorithms in parallel code for distributed computing systems and can thus execute parallel simulations.\nThey are able to develop an understanding of the different approaches to computational fluid dynamics by the two fields of research (computer science, fluid dynamics) and they can thus successfully apply the learned techniques of effective work in interdisciplinary teams.",
        "inhalt": "- introduction of the RANS-equations for incompressible flows: concept of RANS and a short introduction to turbulence\n- introduction to programming in C++, numerical discretization of conservation equations, techniques for solving incompressible flow problems, algorithms for solving differential equations, visualization of simulation data\n- introduction to parallelization, application of existing toolkits\n- introduction to applied turbulence modelling, method for validating simulation results, creation of experimental and numerical results and their processing"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=977322&pOrgNr=1",
        "name": "Virtuelle Trainingswelten",
        "kennung": "IN2302",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme am Modul können die Studierenden ermessen wie und wodurch Gametechnologien das Lernen und Trainieren von morgen verändern werden. Sie sind im Anschluss in der Lage das Erlernte auf vergleichbare Projekte in der Industrie zu übertragen und anzuwenden. Auf Basis der Grundlagen können die Voraussetzungen für eigene, neue Trainingswelten geschaffen werden. Darüber hinaus sind die Studierenden in der Lage die Diversität der unterschiedlichen Disziplinen in einem Gameprojekt zu erkennen und angemessen zu bewerten.",
        "inhalt": "In diesem Modul wird der Frage nach dem Nutzen von Virtuellen Trainingsmodellen nachgegangen. Es werden dabei verschiedene Aspekte und Grundsätze des, vor allem spielerischen, Lernens erläutert und erlernt:\n- Training und Lernen soll auch Spaß machen\n- Virtualität und Management, zwei ergänzende Welten\n- Was ist ein Spiel aus Sicht des Managements?\n- Die Lust am Lernen und Arbeiten\n- Studieren und arbeiten in der virtuellen Welt\n- Mobiles Arbeiten und Lernen ist omnipräsent und wird zum Motor moderner Wissensgesellschaften\n- Die Dynamik der Zeit\n- Künstliche Charaktere (Avatare) In der virtuellen Arbeitswelt von morgen\n- Der Uncanny-Valley Effekt\n- Der Weg vom realen Vorbild zum künstlichen Charakter\n- Game Technologie als Antrieb virtueller Arbeitswelten\n- Motivation durch Gamification\n- Die Verbindung von Game-Film-Lernen"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1528428&pOrgNr=1",
        "name": "Visual Data Analytics",
        "kennung": "IN2026",
        "organisation": "Department Computer Science",
        "anmerkung": "auf 5 Credits erhöht ab WiSe 13/14",
        "lernergebnisse": "After successful completion of the module, the students have gained advanced knowledge concerning the visualization pipeline, ranging from data acquisition to the final image of the data. This includes knowledge about the application specific data representations, data interpolation and approximation techniques for discrete data sets, data filtering techniques like convolution, as well as the final mapping stage to generate a renderable representation from the data. The students know the common methods which are used in information visualization to graphically depict abstract data, and in scientific visualization to graphically depict 2D and 3D scalar and vector fields, including isocontouring, direct volume rendering, flow visualization, and terrain rendering. They can analyze and categorize available techniques in terms of quality, efficiency, and suitability for a particular data type, and they can model and develop new approaches considering application-specific requirements. In the practical exercises the student learn about the functionality of commonly used visualization tools, they can evaluate available tools based on their functionality, and they can apply these tools to create own visualizations of given data sets.",
        "inhalt": "Visualization pipeline (data acquisition, filtering, display), information visualization vs. scientific visualization, grids and grid construction (Delaunay triangulation), interpolation in grids (inverse distance weighting, radial basis functions), discretization aspects, visualization of scalar fields (color coding, iso-contours and iso-surfaces, volume rendering, vector field visualization (particle-based visualization, line integral convolution, topological approaches), terrain rendering including adaptive meshing techniques and hierarchical data representations using quadtree and octrees."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1820439&pOrgNr=1",
        "name": "Visuelle Programmierung in der Spielebranche",
        "kennung": "IN2382",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach Teilnahme an diesem Modul ist der Studierende in der Lage, komplexe Zusammenhänge mithilfe von visueller Programmierung zu verstehen und zu erklären. Außerdem können visuelle Programme bewertet werden und in Verbindung mit klassischer Programmierung können eigenständig Lösungsansätze für unterschiedliche Probleme entworfen werden.",
        "inhalt": "Visuelle Programmierung gewinnt mehr und mehr an Bedeutung als Werkzeug im interdisziplinären Kontext der Spieleentwicklung.\nAnhand von aktuellen Beispielen wird den Studenten die Entwicklung von Computerprogrammen mit visueller Programmierung, deren Rolle in industrieüblichen Games-Projekten und andere strukturelle und Software-architektonische Standards erläutert. Als Entwicklungsumgebung kommen die Unreal Engine, sowie Visual Studio zum Einsatz. Spezieller Fokus liegt hier auf:\n- Funktionsweisen und Konzepte von Graph-basierten Programmen\n- Event-basierte visuelle Programmierung\n- Shader\n- State-Machines\n- Behavior-Trees\n- Schnittstellen zwischen textbasierter und visueller Programmierung\n- Bewährte Methoden für Workflow-orientierte Projektsetups\n- Einblicke in gängige Game Engines (z.B. Unreal Engine 4)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=977325&pOrgNr=1",
        "name": "Von der Idee zum Produkt",
        "kennung": "IN2303",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an diesem Modul haben die Studierenden praxisrelevante Kenntnisse zum methodischen Vorgehen bei der Entwicklung von Spieleideen. Die Teilnehmer beherrschen die methodischen Prozesse der Produktentwicklung und können diese auf das Gamedesign übertragen.\nDie Teilnehmer sind dadurch in der Lage die Wahrscheinlichkeit eines Erfolgs des Spieles signifikant zu erhöhen, indem sie diese prozessorientierte Arbeitsweise im kreativsten Teil der Entwicklung eines Computerspiels, dem Game Design, zur Anwendung bringen.",
        "inhalt": "Ein erfolgreiches Computerspiel lebt nicht von der Spieleidee alleine. Es ist ein Zusammenspiel eines Prozesses der Entwicklung, der in der ersten Näherung für die Gestaltung/Design eines jeden Produktes gilt. Die sechs, grundlegenden Schritte \"verstehen\", \"beobachten\", \"Sichtweise definieren\", \"Ideen finden\", \"Prototypen entwickeln\" und \"testen\" werden einzeln erörtert, mit Beispielen hinterlegt und anschließend am eigenen Projekt angewandt."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3049513&pOrgNr=1",
        "name": "Weiterführende Bioinformatik",
        "kennung": "IN2399",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "Wenn die Studierenden das Modul bestanden haben, erinnern und verstehen sie die Theorie der ausgewählten fortgeschrittenen Themen. Sie sind in der Lage bei einem Problem, das den präsentierten ähnelt, die angemessenen Methoden auszuwählen und anzuwenden. Sie können die entsprechenden Werkzeuge richtig bedienen und ihre eigenen Lösungen basierend auf existierenden Frameworks implementieren.",
        "inhalt": "Die folgenden Themen werden behandelt:\n- Wissenschaftliche Prinzipien und Struktur wissenschaftlicher Vorträge und Schriftstücke\n- Grundlagen des maschinellen Lernens auf biologischen Sequenzen\n- Grundlagen des Deep Learnings\n- Fortgeschrittene Codierung und Deskriptoren von Proteinen (z. B. PSSM, Sprachmodelle, Evolutionary Couplings, etc.)\n- Deep learning auf Proteinen\n- Ausgewählte Themen in der Massen- und Einzelzellsequenzierung, die die Datenverarbeitung und Analyse abdecken mit Anwendungen die von der Genomik und Epigenomik bis zur Transkriptomik reichen\n- Einführung in die Proteomik\n- Ausgewählte Themen der Proteomik\n- Regulatorische Netzwerke\n- Fortgeschrittene Proteinstruktur"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1004061&pOrgNr=1",
        "name": "Wissenschaftliche Visualisierung",
        "kennung": "IN8019",
        "organisation": "Department Computer Science",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module, the students have gained advanced knwowledge concerning the visualization pipeline, ranging from data acquisition to the final image of this data. This includes knowledge about the application specific data representations, data interpolation and approximation techniques for discrete data sets, data filtering techniques like convolution, as well as the final mapping stage to generate a renderable representation from the data. The students know the methods which are used in scientific visualiztion to graphically depict 2D and 3D scalar and vector fields, including isocontouring, direct volume rendering and flow visualization. They can analyse and categorize availaible techniques in terms of quality, efficiency, and suitability for a particular data type, and they can model and develop new approaches considering application-specific requirements.",
        "inhalt": "Visualization pipeline (data acquisition, filtering, display), information visualization vs. scientific visualization, grids and grid construction (Delaunay triangulation), interpolation in grids (inverse distance weighting, radial basis functions), discretization aspects, visualization for scalar fields (color coding, iso-contours and iso-surfaces, volume rendering, vector field visualization (particle-based visualization)."
    }
]