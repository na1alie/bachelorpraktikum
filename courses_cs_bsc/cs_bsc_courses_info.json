[
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=455630&pOrgNr=1",
        "name": "Introduction to Informatics",
        "kennung": "IN0001",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of the module participants understand the essential concepts of computer science on a fundamental, practice-oriented, but scientific level and can handle them responsibly.\nConcepts of this kind are for example: Algorithms, syntax and semantics, as well as efficiency in terms of memory consumption or time.\nParticipants are then able to solve well-posed algorithmic problems and to implement basic distributed and concurrent applications in Java or a similar object-oriented language. They understand the underlying concepts and models and are therefore able to acquire skills in other imperative and object-oriented programming languages on their own.",
        "inhalt": "The module IN0001 is concerned with topics such as:\n- Introduction\n++ Basic notions: Problem - algorithm - program\n++ Imperative programming constructs\n- Syntax and semantics\n++ Syntax of programming languages: regular expressions and contextfree grammers\n++ Semantics of programs: control-flow graphs\n- Basic data structures I\n++ Numbers, strings, arrays\n++ Insertion sort\n- Recursion\n++ Binary search\n++ Patterns of recursion\n- Basic data structures II\n++ Objects, classes, methods\n++ Lists, stacks, queues\n- Object-oriented programming\n++ Inheritance\n++ Abstract classes and interfaces\n++ Polymorphism\n- Programming in the large (perspectives and integration into economic, social and ethical contexts)\n- Concurrency and Threads",
        "prerequisites": "Participants should attend IN0002 \"Fundamentals of Programming (Exercises & Laboratory)\" at the same time."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452812&pOrgNr=1",
        "name": "Introduction to Computer Organization and Technology - Computer Architecture",
        "kennung": "IN0004",
        "anmerkung": "",
        "lernergebnisse": "After attending this module students are able to understand computer systems as layered abstract machines. They get a first impression of the area of computer architectures and possess the following abilities:\nThey have learned to apply the main concepts of machine-oriented programming, microprogramming and circuit design. They understand the machine instruction cycles based on the underlying hardware at the register transfer level and they are able to classify computer architectures. The understand the basics of modern computer architecture.",
        "inhalt": "- Computer systems: basic architecture and organization: Von-\nNeumann-Computer, machine-instruction cycle, hardware-software interface\n- The Instruction Set Architecture (ISA): functionality and machineoriented Assembler programming\n- Micro-programmed implementation of machine instructions\n- Circuits, sequential circuits, circuit design with a formal language using the example of VHDL\n- Introduction to computer architecture: microprocessor architectures and systems, parallel and distributed systems, memory systems, I/O",
        "prerequisites": "none"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452816&pOrgNr=1",
        "name": "Introduction to Software Engineering",
        "kennung": "IN0006",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with the basic concepts and methods of the different phases of a project, e.g. modeling the problem, reuse of classes and components, and delivery of the software. They have the ability to select and apply suitable concepts and methods for concrete problems.\n\nThe students know the most important software engineering terms and workflows and are able to analyze and evaluate given problems. In addition, students can solve concrete problems in software engineering, e.g. with the help of design patterns.",
        "inhalt": "Software engineering applies systematic engineering principles to software development that involves the entire lifecycle of software creation, from defining requirements and designing the architecture to coding, testing, deployment, monitoring, and ongoing maintenance.\n\nLecture Units:\n\nL01 Introduction: This lecture provides a foundational overview of software engineering tailored for cloud environments. It covers essential concepts such as software development methodologies, system modeling techniques, and abstraction principles. Additionally, it explores cloud computing fundamentals, including cloud infrastructure, and service models.\n\nL02 System Design Requirements and Software Architectures: This unit focuses on the critical aspects of requirements engineering, differentiating between functional and non-functional requirements. It then explores diverse software architectures, such as client- server, layered, monolithic, and microservice architectures, detailing their communication mechanisms and deployment considerations.\n\nL03 System Design I: Modularity and Data Management: This lecture addresses the complexities of system design, emphasizing modularity, data management, and design patterns. Furthermore, it explores various data management solutions.\n\nL04 System Design II: Performance, Concurrency, and Scalability: This unit delves into performance optimization, concurrency management, and scalability strategies.\n\nL05 System Design III: Security, Reliability, and Availability: This lecture focuses on designing secure, reliable, and highly available systems.\n\nL06 Software Testing: This unit explores various software testing methodologies to ensure software quality and reliability. It covers unit testing, integration testing, automated large-scale testing techniques, mock testing, and test doubles.\n\nL07 Program Analysis: Static and Dynamic Analysis: This lecture covers program analysis techniques, including static and dynamic analysis.\n\nL08 Software Management, Build Systems, and DevOps: This unit covers essential software management practices, including source code management, build systems, release management, and continuous integration/delivery/deployment (CI/CD), along with continuous testing.\n\nL09 Software Deployment and Monitoring: This lecture explores cloud deployment models, container-based development and orchestration, and cloud system monitoring.\n\nL10 Software Quality and Project Management: This unit covers software quality assurance techniques (code reviews, refactoring, formal verification) and project management principles.",
        "prerequisites": "IN0002 Fundamentals of Programming (Exercises & Laboratory)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=454045&pOrgNr=1",
        "name": "Introduction to Theory of Computation",
        "kennung": "IN0011",
        "anmerkung": "",
        "lernergebnisse": "After successfully completing this module, the students understand the core concepts of the theory of computation on a basic but scientific level. They know what regular expressions, contextfree grammars, the Chomsky hierarchy, finite automata and Turing machines are. They can define formal languages with the appropriate grammars or machines. They can prove that a given language cannot be defined with a given class of grammars or machines. They can prove that certain grammars and machines are equivalent and they can transform them into each other algorithmically. They can explain the basic concepts of complexity theory and can reduce decision problems algorithmically to each other under given complexity limitations.",
        "inhalt": "Formal languages, grammars, Chomsky hierarchy.\n\nRegular languages: DFA, NFA with and without \u03b5-transitions, regular expressions and translations between them; systems of language equations; closure under boolean operations; Arden\u2019s lemma; pumping lemma; decision problems; minimization; Myhill-Nerode theorem.\n\nCFLs: PDAs and translation between CFGs and PDAs; proof that DPDAs are weaker than PDAs; closure properties; CYK algorithm; pumping lemma; Chomsky and Greibach normal forms.\n\nContext-sensitive languages and LBAs.\n\nComputability: computability, decidability, semi-decidability, recursive-enumerability and their relationships; existence of non-computable problems; Turing machines, accepted languages, type-0 languages: equivalence of Turig machines, While-programs and Goto-programs; primitive and \u00b5-recursive functions; reductions between problems; the Halting problem; universal Turing machines; Rice\u2019s theorem; Rice-Shapiro theorem; undecidability of the Post Correspondence Problem and important problems on CFGs.\n\nComplexity theory: time and space complexity classes; polynomial-time reductions; the classes P and NP; NP-completeness; Cook\u2019s theorem; important NP-complete problems and reductions between them.\n\nAll proofs are covered.",
        "prerequisites": "IN0015 Discrete Structures, MA0901 Linear Algebra for Informatics, MA0902 Analysis for Informatics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1458914&pOrgNr=1",
        "name": "Functional Programming and Verification",
        "kennung": "IN0003",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module, participants understand the key concepts of functional programming languages. They are able to solve well presented tasks in a functional programming language. Therefore, they are able to acquire programming skills on their own also in further functional programming languages. They also are familiar with the most important techniques for the verification of imperative and functional programming language and can apply them to simple programs.",
        "inhalt": "Among others, the module IN0003 is concerned with the following topics:\n- Correctness of imperative programs\n++ Verification according to Floyd or Hoare\n++ Termination\n++ Procedures\n- Basic concepts of functional programming\n++ Values, variables, functions\n++ Data++structures, pattern matching\n++ Higher order functions\n++ Polymorphic types\n++ Programming in the large: Structures and Functors\n++ Correctness of functional programs\n+++ Semantics of functional programs\n+++ Verification of functional programs",
        "prerequisites": "IN0001 Introduction to Informatics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452808&pOrgNr=1",
        "name": "Introduction to Informatics 2",
        "kennung": "IN0003",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module, participants understand the key concepts of functional programming languages. They are able to solve well presented tasks in a functional programming language. Therefore, they are able to acquire programming skills on their own also in further functional programming languages. They also are familiar with the most important techniques for the verification of imperative and functional programming language and can apply them to simple programs.",
        "inhalt": "Among others, the module IN0003 is concerned with the following topics:\n- Correctness of imperative programs\n++ Verification according to Floyd or Hoare\n++ Termination\n++ Procedures\n- Basic concepts of functional programming\n++ Values, variables, functions\n++ Data++structures, pattern matching\n++ Higher order functions\n++ Polymorphic types\n++ Programming in the large: Structures and Functors\n++ Correctness of functional programs\n+++ Semantics of functional programs\n+++ Verification of functional programs",
        "prerequisites": "IN0001 Introduction to Informatics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452818&pOrgNr=1",
        "name": "Fundamentals of Algorithms and Data Structures",
        "kennung": "IN0007",
        "anmerkung": "",
        "lernergebnisse": "The participants master the basic algorithms and data structures mentioned above. They are able to independently analyze their complexity and apply the corresponding analysis concepts to related algorithmic problems. Furthermore, the participants are able to use the algorithms and data structures handled, if necessary to modify them and to compare different solutions in their quality.",
        "inhalt": "First, the module studies the basics of efficiency and complexity analyses. Basic terminology, complexity measures, the Landau symbols and different machine models are introduced. Then, fundamental data structures and algorithmic problems are studied.\n- Data structures for sequences: Dynamic arrays, lists, stacks and queues are investigated. The complexity of each operation is analyzed.\n- Hashing: Hashing with chaining, universal hashing as well as various probing methods are examined. Perfect hashing and hash-based algorithms, e.g. for set intersection problems, may also be explored.\n- Sorting: First, simple algorithms such as InsertionSort, SelectionSort and BubbleSort are reviewed. Then, advanced algorithms such as MergeSort, HeapSort and QuickSort are investigated. Furthermore, sorting-based algorithms, the lower bound for comparison-based sorting, selection, RadixSort and external sorting may be covered.\n- Priority queues: Binary heaps and binomial heaps are presented in the module.\n- Search trees: Binary search trees, AVL trees and (a,b)-trees are investigated.\n- Graph algorithms: Various graph representations, traversal techniques using DFS/BFS, the computation of 2-connected components and strongly connected components, topological sorting, the computation of the shortest paths and minimum spanning trees are covered. Approaches for solving the Traveling Salesman Problem (TSP) may be studied.\nThe module may also cover data compression schemes (Huffman, Lempel-Ziv) and simple pattern matching algorithms.",
        "prerequisites": "IN0001 Introduction to Informatics 1, IN0015 Discrete Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452818&pOrgNr=1",
        "name": "Fundamentals of Algorithms and Data Structures",
        "kennung": "IN0007",
        "anmerkung": "",
        "lernergebnisse": "The participants master the basic algorithms and data structures mentioned above. They are able to independently analyze their complexity and apply the corresponding analysis concepts to related algorithmic problems. Furthermore, the participants are able to use the algorithms and data structures handled, if necessary to modify them and to compare different solutions in their quality.",
        "inhalt": "First, the module studies the basics of efficiency and complexity analyses. Basic terminology, complexity measures, the Landau symbols and different machine models are introduced. Then, fundamental data structures and algorithmic problems are studied.\n- Data structures for sequences: Dynamic arrays, lists, stacks and queues are investigated. The complexity of each operation is analyzed.\n- Hashing: Hashing with chaining, universal hashing as well as various probing methods are examined. Perfect hashing and hash-based algorithms, e.g. for set intersection problems, may also be explored.\n- Sorting: First, simple algorithms such as InsertionSort, SelectionSort and BubbleSort are reviewed. Then, advanced algorithms such as MergeSort, HeapSort and QuickSort are investigated. Furthermore, sorting-based algorithms, the lower bound for comparison-based sorting, selection, RadixSort and external sorting may be covered.\n- Priority queues: Binary heaps and binomial heaps are presented in the module.\n- Search trees: Binary search trees, AVL trees and (a,b)-trees are investigated.\n- Graph algorithms: Various graph representations, traversal techniques using DFS/BFS, the computation of 2-connected components and strongly connected components, topological sorting, the computation of the shortest paths and minimum spanning trees are covered. Approaches for solving the Traveling Salesman Problem (TSP) may be studied.\nThe module may also cover data compression schemes (Huffman, Lempel-Ziv) and simple pattern matching algorithms.",
        "prerequisites": "IN0001 Introduction to Informatics 1, IN0015 Discrete Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452820&pOrgNr=1",
        "name": "Fundamentals of Databases",
        "kennung": "IN0008",
        "anmerkung": "",
        "lernergebnisse": "Students are able to apply the essential concepts of relational database systems and can use and evaluate them systematically and in a qualified manner.\nThe students have the expertise to systematically use a database system starting from the conceptual design to the implementation design to the physical design. They are able to formulate even complex queries in SQL and have a basic understanding of logical and physical optimization based on relational algebra. Furthermore they know how to safe-guard a database application with respect to recovery, concurrency control and authorization.",
        "inhalt": "SQL, data integrity, theory of relational database design, physical data organisation (storage structures, index structures), query processing, transaction management, main features of error handling (recovery, backup) and multi-user synchronisation, security aspects (authorization), XML data modeling (optional); in the exercise the content is practiced along concrete examples",
        "prerequisites": "IN0015 Discrete Structures, IN0001 Introduction to Informatics 1"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458318&pOrgNr=1",
        "name": "Introduction to Computer Networking and Distributed Systems",
        "kennung": "IN0010",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module, participants understand the key concepts of technologies and methods of computer networks and distributed systems and are able to use key layered network architecture protocols to explain what protocol mechanisms are used in each layer and how they work. They understand the architecture of distributed applications like the World Wide Web based on Internet protocols, and the architecture of computer networks. Participants can determine the performance of selected networks and distributed applications, and can implement specific protocol mechanisms.",
        "inhalt": "- Computer networking\n++ Overview: Computer networking and the Internet\n+++ components (router, switches, clients, server)\n+++ design (topology, routing, packets vs. virtual circuits)\n+++ layered system structure (OSI and Internet)\n+++ historical background\n++ concepts used by multiple layers (covered within the appropriate layers):\n+++ Addressing\n+++ Error detection\n+++ Coding and modulation\n+++ Media access protocols\n+++ Flow control\n+++ Connection management\n+++ Packet vs. virtual circuit switching\n++ Layers:\n+++ Application layer: application protocols and applications\n++++ Tasks and interface\n++++ Examples: HTTP, DNS, SMTP (Mail), Peer-to-Peer protocols\n+++ Transport layer\n++++ Tasks and interface\n++++ Examples: TCP and UDP\n+++ Network layer\n++++ Tasks and interface\n++++ Routing: link state vs. distance vector protocols\n++++ Addressing: IP Addresses\n++++ Examples: IP, Routing in the Internet\n+++ Link layer\n++++ Tasks and interface\n++++ Examples: Ethernet, Wireless LAN\n+++ Physical layer\n++++ Tasks and interface\n++++ Examples\n- Distributed systems:\n++ Middleware, e.g. RPC\n++ Web Services\n- General tasks:\n++ Network management\n++ IT security\n+++ Basics of cryptography\n+++ Authentication, privacy, integrity\n+++ Protocols with security mechanisms, e.g.: IPsec, PGP, Kerberos, SSL, SSH, ...\n+++ Firewalls, intrusion detection\n\nContent of the Exercises:\nThe exercises cover comprehension questions and calculation tasks and target determination of performance of protocols and mechanisms of specific layers (Physical Layer, Data Link Layer, Network Layer, Transport Layer). Programming exercises address implementation of specific protocol mechanisms.",
        "prerequisites": "IN0001 Introduction to Informatics 1, IN0003 Introduction to Informatics 2 - since WiSe 2018/19 Functional Programming and Verification, IN0002 Fundamentals of Programming (Exercises & Laboratory)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452806&pOrgNr=1",
        "name": "Fundamentals of Programming (Exercises & Laboratory)",
        "kennung": "IN0002",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module, participants are acquainted with the programming language Java or a similar object-oriented programming languae and master programming in the small. They are able to realize programs on their own and to apply the fundamental concepts of Informatics as taught in module IN0001, on a basic practical but scientific level.",
        "inhalt": "Accompanying the module IN0001, assignments may excercise and apply for problem solving concepts, such as:\n- basic data structures\n- recursion\n- objects, classes and methods\n- lists, queues, and trees\n- advanced concepts of object-oriented programming\n- concurrency",
        "prerequisites": "Participants should attend IN0001 \"Introduction to Informatics 1\" at the same time."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2916139&pOrgNr=1",
        "name": "Basic Practical Course: Computer Architecture",
        "kennung": "IN0005",
        "anmerkung": "",
        "lernergebnisse": "After participating in the module, the students are able, in the context of modern computing systems (modern x86-64 processors, GPUs) to analyze the performance characteristics of programs, to use these results to develop targeted optimizations and thus to program complex hardware in a time- and energy-efficient manner and to evaluate their own implementations.",
        "inhalt": "- Performance analysis techniques\n- Benchmarking techniques\n- Profiling tools, e.g. perf, gprof, Callgrind\n- Use of hardware performance counters\n- Basics of C programming\n- Data structures, functions, strings, pointer arithmetic, I/O\n- Makefiles, debugging techniques, GDB, assertions\n- Basics of compiler optimizations\n- Framework: Application Binary Interface, defined\nbehavior\n- Influence of program annotations (pointer aliasing, alignment,\netc.) on performance\n- Basic models for parallel programming, Flynn's classification, etc.\nclassification\n- Optimization of instruction parallelism\n- Specialization in the context of the project work in one of the following\nareas:\n- Exploitation of vector units of modern processors\n- SIMD instructions in machine code\n- SIMD-Intrinsics in higher programming languages\n- Multi-threading with Pthreads or OpenMP\n- Synchronization, atomic operations\n- Cache optimizations\n- Programming models for heterogeneous systems (e.g. GPUs, FPGAs)",
        "prerequisites": "IN0004: Introduction to Computer Architecture"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=452814&pOrgNr=1",
        "name": "Laboratory: Computer Organization and Computer Architecture",
        "kennung": "IN0005",
        "anmerkung": "",
        "lernergebnisse": "After attending the lab course the students are able to execute small projects in the subject areas of assembly programming, microprogramming and hardware description languages. They learn to cooperate in small teams, to plan projects and to execute and document the project. They are capable of reporting on their project work both in oral and written form.",
        "inhalt": "Project work in small teams on the subjects of\n- Assembly language programming\n- Circuit design with VHDL",
        "prerequisites": "IN0004 Introduction to Computer Organization and Technology - Computer Architecture"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2911725&pOrgNr=1",
        "name": "IT Security",
        "kennung": "IN0042",
        "anmerkung": "",
        "lernergebnisse": "After successful participation in this module, participants understand the basic concepts, methods and protocols for protecting data and systems from manipulation and misuse at a fundamental, practice-oriented, scientific level. They understand the causes of security problems in today's systems, can reproduce the relationships between protection mechanisms and the problems they address and apply them to case studies. They also master basic methods of operational IT security management.",
        "inhalt": "- Basic concepts of IT security,\n- Selected security problems of today's systems and selected attacks,\n- Basics and practical methods of applied cryptography\n- Basic concepts and protocols for identification/authentication, access control and system security\n- Fundamentals of network security: firewall concepts and practice-relevant protocols for network security\n- Methods of operational IT risk and security management (ISM)",
        "prerequisites": "IN0001 Introduction to Informatics and IN004 Introduction to Computer Organization and Technology - Computer Architecture"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456350&pOrgNr=1",
        "name": "Efficient Algorithms and Data Structures",
        "kennung": "IN2003",
        "anmerkung": "",
        "lernergebnisse": "After completing the module, the students are able to analyze and to assess the runtime and the memory requirements of algorithms. Furthermore, they have a good understanding of numerous fundamental algorithms and data structures. This understanding enables them to design algorithms and data structures for new algorithmic problems.",
        "inhalt": "First, the basics of algorithm analysis are covered. Then fundamental data structures and basic algorithmic problems are presented.\nAs for the basics of algorithm analysis, various machine models, complexity measures and the solving of recurrence relations are studied.\nRegarding fundamental data structures, various search trees, hashing schemes, priority queues and union-find data structures are investigated.\nAs for basic algorithms, the focus is on the development of numerous max-flow and min-cut algorithms as well as algorithms for matching problems.",
        "prerequisites": "IN0015 Discrete Structures, IN0007 Fundamentals of Algorithms and Data Structures, IN0018 Discrete Probability Theory"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=455704&pOrgNr=1",
        "name": "Efficient Algorithms and Data Structures II",
        "kennung": "IN2004",
        "anmerkung": "",
        "lernergebnisse": "After attending the module students have a good knowledge about advanced algorithmic methods from the area of linear optimization. In addition they know about approximation algorithms and their importance when dealing with NP-hard problems. They know about several fundamental techniques for obtaining approximate solutions for combinatorial optimization problems, and they can apply these techniques to new problems.",
        "inhalt": "Linear Optimization\n- Modelling\n- Simplex method\n- Seidel's algorithm\n- Ellipsoid method\n- Karmarkar\n\nApproximation algorithms\n- Greedy methods\n- Local search\n- LP relaxation and rounding\n- Primal/dual approach",
        "prerequisites": "IN0015 Discrete Structures, IN0018 Discrete Probability Theory, IN2003 Efficient Algorithms and Data Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=455706&pOrgNr=1",
        "name": "Complexity Theory",
        "kennung": "IN2007",
        "anmerkung": "",
        "lernergebnisse": "The students know the important methods of the complexity theory. They have knowledge of computational models, complexity classes, reductions and completeness. Moreover, they have a profound knowledge of advanced concepts such as diagonalization, the polynomial hierarchy, space complexity, alternation, Boolean circuits, randomization and interactive proof systems. Furthermore, they can apply the appropriate methods and concepts to analyze new problems in their complexity.",
        "inhalt": "First, Turing Machines are covered thoroughly. Time and space complexity are studied. Moreover, circuits as computational models are investigated. The complexity classes L, NL, P, NP, PSPACE, EXP, NEXP, PH are introduced. Afterwards, completeness and fundamental structural relationships between complexity classes are established. Furthermore, the concept of alternation, Boolean Circuits, randomization and interactive proof systems are covered in the module.",
        "prerequisites": "IN0011 Introduction to Theory of Computation, IN0015 Discrete Structures, IN0007 Fundamentals of Algorithms and Data Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456364&pOrgNr=1",
        "name": "Parallel Algorithms",
        "kennung": "IN2011",
        "anmerkung": "",
        "lernergebnisse": "After successfully completing the course, students know the fundamentals of (massively) parallel computation, of parallel complexity theory and the analysis of parallel algorithms, and they are able to design and evaluate basic parallel algorithms.",
        "inhalt": "Basic parallel machine models\nElementary parallel algorithms\nAdvanced algorithms and methods for routing and sorting",
        "prerequisites": "IN0015 Discrete Structures, IN2003 Efficient Algorithms and Data Structures, IN0018 Discrete Probability Theory"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458189&pOrgNr=1",
        "name": "Advanced Network and Graph Algorithms",
        "kennung": "IN2158",
        "anmerkung": "",
        "lernergebnisse": "After attending the lectures, participants shall be able to evaluate specialized network problems w.r.t. their complexity and to solve them using advanced graph algorithms. In particular, this includes the analysis and evaluation of typical properties like robustness or vulnerability of complex networks. Further, participants shall be able to develop algorithms for the optimization of different network parameters.",
        "inhalt": "More insights into algorithmics of graphs following the lectures \"Fundamentals of Algorithms and Data Structures\", \"Efficient Algorithms and Data Structures 1/2\" with respect to new algorithmic methods, analysis, and application fields\n\nKey aspects:\n- Centrality indices and related algorithms\n- Density in (sub-)graphs\n- Advanced algorithms for connectivity problems\n- Assignment Problem / Hungarian Method\n\nFurther topics:\n- Graph coloring\n- Clustering\n- Network statistics\n- Network comparison\n- Algebraic methods\n- Spectral analysis\n- Robustness",
        "prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures, IN2003 Efficient Algorithms and Data Structures, IN2004 Efficient Algorithms and Data Structures II"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458193&pOrgNr=1",
        "name": "Randomized Algorithms",
        "kennung": "IN2160",
        "anmerkung": "",
        "lernergebnisse": "The participants have a profound knowledge of various fundamental principles of randomized algorithms, computational models, the corresponding mathematical analyses (deriving bounds using Markov, Chebyshev, Chernoff) and of several paradigmatic applications.",
        "inhalt": "The module first presents basic results in the area of randomized algorithms. Specifically, the randomized Quicksort algorithm as well as randomized algorithms for the problems min-cut, binary planar partition and verifying matrix multiplication are studied.\nThe concepts of Las Vegas and Monte Carlo Algorithms are discussed and various randomized complexity classes are defined. Game-theoretic techniques such as Yao\u2019s minimax principle are investigated and applied to the problem of game tree evaluation.\nMoments are covered and fundamental inequalities, such Markov\u2019s Inequality and Chebyshev\u2019s Inequality are established. They are then used for detailed analyses of the Coupon Collector Problem, the problem of computing the median and finding stable matchings. Furthermore, Chernoff bounds are introduced and used to analyze routing and wiring problems.\nThe probabilistic method is introduced and applied to numerous problems. Finally, randomized data structures such as treaps as well as universal and perfect hashing are analyzed.",
        "prerequisites": "IN2003 Efficient Algorithms and Data Structures, IN0015 Discrete Structures, IN0018 Discrete Probability Theory"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=629351&pOrgNr=1",
        "name": "Algorithmic Game Theory",
        "kennung": "IN2239",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of the module students are able to\n- understand the foundations of algorithmic game theory,\n- analyze different representations of n-player games,\n- compute and discuss various solutions concepts,\n- reason about the computational complexity of these solution concepts, and\n- analyze and sketch simple algorithms to find solutions for game-theoretic problems.",
        "inhalt": "Algorithmic game theory is a young research area at the intersection of theoretical computer science, mathematics, and economics that deals with the optimal strategic behavior in interactive situations. In this course, particular attention will be paid to algorithmic aspects of game-theoretic solution concepts such as Nash equilibrium and the design of economic mechanisms.",
        "prerequisites": "Modul IN0015 Discrete Structures (or equivalent)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=557075&pOrgNr=1",
        "name": "Computational Social Choice",
        "kennung": "IN2229",
        "anmerkung": "ab WS12/13 6 Credits",
        "lernergebnisse": "Upon completion of the module students are able to\n* understand the foundations of social choice theory,\n* to investigate axiomatic properties of aggregation functions,\n* to compute and compare different aggregation functions, and\n* to analyze the algorithmic properties of these functions.",
        "inhalt": "Social choice theory deals with the aggregation of individual preferences into a collective choice. This course focusses on the analysis and comparison of aggregation functions that are based on majority rule. Particular attention will be paid to computational aspects. List of topics: Preferences, voting rules, choice theory (rationalizability, consistency), May?s theorem, Arrow?s impossibility theorem, scoring rules, Fishburn?s classification of Condorcet rules, McGarvey?s theorem, top cycle, uncovered set, Slater set, Banks set, minimal covering set, tournament equilibrium set, Kemeny-Young-rule, computational complexity of voting rules.",
        "prerequisites": "Module IN0015: Discrete Structures (or equivalent).\nIt is expected that participants are experienced in formally proving statements and are familiar with standard theorem proving techniques. Additionally, basic knowledge of complexity theory is useful (e.g., Module IN0011)."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1493752&pOrgNr=1",
        "name": "Advanced Algorithms",
        "kennung": "IN2360",
        "anmerkung": "",
        "lernergebnisse": "The participants have a profound knowledge of various fundamental principles in the design and analysis of algorithms, as listed above, and of several paradigmatic applications.",
        "inhalt": "The module covers fundamental and classical material in the area of advanced algorithms. The material focuses on basic algorithm design and analysis principles. Specifically, it addresses greedy approaches, divide and conquer, dynamic programming, randomization, and amortization. These techniques are applied to develop solutions to cornerstone algorithmic problems. The agenda of the course encompasses the following topics.\nDivide and Conquer: Introduction -- deterministic Quicksort; geometric divide and conquer; closest pair problem; line segment intersection; Fast Fourier Transform (FFT).\n\nIntroduction to Randomized Algorithms: Las Vegas and Monte Carlo algorithms; primality test;\nRSA cryptosystem; verifying matrix multiplication.\n\nData Structures: Treaps -- randomized search trees; universal and perfect hashing; construction of suffix trees.\n\nAmortized Analysis: Dynamic tables; Fibonacci heaps.\n\nGreedy Algorithms: Interval scheduling; scheduling to minimize lateness; shortest paths in a graph.\n\nDynamic Programming: Matrix-chain multiplication; construction of optimal search trees; segmented least squares; edit distance; approximate string matching; sequence alignment.\n\nGraph Problems: Maximum-flow problem; computation of minimum cuts.\n\nComplexity: PSPACE -- A class of problems beyond NP; extending the limits of tractability.\n\nSelected topics: Stable marriage; local search; median computation; routing on the hypercube;\nthe probabilistic method",
        "prerequisites": "IN2007 Foundations: Algorithms and Data Structures,\nIN0015 Discrete Structures,\nIN0018 Discrete Probability Theory"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=977328&pOrgNr=1",
        "name": "Online and Approximation Algorithms",
        "kennung": "IN2304",
        "anmerkung": "",
        "lernergebnisse": "The participants of the module know the results of the fundamental online problems investigated, especially in the area of resource management, data structuring and scheduling, as well as the NP-hard graph, fulfillability and packing problems studied. Furthermore, they master the analysis concept of amortization and the algorithm design technique based on LP formulations. They can apply the results and concepts learned to solve new algorithmic problems.",
        "inhalt": "In the international algorithms community one research focus over the past years has been the design of online and approximation algorithms. Here the general goal is to develop approximate solutions to problems for which the computation of exact solutions is hard or even impossible.\nOnline algorithms: Classical algorithm theory assumes that, for a given problem, all data is known in advance. However, in practice, many problems are online, i.e. relevant input arrives incrementally over time. We will design algorithms that can cope with the handicap of not knowing the future. We will study problems in data structuring, the resource management in operating systems, robotics and large networks.\nApproximation algorithms: Many optimization problems that arise in practice are NP-hard. Assuming that P is not equal NP, these problems cannot be solved optimally in polynomial time. Again, one resorts to approximations. Of particular interest are polynomial time approximation schemes that compute (1+epsilon)-approximations, for any epsilon > 0, in polynomial time. We will study approximation algorithms for classical optimization problems.\nEmphasis of the course, beside algorithm design, is the careful and thorough mathematical analysis of the various strategies and solutions.",
        "prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures, IN0011 Introduction to Theory of Computation, IN0015 Discrete Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1498603&pOrgNr=1",
        "name": "Operations Research",
        "kennung": "IN0024",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module participants know basic techniques from the areas of decision analysis, linear programming and integer linear programming. They are able to model managerial planning- and decision making problems such as transport and flow network problems for example, and understand algorithms to solve them effectively. Students know the essential properties of these algorithms and managerially relevant applications.",
        "inhalt": "Decision analysis (decision trees, MCDM, investment decisions), linear programming, modeling of managerial optimization problems (transportation problem, assignment problem, goal programming), simplex (primal simplex algorithm, simplex tableau, revised simplex), sensitivity analysis and duality theory, mixed-integer programming (branch-and-bound, complexity theory, IP modeling), network models and network flow problems",
        "prerequisites": "IN0015 Discrete Structures, Mathematical treatment of the natural sciences"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=608652&pOrgNr=1",
        "name": "Analysis of Three-Dimensional Shapes",
        "kennung": "IN2238",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are familiar with continuous and discrete representations of three-dimensional shapes. Participants understand methods to analyze and compare three-dimensional shapes given in different representations and are able to implement these methods.",
        "inhalt": "It is a classical problem in Machine Vision to represent, analyze and compare three-dimensional shapes. In the last years this field has known a fast development leading to a number of very powerful algorithms with a solid mathematical foundation. In this course we will present some of these, discussing both, the mathematics involved and the practical issues for the implementation.\n\nTopics we plan to cover include:\n- Foundations of Differential Geometry of surfaces (tangent spaces, shape operator, metric, geodesics and their discrete versions)\n- Detection of intrinsic symmetries\n- Matching pairs or a collection of shapes\n- The Gromov-Hausdorff distance and its variants\n- Spectral methods (i.e. Laplace-Beltrami operators and their eigenspaces)\n- Conformal geometry applied to shape analysis\n- Shape matching based on continuum mechanics\n- Pointwise feature descriptors\n- Machine learning applied to 3D shape analysis",
        "prerequisites": "The requirements for the class are knowledge in basic mathematics, in particular multivariate analysis and linear algebra."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=480825&pOrgNr=1",
        "name": "Basic Mathematical Methods for Imaging and Visualization",
        "kennung": "IN2124",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of the module, participants understand the basic mathematical techniques and methods. They are then able to formulate real problems in the field of imaging and visualization mathematically, and to select methods for solving the problem, to optimize them and to evaluate them. They will also be able to apply these techniques and methods to other engineering disciplines such as artificial intelligence, machine learning, computer graphics, robotics etc.",
        "inhalt": "Basic and most commonly applied techniques will be presented in the lectures and demonstrated in example applications from Image Processing and Computer Vision. The same mathematical methods are also applied in other engineering disciplines such as artificial intelligence, machine learning, computer graphics, robotics etc.\n\nThe module IN2124 is covering topics such as:\n- Linear Algebra\n++ linear spaces and bases\n++ linear mappings and matrices\n++ linear equation systems, solving linear equation systems\n++ least squares problems\n++ eigen value problems and singular value decomposition\n- Analysis\n++ metric spaces and topology\n++ convergence, compactness\n++ continuity and differentiability in multiple dimension, taylor expansion\n- Optimization\n++ existence and uniqueness of minimizers, identification of minimizers\n++ gradient descent, conjugate gradient\n++ Newton method, fixed point iteration\n- Probability theory\n++ probability spaces, random variables\n++ expectation and conditional expectation\n++ estimators, expectation maximization method\n\nIn the exercises the participants have the opportunity to gain deeper understanding and to collect practical experience while implementing or applying the methods in order to solve real problems, .",
        "prerequisites": "IN0015 Discrete Structures, IN0018 Discrete Probability Theory, IN0019 Numerical Programming, MA0901 Linear Algebra for Informatics, MA0902 Analysis for Informatics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1002904&pOrgNr=1",
        "name": "Game Engine Design",
        "kennung": "IN0038",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module, the students have gained basic knwowledge concerning the rendering pipeline, ranging from object modelling and transformation to rasterization-based rendering. This includes knowledge about the specific object representations, geometry transformations, shading and lighting techniques, texture mapping, and real-time issues. The students know the basic methods to simulate simple motion dynamics of particles and efficiently detecting collisions between dynamic objects in virtual scenes. They can analyse and categorize available techniques in terms of quality, efficiency, and suitability for a particular object type, and they can transfer the learned concepts to solve related problems in the field of real-time rendering and animation.",
        "inhalt": "The module accompanies the module IN0039 Praktikum Game Engine Design. In the lectures, some of the basic algorithms used in real-time rendering and rigid body animation are discussed. Topics are polygon models, lighting models and shading, texture mapping, rasterization-based rendering pipeline, motion dynamics, time integration, partical systems, collision detection. While the lecture focusses on the discussion of the theory underlying real-time rendering and motion simulation algorithms, their efficient computer realization will be discussed and performed in the accompanying practical.",
        "prerequisites": "Introduction to programming and simultaneous participation in the module IN0039 Practical Course: Game Engine Design"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1517636&pOrgNr=1",
        "name": "Real-time Computer Graphics",
        "kennung": "IN0038",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module, the students have gained basic knwowledge concerning the rendering pipeline, ranging from object modelling and transformation to rasterization-based rendering. This includes knowledge about the specific object representations, geometry transformations, shading and lighting techniques, texture mapping, and real-time issues. The students know the basic methods to simulate simple motion dynamics of particles and efficiently detecting collisions between dynamic objects in virtual scenes. They can analyse and categorize available techniques in terms of quality, efficiency, and suitability for a particular object type, and they can transfer the learned concepts to solve related problems in the field of real-time rendering and animation.",
        "inhalt": "The module accompanies the module IN0039 Practical Course Real-time Computer Graphics. In the lectures, some of the basic algorithms used in real-time rendering and rigid body animation are discussed. Topics are polygon models, lighting models and shading, texture mapping, rasterization-based rendering pipeline, motion dynamics, time integration, partical systems, collision detection. While the lecture focusses on the discussion of the theory underlying real-time rendering and motion simulation algorithms, their efficient computer realization will be discussed and performed in the accompanying practical.",
        "prerequisites": "Introduction to programming and simultaneous participation in the module IN0039 Practical Course: Real-time Computer Graphics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1002905&pOrgNr=1",
        "name": "Practical Course: Game Engine Design",
        "kennung": "IN0039",
        "anmerkung": "",
        "lernergebnisse": "The students know and can apply the basic principles of the programming language C++ and the graphics API Direct3D. They can develop simple graphics programs on their own. They can apply the basic programming concpets and the concepts underlying interactive 3D graphics on an application-oriented, yet scientific level. The students know the basic functionality of current graphics APIs, and they can employ these concepts for the programming of interactive graphics applications.",
        "inhalt": "The modul accompanies the Game Engine Design lecture (module IN0038). The students learn the fundamental concepts of the programming language C++ and the graphics API Direct3D. They learn to realize real-time rendering algorithms on graphics accelerators using shader programming. The students program in small teams using established version control systems.",
        "prerequisites": "Introduction to programming and simultaneous participation in the module IN0038 Game Engine Design"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1517639&pOrgNr=1",
        "name": "Practical Course: Real-time Computer Graphics",
        "kennung": "IN0039",
        "anmerkung": "",
        "lernergebnisse": "The students know and can apply the basic principles of the programming language C++ and the graphics API Direct3D. They can develop simple graphics programs on their own. They can apply the basic programming concpets and the concepts underlying interactive 3D graphics on an application-oriented, yet scientific level. The students know the basic functionality of current graphics APIs, and they can employ these concepts for the programming of interactive graphics applications.",
        "inhalt": "The modul accompanies the Real-time Computer Graphics lecture (module IN0038). The students learn the fundamental concepts of the programming language C++ and the graphics API Direct3D. They learn to realize real-time rendering algorithms on graphics accelerators using shader programming. The students program in small teams using established version control systems.",
        "prerequisites": "IN0002 Fundamentals of Programming (Exercises & Laboratory) and parallel participation in the modul IN0038 Real-time Computer Graphics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=487473&pOrgNr=1",
        "name": "Tracking and Detection in Computer Vision",
        "kennung": "IN2210",
        "anmerkung": "seit WS15 7 Credits und 6 SWS",
        "lernergebnisse": "In the end, the students will have a thorough description of the most important tracking and detection techniques. They should be able to understand and implement those solutions and apply them in reasonably complex problems. The concepts described in this course will be accompanied with brief explanations of the necessary mathematical tools. The participants of this course will be given an important basis to follow the vast and growing Computer Vision literature and use the acquired knowledge to solve new practical problems.",
        "inhalt": "Computer Vision, as a relatively young research area, has emerged as a key discipline in computer science.\nThis is not only evident by a growing and highly competitive research community with a high impact factor in computer science, but also by the emergence of numerous vision companies turning research ideas into a myriad of commercial applications. Besides well-known studies of 3D geometry and camera models, object tracking and detection in images and videos becomes one of the principal research directions of modern Computer Vision. The main objective of this course is to provide students with a gradual introduction to modern tracking, detection and recognition techniques developed in the last years. The course will provide in-depth knowledge of image features, their detection and description, matching techniques, key-point recognition, basic and advanced tracking algorithms based on image features and image intensities, basics of probabilistic and machine learning methods for tracking and object detection. Note that every year the course content is refreshed with new the most promising and potentially the most influential works in the field.\nThe following topics will be handled\n\n- Introduction (overview of the course)\n- Convolution and filtering:\n-- Basic of image formation\n-- Convolution and correlation\n-- Non-linear filtering\n-- Gaussian Filtering\n-- Image Derivatives\n-- Edge Detection\n- Local invariant feature detectors:\n-- Harris corner\n-- Harris Laplace/Affine\n-- Hessian, Hessian-Laplace/Affine\n-- FAST\n- Feature descriptors:\n-- Difference of Gaussians and SIFT\n-- Integral images and SURF\n-- Histogram of Oriented Gradients (HOG)\n- Keypoint recognition:\n-- Randomized trees\n-- FERNS\n-- Keypoint signatures\n- Face detection\n-- Haar features\n-- Ada-boost\n-- Viola-Jones Face Detection\n- Camera models and projections\n-- Model based tracking\n-- Pose estimation from 2D-3D coresspondencies (DLT, P-n-P)\n-- Rotation parametrization\n- Non-linear optimisation\n-- Robust estimators\n-- RANSAC\n- Template tracking methods:\n-- Lucas-Kanade,\n-- Compositional Alg.\n-- Inverse Compositional\n-- ESM\n-- Linear Predictor\n- Mean-shift tracking\n-- mean-shift for pdf estimation\n-- mean-shift for segmentation\n-- mean-shift for object tracking\n-- multi-scale\n- Template matching approaches\n-- basic correlation methods (SAD, NCC etc.)\n-- DOT(Dominant Orientation Template)\n-- LineMod (LINEarizing the memory multiMODal template matching)\n- Kalman and particle filtering\n-- basics Kalman filer\n-- basics Particle filer\n-- applications to visual tracking\n-- applications to camera tracking\n- Tracking with Dictionary Learning",
        "prerequisites": "Most of the knowledge required should be part of the normal background in Computer Science, undergraduate/graduate Mathematics and Geometry."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261475&pOrgNr=1",
        "name": "Application and Implementation of Database Systems",
        "kennung": "IN2031",
        "anmerkung": "",
        "lernergebnisse": "Students command the components of modern database systems in detail, they know how to implement and evaluate the underlying algorithms and data structures, and are able to develop them further under different constraints.",
        "inhalt": "- Error Handling\n- Concurrency Control\n- Security and Privacy\n- Object Oriented und Object Relational Database Concepts\n- Deductive Databases\n- Distributed Databases\n- Business Intelligence: Data Warehousing, Data Mining\n- Main Memory Database Systems\n- XML and Database Systems\n- Database Concepts in the Context of Big Data Applications\n- Performance Evaluation",
        "prerequisites": "IN0008 Fundamentals of Databases, IN0007 Fundamentals of Algorithms and Data Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456388&pOrgNr=1",
        "name": "Electronic Publishing / Document Engineering and the World-Wide Web",
        "kennung": "IN2032",
        "anmerkung": "",
        "lernergebnisse": "Students are able to query modern digital documents semantically and process them in numerous ways, in consideration of the triangle of text, data and programs. This enables them to soundly evaluate the modern possibilities of electronic publishing on the Web. Students throughly comprehend the foundations of Web Publishing, including concepts, models, architectures, technologies, established practices and tools in the context of the Extensible Markup Language (XML). They correctly assess the state of the art with its strengths and deficits and form realistic expectations of future developments. They relate the topic of this module to other Informatics fields; e.g. to Software Engineering via modelling and processes, to Formal Languages and Compiler Construction via language specifications and tool development and to Databases via modelling and query languages. They recognize general Informatics paradigms in the context of Electronic Publishing.",
        "inhalt": "- Introduction, background, orientation\n- Document models (structured documents, semistructured data)\n- Character encoding (Unicode)\n- Encoding of structured documents (XML, XML Namespaces)\n- Schema languages and their formal foundation (DTDs, XML Schema, Relax NG, tree automata)\n- Addressing of XML fragments (XPath)\n- Transformation of XML documents (XSLT, XSL-FO)\n- Querying XML documents (XQuery)\n- Data input with XML technology (XForms)\n- Architectures for XML-based Web applications (XRX)\n- Applications",
        "prerequisites": "Fundamentals of Informatics as provided by e.g. IN0001 Introduction to Informatics 1, IN0006 Introduction to Software Engineering, IN0008 Fundamentals of Databases and IN0011 Introduction to Theory of Computation"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473867&pOrgNr=1",
        "name": "Database Systems on Modern CPU Architectures",
        "kennung": "IN2118",
        "anmerkung": "",
        "lernergebnisse": "Students\n- understand the interaction between database systems resp. algorithms and modern computer architecture (esp. CPU, Cache, Primary Storage) and\n- learn how to develop resp. to modify the internals of database systems in order to make use of the properties of these computer architecture features.",
        "inhalt": "- Modern CPU architecture and the memory hierarchy\n- Cache memory, TLB, associative memory\n- CPU branch prediction\n- Sequential and random memory access\n- Memory access patterns and query evaluation\n- Tuple layout in relational DBMS (RDBMS)\n- Vertically fragmented RDBMSs and query evaluation\n- Cache-conscious database algorithms (e.g. joins, sorting)\n- Main memory database systems\n- Data compression for throughput maximization",
        "prerequisites": "IN0004 Introduction to Computer Organization and Technology - Computer Architecture, IN0008 Fundamentals of Databases, Bachelor (recommended)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3453883&pOrgNr=1",
        "name": "Cloud Information Systems",
        "kennung": "CIT3230002",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n- understand and analyze public cloud services.\n- define the requirements and challenges when architecting, implementing and managing cloud-native information systems.\n- design cost-efficient and scalable cloud information systems using current cloud technologies.",
        "inhalt": "- Introduction to foundational technologies (virtualization, containers, orchestration)\n- Architecture of cloud-native information systems (client/server, middleware, microservices)\n- Cost optimization in public clouds (cost and pricing models)\n- Economic cloud architecture comparison\n- Multi-cloud deployments\n- Implications of SaaS (DevOps, security)\n- Case studies of public clouds\n- Case studies of cloud-native information system architectures and their building blocks (e.g., cloud object stores, key/value stores, OLTP DBMS, OLAP DBMS)",
        "prerequisites": "IN0010 Introduction to Computer Networking and Distributed Systems (recommended)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2690341&pOrgNr=1",
        "name": "Cloud-Based Data Processing",
        "kennung": "IN2386",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n* define the requirements and challenges when architecting, building and managing a large-scale data processing service in the cloud.\n* use the theoretical foundations of distributed algorithms to construct the building blocks for a scalable data system design in relation to distributed storage, coordination and computation.\n* understand and analyze the different trade-offs when designing scalable data processing systems that need to run in the public cloud.\n* design, implement and evaluate a three-tier system using current cloud technologies.\n* identify the scalability bottlenecks and vulnerabilities of a complex computer system.",
        "inhalt": "Introduction\n* Intro to Data-centers\n* Latest trends in Cloud Computing\n\nFundamentals for managing distributed data\n* Data replication and quorums\n* Data partitioning\n* Fault-tolerance and unreliable components\n* Distributed system model\n* Consensus protocols and coordination services\n* Consistency models and distributed key value stores\n\nDesign of cloud-based data processing systems\n* Distributed transactions\n* Cloud-native OLTP databases\n* Cloud-native data warehouses\n* Dataflow computing (i.e., derived data)\n* Cloud-scale data streaming systems\n* Query-as-a-Service (QaaS) (serverless data processing)\n* Resource management and scheduling\n\nOther related topics:\n* Novel data storage formats (e.g., data lakes, data-mash, etc.)\n* Security and Privacy for data processing in the cloud\n* Accelerators and impact of new hardware technology",
        "prerequisites": "IN0008 Fundamentals of Databases\nIN0009 Basic Principles: Operating Systems and System Software\nIN0010 Introduction to Computer Networking and Distributed Systems"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3310961&pOrgNr=1",
        "name": "Code Generation for Data Processing",
        "kennung": "CIT3230001",
        "anmerkung": "",
        "lernergebnisse": "Students are able to implement an efficient execution environment for data processing programs based on code generation. Further, students can design appropriate program representations for high-level languages, database queries, as well as machine code and compile these to performant machine code using appropriate optimizations and sandboxing measures.",
        "inhalt": "- Execution models of programs (interpretation, bytecode, machine code generation, etc.)\n- Program representations (source code, intermediate representations (IRs), different forms of bytecode)\n- Classical techniques of code generation\n- SSA and optimization techniques, exemplary described on LLVM-IR\n- Machine code generation: instruction selection and register allocation\n- Execution of programs in virtual machines (e.g., WebAssembly, BPF, JavaScript)\n- Sandboxing and optimizations for JIT compilation\n- Execution of database queries (e.g., SQL, data frame API)\n- Execution models and code representations\n- Execution of machine code/binary translation (e.g., RISC-V)\n- Specifics when translating machine code",
        "prerequisites": "IN0004 Introduction to Computer Organization and Technology - Computer Architecture;\nIN0008 Fundamentals of Databases"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3499417&pOrgNr=1",
        "name": "Data Processing on Modern Hardware",
        "kennung": "CIT3230004",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n\n* implement data processing engines that run faster on modern machines using a variety of techniques:\n- optimize data structures and algorithms for the memory hierarchy\n- effectively adjust the program structure of the execution engine and the data pipelines to better exploit modern hardware features (AVX, SGX,\n- apply custom-parallelization techniques to most common data-processing algorithms\n- efficiently synchronize data structures\n\n* learn how to best leverage new hardware technologies in the context of (distributed) data processing engines:\n- accelerators (e.g., FPGAs, smart NICs, etc.)\n- low-latency high-bandwidth networks\n- modern storage and memory (non-volatile, memory extensions, far memory, CXL)\n\n* reason about software abstractions and programming models for modern hardware, especially in the context of data-intensive applications.\n\n* apply the knowledge in real data management systems:\n- understand what happens in the background\n- do performance analysis and debugging of hot spots and bottlenecks\n- optimize algorithms and data structures to run well both in isolation and alongside other programs (e.g., multi-tenancy).",
        "inhalt": "* Cache hierarchy awareness and how it influences the design of modern data storage formats and indexes.\n* Memory-, threading- and execution models for data processing on modern machines\n* Latest practices for query execution, compilation and optimization\n* Exploiting parallelism in multi-core machines for in-memory data management systems, with particular focus on crafting for non-uniformity in memory access latencies\n* Building efficient distributed data processing at scale through the use of modern network and storage technologies",
        "prerequisites": "IN0004 Introduction to Computer Organization and Technology \u2013 Computer Architecture\nIN0008 Fundamentals of Databases\nIN0007 Fundamentals of Algorithms and Data Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3471253&pOrgNr=1",
        "name": "Data Structure Engineering",
        "kennung": "CIT3230003",
        "anmerkung": "",
        "lernergebnisse": "Students can design efficient and compact data structures. They are capable of implementing custom, domain-specific data structure variants and of synchronizing them for multi-core processors in a scalable fashion.",
        "inhalt": "Data structure engineering is the process of designing and implementing in-memory and out-of-memory data structures to support the efficient storage, organization, and retrieval of data. On modern hardware a low asymptotic complexity alone does not guarantee high performance; one must also take features of today's processors and storage technologies into account. The course first introduces the necessary hardware background, before studying different data structures such as hash tables, search trees, and tries and how to optimize them for modern hardware.",
        "prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures (recommended)\nIN0004 Introduction to Computer Organization and Technology - Computer Architecture (recommended)\nKnowledge of low-level language, e.g., C/C++, Rust"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=819263&pOrgNr=1",
        "name": "Event Processing",
        "kennung": "IN2288",
        "anmerkung": "",
        "lernergebnisse": "Processing paradigms. Apply event processing formalisms, patterns and languages to use cases. Analyze capabilities of emerging standards and products on event processing. Know the background and theory of event processing.",
        "inhalt": "Introduction to Event Processing (EP) applications. After the module the student knows the common building blocks EP systems and can apply them. The outline of the module is as following. First, a introduction in EP is given, What EP support is required? What are the characteristics and requirements of EP? Then more theoretical background is given: Event processing terminology, theories of events & philosophical perspectives. Throughout the module multiple distributed, local, and event processing languages are presented which are then used in the course project. Additional in the lecture the following things are presented and discussed: event processing patterns, event generation, event detection, event filtering and event correlation algorithms. To model event-based systems formalisms are presented, e.g., event calculus, event algebra or Petrie nets. Additionally covered are event processing paradigms, models for event stream processing, event processing languages, Publish/Subscribe, Tuple spaces, Rule-based event processing, Trigger processing, Continuous query processing. Additional keywords which are presented are EP Languages and data models, window semantics, matching, filtering, Rete matching, staged-event driven architecture and emerging standards & products as case studies. The content is supported by examples and case studies. Also the content is practically used within the course project.",
        "prerequisites": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4116906&pOrgNr=1",
        "name": "High Performance Query Processing",
        "kennung": "CIT323001",
        "anmerkung": "",
        "lernergebnisse": "Students know how modern database engines execute queries. They are capable of implementing salable and efficient algorithms for executing analytical database queries efficiently on multi-core processors and with modern storage technologies.",
        "inhalt": "Query processing refers to the series of steps that a database system takes to execute an analytical query given a query plan. High performance query processing is about executing analytical queries with performance close to what the hardware allows. To achieve high performance, it is not enough to know about the algorithms that database systems use; one must also take features of today's processors and storage technologies into account. This course covers database query processing paradigms, algorithms, SIMD parallelization, multi-core parallelization, distributed query processing, and out-of-memory processing.",
        "prerequisites": "IN0008 Grundlagen: Datenbanken\nIN2118 Database Systems on Modern CPU Architectures\n(recommended)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=487478&pOrgNr=1",
        "name": "Query Optimization",
        "kennung": "IN2219",
        "anmerkung": "",
        "lernergebnisse": "Participants master the main optimization techniques of query processing, may develop them problem-specific, can analyze the complexity of concrete queries resp. evaluate the queries for improvement.",
        "inhalt": "Query processing in relational data bases; fundamental techniques for query processing; determination of the optimal join order; techniques of dynamic programming; cost models for query processing; optimization with consideration of physical properties",
        "prerequisites": "IN0008 Fundamentals of Databases"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=757477&pOrgNr=1",
        "name": "Transaction Systems",
        "kennung": "IN2267",
        "anmerkung": "",
        "lernergebnisse": "The students\n- understand the interaction of transaction management and recovery\n- can develope transactions in a safe but nevertheless efficient manner, such that ACID transactions with high concurrency are attained",
        "inhalt": "- Notions of Correctness\n- Concurrency Control Algorithms\n- Multiversion Concurrency Control\n- Concurrency Control on Objects\n- Concurrency Control on Relational Databases\n- Concurrency Control on Search Structures\n- Concurrency Control Implementation\n- Transaction Recovery\n- Crash Recovery\n- Media Recovery\n- Application Recovery\n- Distributed Concurrency Control\n- Distributed Transaction Recovery",
        "prerequisites": "- IN0015 Discrete Structures\n- IN0008 Fundamentals of Databases"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456924&pOrgNr=1",
        "name": "IT-Consulting",
        "kennung": "IN2079",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module students are able to analyze the most important IT-Consulting processes and their interdependences. Participants are capable to evaluate the major strategic decision and their implications within the field of IT-Management. Participants understand typical problems of implementing IT-Consulting such as the definition of an IT-Strategy or successful IT-Organization. They can develop adequate solutions and justify them in front of third parties.",
        "inhalt": "The module offers the students an overview over the basic structures and current problems of IT-Consulting. Concepts like IT-Strategy, IT-Governance, IT-Organization and Processes are presented. Moreover, the module introduces the students to IT-Controlling, IT-Cost- and IT-Value Management. All topics are vividly explained and discussed by the use of practically relevant case studies.",
        "prerequisites": "IN0006 Introduction to Software Engineering,\nIN0008 Fundamentals of Databases,\nBachelor's in Informatics or\nBachelor's in Information Systems"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456926&pOrgNr=1",
        "name": "Modelling of Distributed Systems",
        "kennung": "IN2080",
        "anmerkung": "",
        "lernergebnisse": "At the and of the module students know the essential fundamental terms of specification, modular design, abstraction, refinement, and verification of concurrent, distributed interactive systems. They have a deep understanding of the modelling and consequently learn how to deal with many aspects of the distributed systems, their behavior and communication in the methodological way. They obtain methods competence of the existing techniques for modelling and formal specification and systems development.",
        "inhalt": "Almost all current computer and software systems run in any form as networks. Additionally they are not only networked among themselves, in fact they are connected with physical and technical processes and according to this they use various interfaces. Thus, for studying modern software systems and their systematic development, topics such as concurrency, interaction and co-ordination of systems are central and important to know and understand. Modelling and systematic working with such systems deals with a lot of various questions, phenomena and difficulties, in contrast to sequential, not-interactive systems. This lecture presents fundamental concepts and models for distributed systems as well as description techniques to describe and specify their structure and properties with the goal to analyze and finally to verify their characteristics. The lecture covers specific questions and approaches to find models of distributed systems, their theories, structures and connections.\nTopics are:\n- Concurrent, distributed, cooperating systems: Fundamental ideas and substantial characteristics\n- Systems as state machines\n- Functional description of system components\n- Structure and distribution\n- Processes as execution traces in distributed systems\n- Refinement of systems\n- Message-synchronous systems",
        "prerequisites": "IN0001 Introduction to Informatics 1, IN0007 Fundamentals of Algorithms and Data Structures, IN0003 Introduction to Informatics 2, IN2078 Foundations of program and system development"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473855&pOrgNr=1",
        "name": "Patterns in Software Engineering",
        "kennung": "IN2081",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module, participants understand the key concepts of the different types of patterns that can be used during software development, in particular design patterns, architectural patterns, testing patterns and organizational patterns. They understand that patterns are a way to describe reusable knowledge for analysis, system design, object design and software project management activities. Given a problem, they are able to identify the applicability of a pattern that addresses the problem, describe the pattern in UML and map it into Java code.",
        "inhalt": "Among others, the module IN2081: Patterns in Software Engineering is concerned with the following topics:\n-Patterns as approach to structure and describe reusable expert knowledge\n- Categories of patterns:\n++ Architectural patterns\n++ Design patterns\n++ Process patterns\n++ Testmuster\n++ Organizational patterns\n++ Antipatterns\n- Classification and Combination of patterns\n++ Pattern-oriented software development\n- Model Transformations\n- ++ UML Model refactorings\n- ++ Forward and reverse engineering\n- ++ Identification of code smells\n- ++Source code transformations (refactorings)\n- Using patterns\n++ Using patterns during analysis\n++ Using patterns during system design design\n++ Using patterns during object design design\n++ Identifying patterns in software legacy systems",
        "prerequisites": "IN0001: Introduction to Informatics\nIN0002: Fundamentals of Programming (Exercises & Laboratory)\nIN0006: Introduction to Software Engineering"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261729&pOrgNr=1",
        "name": "Project Organisation and Management in Software Engineering",
        "kennung": "IN2083",
        "anmerkung": "ab SS18 6 ECTS und 5 SWS",
        "lernergebnisse": "After successful completion of the module, participants understand the key concepts of traditional and agile project management techniques and are able to deal with typical software project management problems such as writing a project plan, initiating and managing a small project, tailoring a software lifecycle, developing strategies for merge management, continuous integration or continous delivery. They also are familiar with the most important techniques of risk management, scheduling, planning, testing and delivery and apply them to solve simple problems.",
        "inhalt": "Among others, the module IN2083 is concerned with the following topics:\n- Project Organization\n++ Lifecycle model of a Project\n++ Types of organizations (Line-, Matrix-and Project-based organizations)\n++ Roles and Responsibilities, Management Antipatterns\n++ Global Software Projects\n++ Organizational Maturity Models (CMM, CMMI)\n- Project Plans\n++ Software Lifecycle Models\n++ Linear Models (Waterfall and V-Model)\n++ Iterative models (Spiral, Unified Process, V XT)\n++ Agile models (Scrum, Kanban)\n++ Estimation\n++ Scheduling\n- Contracts and Contracting\n++ Types of contracts\n++ Lifecycle of a Contract\n++ Legal issues\n- Change Management\n++ Configuration Management\n++ Continuous Integration\n++ Continuous Delivery\n- Quality Management\n++ Usability Management\n++ Testing, V&V\n++ Risk Management\n++ IEEE Standards",
        "prerequisites": "IN0006 Introduction to Software Engineering"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261731&pOrgNr=1",
        "name": "Advanced Topics of Software Testing",
        "kennung": "IN2084",
        "anmerkung": "",
        "lernergebnisse": "At the end of this module the students know the essential fundamental terms of testing process and methodology. They obtain a deep understanding of testing during software life cycle, static and dynamic testing, test management, test tools and automation, as well as psychology of testing.",
        "inhalt": "Basics\n- Introduction\n- Concepts and Motivation\n- Basic Test Process\n- Priorisation of Tests\n- Psychology of Testing\n\nTesting during Software Life Cycle\n- Waterfall- / V- / W- / Incremental- / Spiral-Model\n- Module- / Component Test\n- Integration Test\n- System Test\n- Acceptance Test\n- Maintenance of Tests\n- Testing of Prototypes\n\nStatic Testing\n- Manual Testmethods\n- Static Analysis\n\nDynamic Testing\n- Black-Box-Method\n- White-Box-Method\n- Intuitive Test Case Identification\n\nTest Management\n- Risk Management\n- Cost Effectiveness of Tests\n- Reuse\n- Error Management\n- Test Planning / Observation / Control\n- Metrics\n- Organisation of Test Teams / Qualifications\n- Requirements to Configuration Management\n- Norms and Standards\n\nTest Tools / Test Automation\n- Types\n- Choice\n- Adoption of Tools\n- \"Home built\" vs. Commercial\n- Introduction of Tools\n\nIt is possible to visit this lecture in common with IN2114 \" Automotive Software - Methods and Technologies\".",
        "prerequisites": "IN0006 Introduction to Software Engineering"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261483&pOrgNr=1",
        "name": "Automotive Software - Methods and Technology",
        "kennung": "IN2114",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students know the area of automotive software and obtain methods competence in the development of such software-systems.",
        "inhalt": "The strategic importance of software in vehicles is rapidly increasing. Three different sub domains will be presented in the lecture: infotainment, body/comfort, driver assistance and safety. For each of these domains, the lecture will present the requirements and specialties as well as the theoretical foundations.\nBesides these three sub domains, three central aspects are addressed: development process, architecture and quality assurance\n- Introduction and Overview ?\"software and software engineering in the automotive context\"?\n- \"Embedded systems\" - application in the body and comfort domain\n- \"Real time and control theory\" - application in the safety and chassis domains\n- \"Embedded Java\" - application in the infotainment domain\n- \"Sensors and actuators\" - application in the driver assistance domain\n- \"Development process I\" - requirements, logical architecture\n- \"Development process II\" - from the logical architecture to the integrated system\n- Model based development: embedded Middleware\n- Tools and execution models: ASCET, Rose RT, MATLAB\n- Testing and quality assurance\n- The software product life cycle\n- Future challanges\n\nPractical expertise in Java as well as C are essential to be successful during the exercises with 3 special programming exercises as the main learning goal.\n\nIt is possible to visit this lecture in common with IN2084.",
        "prerequisites": "IN0006 Introduction to Software Engineering\nknowledge in Java and/or C is prerequisite for the exercises."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3307469&pOrgNr=1",
        "name": "Advanced Concepts of Programming Languages",
        "kennung": "CIT3230000",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with an assortment of programming language constructs from popular programming languages. They understand the semantics of these constructs as well as the implementation consequences, that they inflict on the implementation as well as the runtime behavior of compiler and runtime system. They are able to analyze and compare different language based approaches, to discuss their relative merits and potential workarounds in case certain language features are missing. By means of this knowledge, they are able to extend existing compilers to handle the aforementioned constructs as well as able to re-encode concepts from one language by means of another language.",
        "inhalt": "This is not a beginners programming course \u2013 Instead, this lecture focusses on the semantics of various programming language concepts, and their implementation from the point of view of a compiler engineer. Topics may include, among others:\n- Relaxed Memory Models\n- Wait-/Lock-free Programming\n- Locks, Monitors & Condition Variables\n- Transactional Memory\n- Gotos, Co-Routines and Continuations\n- Single/Multi-Dispatching\n- (Multiple-) Inheritance\n- Delegation and Prototype Based Programming\n- Aspect Oriented Programming\n- Meta programming",
        "prerequisites": "IN0001 Introduction to Informatics,\nIN0002 Fundamentals of Programming (Exercises & Laboratory),\nIN0003 Functional Programming and Verification,\nat least one programming language"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456400&pOrgNr=1",
        "name": "Automata and Formal Languages",
        "kennung": "IN2041",
        "anmerkung": "",
        "lernergebnisse": "On successful completion of the module, students will be able to\n- use finite automata as a data structure for representation of finite and infinite sets;\n- understand and determine the computational complexity of different operations for different classes of automata;\n- move to and fro logical and automata-theoretic descriptions;\n- apply automata to problems in pattern matching and formal verification.",
        "inhalt": "The module is divided into two parts. The first part deepens and expands the study of finite automata initiated in IN0011 (Introduction to theoretical computer science), while the second introduces automata on infinite words. In both parts automata are seen as a data structure for the manipulation of (possibly infinite) sets and relations. The module shows how to implement Boolean operations and joins for different automata classes (nondeterministic and deterministic automata, binary decision diagrams, B\u00fcchi automata). It also introduces the connection between automata and logic. The algorithms are applied to a variety of problems, ranging from pattern-matching to program verification and solution of Diophantine equations.",
        "prerequisites": "IN0011 Introduction to Theory of Computation"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=520233&pOrgNr=1",
        "name": "Compiler Construction I",
        "kennung": "IN2227",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with the basic concepts and techniques of compiler construction. They know the practically relevant methods which are employed in the three components of a compiler, the frontend, the middleend and the backend. By means of this knowledge, they are able to realize a simple compiler for a simple programming language which generates code for a simple target architecture.",
        "inhalt": "A compiler is an essential part of the systems software. The purpose of a compiler is to translate programs of a high-level programming language such as, e.g., C or Java, into sequences of machine instructions. Compilers are rather complicated systems in which ideas and methods of many areas can be applied. Therefore, topics of the lecture are, among others:\n\n- Code generation for an abstract machine;\n- lexical analysis;\n- syntactic analysis;\n- symbol tables;\n- type checking for imperative languages;\n- type inference for functional languages.",
        "prerequisites": "IN0011 Introduction to Theory of Computation, IN0009 Basic Principles: Operating Systems and System Software, knowledge of a programming language, experience with system software, automata theory"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1338241&pOrgNr=1",
        "name": "Functional Data Structures",
        "kennung": "IN2347",
        "anmerkung": "",
        "lernergebnisse": "After the successful completion of this module, students will have an\nin-depth understanding of a range of functional data structures and are able to prove properties about them with the help of a computer-based proof assistant. Students will be able to\n- select suitable implementations of functional data structures for common programming tasks,\n- design and implement new functional data structures that are based on the principles covered in the module,\n- prove the correctness and complexity of the data structures on paper and with the help of a proof assistant.",
        "inhalt": "The module introduces students to the design and analysis of data structures for functional programming languages. It assumes that the students are familiar with functional programming and with running time analysis of algorithms. The module covers a range of functional data structures with an emphasis on their precise analysis. Proofs of both functional correctness and complexity will be a core part of the module Proofs are carried out with the help of a computer-based proof assistant. An introduction to the proof assistant is part of the module.\n\nA selection of the following non-exhaustive list of data structures and\nalgorithms will be covered:\n- Sorting\n- Search trees: Unbalanced trees, AVL trees, Red-Black trees, 2-3 trees, Weight balanced trees, Splay trees, Tries\n- Other trees: Quad trees, Finger trees\n- Huffman coding\n- Priority queues: Braun trees, Leftist heaps, Skew binomial heaps, Skew heaps, Pairing heaps, Fibonacci heaps\n- Dijkstra's algorithm\n- String matching",
        "prerequisites": "Functional programming (IN0003 Introduction to Informatics 2); Discrete mathematics (IN0015 Discrete Structures); Data structures and algorithms (IN0007 Fundamentals of Algorithms and Data Structures)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=930144&pOrgNr=1",
        "name": "Games on Graphs",
        "kennung": "IN2296",
        "anmerkung": "",
        "lernergebnisse": "After successfully completing the course students know the basic definitions of game theory. They can apply the corresponding algorithms and solve small problem instances directly by hand. Further they understand the mathematical concepts underlying the algorithms for solving the discussed classes of games.",
        "inhalt": "In the module students are introduced to the theory of games played on a (finite) graph (also: recursive games with finite state space).\nBy means of different variants of reachability games (with/without chance, turn-based/concurrent moves) the students learn the basic definitions and algorithms in the field of mathematical game theory.\nBuilding up on the reachability games more involved quantitative (e.g. Markov decision processes, discouted-payoff games, mean-payoff games, Shapely's stochastic games) and qualitative (e.g. Parity, Rabin, Muller, Streett) variants are discussed.\nFurther topics include e.g. techniques for reducing memory consumption (e.g. BDDs), tool presentations (e.g. PRISM), games with partial observations, games on pushdown graphs, relations to logics and set theory (e.g. Gale-Stewart games and Martin's determinacy result), or the synthesis of controllers.",
        "prerequisites": "MA0901 Linear Algebra for Informatics, IN0011 Introduction to Theory of Computation, IN0015 Discrete Structures, IN0018 Discrete Probability Theory"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456426&pOrgNr=1",
        "name": "Logic",
        "kennung": "IN2049",
        "anmerkung": "",
        "lernergebnisse": "The students understand the fundamental difference between syntax and semantics. In particular, they are able to perform proofs in a deductive system and can prove the soundness and completeness of that system w.r.t. a semantics. They understand the limitations of logic and the relationship between logic and computability. In particular they can prove the undecidability of some basic problem like validity of formulas. They can formalize problems in informatics or mathematics in logic and can solve them algorithmically using decision or semi-decision procedures like resolution.",
        "inhalt": "In the context of propositional and predicate logic the following basic notions are covered:\n- Syntax and semantics\n- Proof system and proof search\n- Soundness and completeness\n- Decidability\n- Expressiveness\n\nPossible further topics (non exhaustive):\n- Proof systems\n- Automated theorem proving\n- Verification\n- Decision procedures\n- Prolog\n- Data base theory\n- Higher-order logic\n- Set theory\n- Constructive logic\n- Fuzzy logic.",
        "prerequisites": "IN0015 Discrete Structures, IN0011 Introduction to Theory of Computation, IN0003 Introduction to Informatics 2, basic knowledge of propositional logic (boolean algebra) and discrete mathematics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456482&pOrgNr=1",
        "name": "Model Checking",
        "kennung": "IN2050",
        "anmerkung": "",
        "lernergebnisse": "Successful participation enables students to\n- explain the role of model checking for ensuring hardware and software quality\n- give formal models of simple hardware and software systems\n- write formal specifications of simple safety and liveness properties using temporal logic\n- explain algorithms for checking if a program satisfies a given specification and apply them to small examples\n- understand and explain techniques for palliating the state-explosion problem",
        "inhalt": "The course teaches the fundamentals of Model Chekcing. Topics include:\n- Representation of hardware and software systems using formal models of computations, e.g., transition systems, pushdown systems, Kripke structures, finite and infinite state automata.\n- Representation of specifications using formal logics and automata, e.g., linear and branching time temporal logics, automata on finite and infinite.\n- Decidability and complexity of various classes of formal models and specifications, e.g., complexity of finite state model checking for linear and branching time logics.\n- Techniques for palliating the state-explosion problem e.g., binary decision diagrams, partial-order reduction, abstraction.\n- Industrial application of model checking, e.g., discovery of concurrency bugs, verification of systems software.\n- Practical experience in applying model checking tools, e.g., Spin, Blast, CBMC.",
        "prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures, IN0011 Introduction to Theory of Computation, IN0015 Discrete Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456414&pOrgNr=1",
        "name": "Network Analysis - Statistical and Formal Models and Methods",
        "kennung": "IN2045",
        "anmerkung": "Ab WiSe 14 neuer Titel; ab WS 11/12 5 Credits statt 4; ab WS15 neuer Titel",
        "lernergebnisse": "After successful completion of the module, participants understand methodological principles and practice-oriented techniques of model building, simulation, and output analysis, also with the help of case studies.",
        "inhalt": "- System modelling\n- Concepts of time and event discrete simulation\n- Components of discrete simulation models and -software\n- Random number generation and distribution functions\n- Evaluation of system behavior\n- Performance metrics\n- Simulation experiments\n- Case studies",
        "prerequisites": "IN0010 Introduction to computer networking and distributed systems, IN0009 Basic Principles: Operating Systems and System Software"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456506&pOrgNr=1",
        "name": "Petri Nets",
        "kennung": "IN2052",
        "anmerkung": "Ab SoSe 2015 5 Credits",
        "lernergebnisse": "On successful completion of the module, students will be able to\n- model simple concurrent systems with Petri nets;\n- analyze small Petri nets by hand;\n- select automatic analysis techniques and software tools to analyze larger nets;\n- use the analysis results to evaluate the behavior of concurrent systems.",
        "inhalt": "Petri nets are a formal model for the description and analysis of concurrent systems, like distributed algorithms, communication protocols, manufacturing systems, business processes, or asynchronous circuits. The strengths of Petri nets are a simple, clear graphical notation with a precise semantics, and a wealth of available techniques for analysis and verification.\nThe module is an introduction to the theory of Petri nets. It presents several variants of Petri nets, and their most relevant analysis techniques: reachability and coverability graphs, linear invariants, structure theory, and unfoldings. The techniques are also illustrated by means of software tools.",
        "prerequisites": "MA0901 Linear Algebra for Informatics, IN0011 Introduction to Theory of Computation"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456509&pOrgNr=1",
        "name": "Program Optimization",
        "kennung": "IN2053",
        "anmerkung": "",
        "lernergebnisse": "Participants know the often occurring conflict between good structure and readability of a program as well as the highest possible efficiency of the execution of the program which is likewise desired. They know the techniques to increase the efficiency of the program execution through optimizing transformations of a compiler. They are able to apply these to small example programs and are able to develop new analyses and optimizations on their own.",
        "inhalt": "The lecture starts with basic dataflow analyses like availability of expressions or liveness of variables together with the optimizing transformations enabled by these analyses. Motivated by the examples, we develop the theoretical background on complete lattices and monotone functions necessary for program analysis methods. Subsequently, we discuss more sophisticated analyses such as constant propagation. By discussing interval analysis, we present general methods for the case where ordinary fixpoint computation will not terminate. Further topics are:\n- interprocedural analysis;\n- pointer analysis;\n- fixpoint algorithms.\nWe also consider hardware dependent optimizations such as:\n- register allocation;\n- instruction selection;\n- instruction scheduling\nand also optimizations to improve the cache behavior.",
        "prerequisites": "Bachelor Informatics, basic knowledge in programming languages or compilers"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1254191&pOrgNr=1",
        "name": "Quantitative Verification",
        "kennung": "IN2340",
        "anmerkung": "",
        "lernergebnisse": "Successful participation enables students to\n\u2022 explain the role of quantitative modelling and analysis for ensuring hardware and software quality.\n\u2022 give formal models of simple hardware and software systems describing their probabilistic and timed behavior.\n\u2022 write formal specifications of simple safety, dependability, reliability, and performance properties.\n\u2022 explain algorithms for checking if a system satisfies a given specification and apply them to small examples.\n\u2022 understand and explain techniques for improving practical performance of the analysis algorithms.",
        "inhalt": "The course teaches the fundamentals of modelling and analysis of systems featuring quantitative behavior, such as time and probabilities. Topics include:\n\u2022 Representation of hardware and software systems using formal models of computations, e.g., transition systems, discrete-time and continuous-time Markov chains, Markov decision processes, stochastic games, timed automata.\n\u2022 Representation of specifications using formal logics, e.g., probabilistic linear temporal logic, probabilistic computation-tree logic, continuous stochastic logic, metric temporal logic.\n\u2022 Algorithms for various classes of formal models and specifications, e.g., transient analysis, stationary analysis, mean-payoff optimization, reachability-game solving.\n\u2022 Theoretically optimal as well as practical techniques for analysis of large systems, e.g., linear programming, value iteration, strategy iteration, reinforcement learning.\n\u2022 Industrial application of the analysis, e.g., randomized communication protocols, embedded systems, cyber-physical systems, safety-critical missions.\n\u2022 Practical experience in applying model checking tools, e.g., PRISM, MRMC, UPPAAL.",
        "prerequisites": "IN0011 Introduction to Theory of Computation\nIN0015 Discrete Structures\nIN0018 Discrete Probability Theory\nIN2050 Model Checking"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456513&pOrgNr=1",
        "name": "Semantics",
        "kennung": "IN2055",
        "anmerkung": "",
        "lernergebnisse": "After the successful completion of this module, students will have an in-depth understanding of at least one of the three standard techniques for defining semantics of programming languages: operational, denotational or axiomatic.\nThis means in particular the following: Students will be able to\n- read programming language specifications and understand their logical implicatiuons,\n- define the semantics of individual language constructs,\n- prove properties of language definitions or individual programs and\n- verify language-based tools like compilers relative to the language sematics.",
        "inhalt": "Core material:\n- Operational semantics\n++ A simple imperative language\n++ Rule induction\n++ Equivalence of big step and small step semantics\n++ Semantics of procedures\n++ Type safety\n++ Applications: Compilers, static analysers, or optimizers\n\n- Axiomatic semantics / Hoare logic\n++ Proof system\n++ Weakest preconditions\n++ Verification condition generation\n++ Soundness and completeness of the axiomatics w.r.t. the operational semantics, relative completeness and expressiveness\n\nOptional material (non-exhaustive):\n- Semantics of object-oriented languages\n- Semantics of functional languages\n- Denotational semantics\n- Axiomatic semantics of procedures, arrays and pointers",
        "prerequisites": "IN0003 Introduction to Informatics 2, IN0011 Introduction to Theory of Computation, IN0001 Introduction to Informatics 1, basic knowldge of discrete mathematics and imperative and functional programming"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456398&pOrgNr=1",
        "name": "Virtual Machines",
        "kennung": "IN2040",
        "anmerkung": "ab SoSe 13 5 SWS und 6 Credits",
        "lernergebnisse": "Participants are acquainted with virtual machines for imperative, functional, logical and object-oriented programming languages. They know the principles by which various programming language concepts are translated into sequences of machine code. For sections of programs, they are able to generate code of some virtual machine, and they are able to apply the learnt principles to provide new translation schemes for given language constructs on their own.",
        "inhalt": "While trying to produce code for a programming language like Prolog, one quickly realizes that one would like to use certain instructions during the translation which are not already available on concrete machines. On the other hand, instruction sets of modern computers are changing so quickly that it doesn't seem useful for the compiler to depend on some arbitrarily chosen instructions. Such a dependance would mean that in a few years one would feel obliged to rewrite the compiler anew.\n\nWith the implementation of the first Pascal compilers, one already arrived at the idea of first generating code for a slightly idealized machine, each of whose instructions then only need to be implemented on different target machines. Translation of modern programming languages like Prolog, Haskell or Java are also based on this principle. On one hand this facilitates portability of the compiler. On the other hand this also simplifies the translation itself since one can choose a suitable instruction set according to the programming language to be translated. In particular, we consider:\n- the translation of C;\n- the translation of a functional language;\n- the translation of Prolog;\n- the translation of a concurrent dialect of C.",
        "prerequisites": "At least rudimentary knowledge of different programming languages."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456384&pOrgNr=1",
        "name": "Business Analytics",
        "kennung": "IN2028",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module students are familiarized with common methods of classification, numerical prediction and Clustering. They know the assumptions of these processes and understand their functioning, as well as their typical operational applications. Participants are able to analyze data sets with the programming language R and can interpret the results of these analyses.",
        "inhalt": "Inferential Statistics, Multi-linear Regression, Logistic and Poisson Regression, Na\u00efve Bayes and Bayes Nets, Decision Tree Classifiers, Data Preparation, Evaluation of Classifiers and Learning Theory, Ensemble Methods and Clustering, Dimensionality Reduction, Association Rules",
        "prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures, IN0008 Fundamentals of Databases"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2863073&pOrgNr=1",
        "name": "Business Analytics and Machine Learning",
        "kennung": "IN2028",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of the module students are familiarized with common methods of classification, numerical prediction and clustering. They know the assumptions of these processes and understand their functioning, as well as their typical operational applications. Participants are able to analyze data sets with the programming language R and can interpret the results of these analyses.",
        "inhalt": "Regression Analysis, Regression Diagnostics, Generalized Linear Models, Na\u00efve Bayes, Decision Tree Classifiers, Data Preparation, Causal Inference, Model Selection, Ensemble Methods, Clustering, High-Dimensional Problems, Neural Networks, Convex Optimization",
        "prerequisites": "MA0901 Linear Algebra for Informatics, MA0902 Analysis for Informatics, IN0018 Discrete Probability Theory or MA9712 Statistics for Business Administration"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1254188&pOrgNr=1",
        "name": "Data Analysis and Visualization in R",
        "kennung": "IN2339",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students are able to:\n- 1. produce scripts that automatically generate data analysis report\n- 2. import data from various sources into R\n- 3. apply the concepts of tidy data to clean and organize a dataset\n- 4. decide which plot is appropriate for a given question about the data\n- 5. generate such plots\n- 6. know the methods of hierarchical clustering, k-means, PCA\n- 7. apply the above methods and interpret their outcome on real-life datasets\n- 8. know the concept of statistical testing\n- 9. devise and implement resampling procedures to assess statistical significance\n- 10. know the conditions of applications and how to perform in R the following statistical tests: Fisher test, Wilcoxon test, T-test.\n- 11. know the concept of regression and classification\n- 12 apply regression and classification algorithms in R\n- 13. know the concept of error in generalization, cross-validation\n- 14. implement in R a cross-validation scheme.\n- 15. know the concepts of sensitivity, specificity, ROC curves\n- 16. assess the latter in R",
        "inhalt": "R programming basics 1\nR programming basics 2 (including report generation with R markdown)\nData importing\nCleaning and organizing data: Tidy data 1\nCleaning and organizing data: Tidy data 2\nBase plot\nGrammar of graphics 1\nGrammar of graphics 2\nUnsupervised learning (hierarchical clustering, k-means, PCA)\nCase study I\nDrawing robust interpretations 1: empirical testing by sampling\nDrawing robust interpretations 2: classical statistical tests\nSupervised learning 1: regression, cross-validation\nSupervised learning 2: classification, ROC curve, precision, recall\nCase study II",
        "prerequisites": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456537&pOrgNr=1",
        "name": "Machine Learning",
        "kennung": "IN2064",
        "anmerkung": "ab WS12/13 8 Credits",
        "lernergebnisse": "Getting familiar with the statistics of machine learning. Basic knowledge of essential learning algorithms. Skill to select, describe and derive appropriate algorithms given a certain problem. Competence to apply these in practical application.",
        "inhalt": "kNN & k-means; linear classifiers; linear regression; Bayes: maximum likelihood and maximum a posteriori estimator, mixture of Gaussians, Hidden Markov Models, Expectation Maximization algorithm, nonlinear neural networks and backprop, Support Vector Machines, unsupervised learning",
        "prerequisites": "MA0901 Linear Algebra for Informatics, MA0902 Analysis for Informatics, IN0018 Discrete Probability Theory"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456672&pOrgNr=1",
        "name": "Advanced Computer Architecture",
        "kennung": "IN2076",
        "anmerkung": "ab WS 11/12 6 statt 4 Credits",
        "lernergebnisse": "At the end of the module students know and understand the architecture of current processors as well as of entire IT systems. They can evaluate and assess different designs. The students understand the interaction of architecture and compiler technology. They understand the different classes of parallel architectures and can evaluate their advantages and disadvantages for certain applications.",
        "inhalt": "After an introduction to the goals and the learning outcomes of the module, cross cutting aspects for all advanced architectures are presented. This section covers performance, availability, reliability, fault tolerance, parallelism, memory hierarchy and virtualization. After a recap of the computer architecture basics, the module covers the major types of parallelism and the respective architectures. For instruction level parallelism advanced concepts of the instruction pipeline are discussed as well as superscalar and VLIW processors. This part also covers advanced techniques for the memory hierarchy and compiler support for instruction level parallelism. The next architecture class, data parallel systems, covers vector units in standard processors, array computers, GPGPUs and vector supercomputers. The section presents also the programming interfaces and discusses their interaction with the architectures. Shared memory systems supporting thread level parallelism are discussed next. First the general concepts coherence, memory consistency and synchronization are covered. Then their implementation in uniform and non-uniform memory architectures is presented, ranging from standard multicore systems to large-scale shared memory systems. The last presented architecture class covers distributed memory systems supporting process-level parallelism. This section presents high performance communication networks and design alternatives for network interfaces, manycore processors and massively parallel systems. Parallel file systems are discussed as they are important for all these systems. The module closes with optional presentations about energy efficiency, parallel applications, parallel programming, performance evaluation and non-conventional architectures.",
        "prerequisites": "IN0004 Introduction to Computer Organization and Technology - Computer Architecture"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456656&pOrgNr=1",
        "name": "Cloud Computing",
        "kennung": "IN2073",
        "anmerkung": "",
        "lernergebnisse": "The students know the goals of Cloud and Grid computing. They can present application scenarios in different domains. They are familiar with the fundamental techniques in the areas security, application development and resource management. They can identify the differences and similarities between Cloud and Grid computing and distributed systems. They are able to participate in Cloud and Grid-related research projects.",
        "inhalt": "The lecture starts with an introduction and a presentation of the base technologies for Cloud and Grid computing. The layered architecture of Grids and the base services are presented. Cloud Computing is then introduced and the different models SaaS, PaaS, IaaS. The list of base services is extended for Cloud Computing. The lecture also covers a discussion of legal issues.",
        "prerequisites": "Knowledge in computer architectures and distributed systems would be helpful."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1150616&pOrgNr=1",
        "name": "Connected Mobility Basics",
        "kennung": "IN2324",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students will remember the basic elements that constitute connected mobile systems and understand the (technical) issues relevant to mobile system and service design and their evaluation. They recognize challenges arising from mobility and mobile networking. They understand the requirements for and the limitations of simulation-based evaluation of mobile services. They have an overview of the different components and techniques at their disposal to realize mobile services. They understand the principles of these underlying methods, know their advantages and disadvantages and can apply methods of design, modeling, and evaluation to simple example cases.",
        "inhalt": "The module IN2324 offers a broad introduction, including the following topics:\n- Introduction to mobile systems\n- Mobile systems by example\n- Mobility: models and simulations\n- Wireless networking technologies\n- Architectures and protocols for mobile networks\n- Architectures for mobile services and systems\n- Mobile measurements\n- Security and privacy",
        "prerequisites": "Recommended requirements are basics in computer networks and distributed systems (IN0010 or equivalent knowledge) as well as command of the Java programming language."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3287082&pOrgNr=1",
        "name": "Introduction to Emerging Computing Technologies",
        "kennung": "CIT3330001",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students will know the basic concepts of emerging technologies and their realizations from a design perspective. They will understand the potential of these technologies in principle and for what applications they can be used. In addition to that, students will get a rough overview how corresponding applications can be realized, how corresponding design steps differ from the design of conventional systems, and what methods are available for their design. Through the programming tasks/mini-projects, students will get hands-on experiences on those issues. Correspondingly considered emerging technologies include reversible computing, quantum computing, microfluidics, and field-coupled nanotechnologies.",
        "inhalt": "Computer technologies will change in the near future. The exponential growth of conventional technologies (according to Moore\u2019s Law) will come to a halt, since physical boundaries will be reached soon. At the same time, further system concepts beyond pure electronics emerge. As a consequence, researchers and engineers are currently considering alternative (emerging) computer technologies which work differently to established (conventional) computation paradigms. Examples include quantum computing, reversible circuits, microfludic devices (also known as Labs-on-a-Chip), or field-coupled nanotechnologies. This module provides an overview of these technologies and the corresponding paradigms. This covers an introduction into the respective concepts as well as possible applications. Afterwards, questions of how to efficiently design applications/solutions for these technologies are discussed.",
        "prerequisites": "* Basic knowledge in programming (e.g., in Python, C++, etc.)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456670&pOrgNr=1",
        "name": "Microprocessors",
        "kennung": "IN2075",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of the module, students are able to understand and analyse:\n- the architecture of a microprocessor in general\n- features that have been added over processor generations since the first microprocessor was introduced\n- the state of the art in modern microprocessor architectures\n- possible trends with regard to future processor architectures\n- techniques to program and optimise different architectures at assembly language level.\n\nAlso students are able to understand the role of a microprocessor in high performance computing systems.",
        "inhalt": "Topology and structure of computing systems\nTechnical development of Microprocessors: From 4004 to contemporary\nprocessor architectures\nRISC vs. CISC- Architektur und\nInstruction Set Architecture and addressing modes\nPipelining\nPipelining conflicts\nExamples: x86, ARM\nCache structures, cache coherency, MESI and directory based protocols\nSuperscalar vs. VLIW architectures\nSSE- and AVX Vector Intrinsics\nBranch prediction\nSpeculatice execution\nOutlook",
        "prerequisites": "IN0004 Introduction to Computer Organization and Technology - Computer Architecture, IN0005 Laboratory: Computer Organization and Computer Architecture, Not required, but basic knowledge about computer architecture is helpful"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460548&pOrgNr=1",
        "name": "Mobile Distributed Systems",
        "kennung": "IN2098",
        "anmerkung": "",
        "lernergebnisse": "The students know the basic foundations of mobile distributed systems (MDS). They are able to understand the foundations, problems, and solutions of MDS. They are able to assess current developments. In addition they are able to apply their knowledge to new developments in the area of wireless communication (including their protocols) and the area of mobile operating systems (including important applications).",
        "inhalt": "Mobility, wireless communication, mobile operating systems, architectures, concepts, mechanisms, techniques and their evaluation",
        "prerequisites": "IN0009 Basic Principles: Operating Systems and System Software, IN0010 Introduction to computer networking and distributed systems"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1070916&pOrgNr=1",
        "name": "Network Coding",
        "kennung": "IN2315",
        "anmerkung": "",
        "lernergebnisse": "Students know about the basics of NC, both in theory and practical\nimplementations. The projects accompanying the lecture offer students the\npossibility to gain practical knowledge about coded packet networks, in\nparticular but not limited to wireless networks. Furthermore, students acquire\nnotable skills in socket/network programming.",
        "inhalt": "Conventional routing is unable to achieve a network's capacity as given by the\nmin-cut max-flow theorem - a rather theoretical point of view. Network Coding\n(NC) is an approach to achieve this very capacity in practice and can thus be\nconsidered a generalization of routing. Just think about it:\nIntermediate nodes (let us call them \"router\") normally only send identical\ncopies of previously received packets (forget about the headers). NC extends\ntheir capability by demanding that sent packets are arbitrary linear\ncombinations of previously received packets. Sounds strange? It is...\n\nHere is a brief example to make you curious:\nAssume A wants to transmit n packets over a lossy link to B. With conventional\napproaches, B would have to acknowledge successful receipt of each individual\npacket such that A can retransmit any packets that got lost in transmission.\nIf you use NC, A does not send the actual information contained in each\nindividual packet but linear combinations of all packets. Obviously, B needs n\nlinear independent packets to decode. If any packet gets lost during\ntransmission, B does not need to signal a specific loss to A. Instead, A\ncontinues to transmit random (independent) linear combinations of those n\npackets until B has assembled enough packets to decode the whole batch.\n\nThis example is very basic, and actually only even a degenerated case of NC. But\nit gives you the underlying idea. Now just assume there are not only A and B but\na number of intermediate nodes, each of them listening, buffering packets, and\nsending linear combinations. Instead of deciding which specific packet to send\nwhere, those nodes have to decide how often a random linear combination is being\nbroadcast.\n\nThe lecture is a combination of usual classes combined with practical sessions\nduring classes, i.e., you are encouraged to bring your notebooks and participate\nin the projects.\n\nThe theoretic part of the lecture covers the following topics:\n- NC as generalization of routing\n- min-cut/max-flow theorem\n- linear programming\n- packet loss and channel estimation\n- ARQ mechanisms\n- random linear network coding (RLNC)\n- applications of NC\n- bidirectional coding\n- NC in transport and link-layer protocols\n- NC in wireless networks\n- acknowledgement schemes for NC\n- combination of NC on different layers\n\nThe practical part (projects) cover the following topics:\n- socket programming\n- IEEE802.11 raw sockets\n- implementation of RLNC and acknowledgement schemes\n- window protocols for NC\n- many more if you want",
        "prerequisites": "Introduction to Computer Networking and Distributed Systems (IN0010), Discrete Structures (IN0015), Discrete Probability Theory (IN0018), good programming skills in C (or C++)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456992&pOrgNr=1",
        "name": "Network and System Management",
        "kennung": "IN2099",
        "anmerkung": "",
        "lernergebnisse": "The students understand the main issues of the management of IT systems, including its incorporation into IT processes of an organisation, and know relevant solutions.",
        "inhalt": "Starting from basics of networked systems requirements of IT-management (esp. network and systems management) are analyzed. This leads to the concept of management-architectures. Examples of management architectures are discussed: OSI/TMN, Internet/SNMP, CORBA, DMTF, Web-based management. An introduction of management platforms and important management tools follows. Finally various management scenarios and IT-management process in the service management area are discussed.",
        "prerequisites": "IN0010 Introduction to computer networking and distributed systems"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=457032&pOrgNr=1",
        "name": "Virtualization Techniques",
        "kennung": "IN2125",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students are able to classify and evaluate different virtual machines, both concepts and actual products in use today. They can analyse their usefulness in various scenarios, and they understand the technical design trade-offs, implementation challenges as well as typical solutions for better performance.",
        "inhalt": "- Classification of Virtual Machines\n- Operating system Virtualization\n- ISA Virtualization\n++ Interpretation\n++ Binary Translation\n++ Dynamic Optimization\n- Process Virtual Machines\n- High-Level Language Virtual Machines\n- HW/SW-Codesign Virtual Machines\n- system Virtual Machines\n- Multiprocessor Virtualization\n- Applications",
        "prerequisites": "IN2076 Advanced Computer Architecture, IN0009 Basic Principles: Operating Systems and System Software"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1446290&pOrgNr=1",
        "name": "Autonomous Driving",
        "kennung": "IN2356",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students are able to understand the basics of autonomous driving, and know how they relate to the scientific and practical challenges in the field. The students know exemplary solution approaches for central questions and can apply them to simple problems.",
        "inhalt": "The lecture teaches the foundations of autonomous driving and relates them to current scientific and industrial topics in the domain. Central topic areas are discussed and exemplary solution approaches demonstrated, to enable the students in applying these approaches to basic autonomous driving scenarios.\n\nOverview:\n\nPath planning, Decision Making, Trajectories\nMulti-Sensor-Data-Fusion, Tracking, Detection, Sensormodels\nLane detection, modelling and mapping\nAI in vehicles, Scenario Classification and Prediction\nSemantic concepts for scenario description and reasoning\nArchitectures and Operating Systems for Autonomous Driving\nConnected Vehicles & Intelligent Infrastructure\nFunctional and Operational Safety\n\nA bonus of 0.3 grades can be gained by developing a python demonstrator for one of the discussed central topics.",
        "prerequisites": "Linear Algebra for Informatics (MA0901)\nDiscrete Probability Theory (IN0018)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1126210&pOrgNr=1",
        "name": "Autonomous Navigation for Flying Robots",
        "kennung": "IN2318",
        "anmerkung": "",
        "lernergebnisse": "After successful participation of this module, students will be able to\n- understand the flight principles of quadrotors and their application potential\n- specify the pose of objects in 3D space and to perform calculations between them (e.g. compute the relative motion)\n- explain the principles of Bayesian state estimation\n- implement and apply an extended Kalman filter (EKF), and to select appropriate parameters for it,\n- implement and apply a PID controller for state control, and to fine tune its parameters,\n- understand and explain the principles of visual motion estimation and 3D mapping",
        "inhalt": "In recent years, flying robots such as miniature helicopters or quadrotors have received a large gain in popularity. Potential applications range from aerial filming over remote visual inspection of industrial sites to automatic 3D reconstruction of buildings. Navigating a quadrotor manually requires a skilled pilot and constant concentration. Therefore, there is a strong scientific interest to develop solutions that enable quadrotors to fly autonomously and without constant human supervision. This is a challenging research problem because the payload of a quadrotor is uttermost constrained and so both the quality of the onboard sensors and the available computing power is strongly limited.\n\nIn this course, we will introduce the basic concepts for autonomous navigation for quadrotors. The following topics will be covered:\n- 3D geometry,\n- probabilistic state estimation,\n- visual odometry, SLAM, 3D mapping,\n- linear control.\nIn particular, you will learn how to infer the position of the quadrotor from its sensor readings and how to navigate it along a trajectory.\n\nThe course consists of a series of weekly lecture videos that will be interleaved by interactive quizzes and hands-on programming tasks. For the flight experiments, we provide a browser-based quadrotor simulator which requires the students to write small code snippets in Python.\n\nThis course is intended for undergraduate and graduate students in computer science, electrical engineering or mechanical engineering. This course has been offered by TUM for the first time in summer term 2014 on EdX with more than 20.000 registered students of which 1.400 passed examination. The MOOC is based on the previous TUM lecture \u201cVisual Navigation for Flying Robots\u201d which received the TUM TeachInf Award for the best lecture in 2012 and 2013.",
        "prerequisites": "Linear algebra, probability theory, 3D geometry, Python"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261091&pOrgNr=1",
        "name": "Real-Time Systems",
        "kennung": "IN2060",
        "anmerkung": "",
        "lernergebnisse": "At the end of this module students are able to analyse the specific requirements of real-time systems. They are able to select from a variety of possible solutions based on relevant aspects, such as modeling concepts, scheduling algorithms, operating systems, programming languages, etc. They understand typical problems with cuncurrent programming and are familiar with different mechanisms to overcome these problems.",
        "inhalt": "The lecture series comprises special methods, solutions and problems pertaining to real-time systems. To do so, concrete examples where real-time systems are required are presented. The difference between real-time and non-real-time systems is highlighted and it is demonstrated why closed and open-loop control algorithms are fundamentally dependent on real-time systems with their special hard- and software properties. Modelling of real-time systems, concurrency, scheduling algorithms, special operating systems and programming paradigms, clocks, real-time communication and typical hardware for sensors and actuators are discussed in detail. The lecture series concludes with an introduction to fault-tolerant systems.",
        "prerequisites": "None"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456531&pOrgNr=1",
        "name": "Introduction to Digital Signal Processing",
        "kennung": "IN2061",
        "anmerkung": "",
        "lernergebnisse": "At the end of this module students are able to evaluate theoretical concepts and underlying algorithms of modern digital signal processing systems. In the exercise course, the students learn to apply these concepts to a concrete problem and to decide on a proper implementation.",
        "inhalt": "Signals and systems in time and frequency domain, examples, discretization, filter and frequency transforms, compression, realization (signal processors), outlook to digital image processing",
        "prerequisites": "None"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3106358&pOrgNr=1",
        "name": "Fundamentals of Artificial Intelligence",
        "kennung": "IN2406",
        "anmerkung": "",
        "lernergebnisse": "After attending the module, you are able to create artificial intelligence on a basic level using search techniques, logics, probability theory and decision theory. Your learned abilities will be the foundation for more advanced topics in artificial intelligence. In particular, you will acquire the following skills:\n- You can analyze problems of artificial intelligence and judge how difficult it is to solve them.\n- You can recall the basic concepts of intelligent agents and know possible task environments.\n- You can formalize, apply, and understand search problems.\n- You understand the difference between constraint satisfaction and classical search problems as well as apply and evaluate various constraint satisfaction approaches.\n- You can critically assess the advantages and disadvantages of logics in artificial intelligence.\n- You can formalize problems using propositional and first-order logic.\n- You can apply automatic reasoning techniques in propositional and first-order logic.\n- You understand the advantages and disadvantages of probabilistic and logic-based reasoning.\n- You can apply and critically asses methods for probabilistic reasoning with Bayesian networks and Hidden Markov Models.\n- You understand and know how to compute rational decisions.\n- You have a basic understanding on how a machine learns.\n- You know the basic areas and concepts in robotics.",
        "inhalt": "- Task environments and the structure of intelligent agents.\n- Solving problems by searching: breadth-first search, uniform-cost search, depth-first search, depth-limited search, iterative deepening search, greedy best-first search, A* search.\n- Constraint satisfaction problems: defining constraint satisfaction problems, backtracking search for constraint satisfaction problems, heuristics for backtracking search, interleaving search and inference, the structure of constraint satisfaction problems.\n- Logical agents: propositional logic, propositional theorem proving, syntax and semantics of first-order logic, using first-order logic, knowledge engineering in first-order logic, reducing first-order inference to propositional inference, unification and lifting, forward chaining, backward chaining, resolution.\n- Bayesian networks: acting under uncertainty, basics of probability theory, Bayesian networks, inference in Bayesian networks, approximate inference in Bayesian networks.\n- Hidden Markov models: time and uncertainty, inference in hidden Markov models (filtering, prediction, smoothing, most likely explanation), approximate inference in hidden Markov models.\n- Rational decisions: introduction to utility theory, utility functions, decision networks, the value of information, Markov decision processes, value iteration, policy iteration, partially observable Markov decision processes.\n- Learning: types of learning, supervised learning, learning decision trees, reinforcement learning.\n- Introduction to robotics: robot hardware, robotic perception, path planning, planning uncertain movements, control of movements, application domains.",
        "prerequisites": "Previous attendance of\n- IN0007 Fundamentals of Algorithms and Data Structures\n- IN0015 Discrete Structures\n- IN0018 Discrete Probability Theory\nis beneficial. However, all content is taught from ground up and the listed lectures are not essential. Students who have not attended these lectures will have to invest additional time."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3308453&pOrgNr=1",
        "name": "Introduction to Mobile Robotics",
        "kennung": "CIT3330000",
        "anmerkung": "",
        "lernergebnisse": "After successfully finishing this module, students will be able to design and develop mobile robots that can autonomously navigate in their environment. The key concepts taught in this course include basics of probability theory, recursive Bayes filtering, probabilistic sensor and motion models, probabilistic approaches to robot localization and mapping, techniques for simultaneous localization and mapping (SLAM), basic approaches to collision avoidance, path planning and exploration. In particular, students will acquire the following skills:\n\n- They can analyze sensors (ultrasound, LiDAR, Cameras) used for robot navigation and design probabilistic models for them.\n- They can design probabilistic motion models.\n- They can realize a probabilistic localization approach using either a particle filter, a discrete filter, or variants of the Kalman filter.\n- They are able to develop and realize an approach to learn occupancy grid maps from sensor data given the poses of the robot are known.\n- They have a fundamental understanding of recursive Bayes filtering, are able to derive its equation and can critically assess the advantages and disadvantages of different representations of distributions for the recursive Bayes filter.\n- They have a fundamental understanding of the problem of simultaneous localization and mapping (SLAM).\n- They have a basic understanding of motion-planning and collision avoidance methods.\n- They have the capability to develop a navigation system for wheeled mobile robots.",
        "inhalt": "- Wheeled locomotion\n- Proximity sensors\n- Probabilistic Robotics\n- Probabilistic Motion Models\n- Probabilistic Sensor Models\n- Bayes Filter \u2013 Discrete Filters\n- Bayes Filter \u2013 Kalman Filters\n- Bayes Filter \u2013 Particle Filter\n- Occupancy grid maps and reflection maps\n- SLAM \u2013 Simultaneous Localization and Mapping\n- SLAM \u2013 Landmark-based SLAM\n- SLAM \u2013 Grid-based SLAM\n- SLAM \u2013 Graph-based SLAM\n- Iterative Closest Point Algorithm\n- Path planning and Collision Avoidance\n- Exploration",
        "prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures\nIN0015 Discrete Structures\nIN0018 Discrete Probability Theory"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=261771&pOrgNr=1",
        "name": "Sensor-based Robotic Manipulation and Locomotion",
        "kennung": "IN2068",
        "anmerkung": "ab WS 13/14 2 SWS und 3 Credits",
        "lernergebnisse": "The lecture introduces methods for modelling as well as kinematic and dynamic control of complex (for example humanoid) robot systems which interact with unknown environments. Students will gain an overview on the main algorithms and methods used in robotics for manipulation and locomotion.",
        "inhalt": "Introduction: Manipulation und locomotion with complex robot systems\n- Basics of differential geometry\n\nRepresentations of orientation: so3, se3\n\nTransformation of coordinates for vectors, convectors, tensors\n- Task based control decoupling in task space\n\nRobot model and control in task coordinates\n- Redundant systems, micro-/macro-manipulation\n\nInverse Kinematics\n\nTask priorities: Cartesian and null-space coordinates\n- Parallel robots\n\nDual arm systems\n\nDexterous hands\n\nHumanoid manipulators\n\nLegged robots\n- Grasp planning\n- Mobile manipulation\n- Visual servoing\n- Mobile, non-holonomic robots sensor-guided surgical robotics",
        "prerequisites": "IN2067 Robotics, basic knowledge of the description of dynamic systems in mechanics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4112127&pOrgNr=1",
        "name": "Applied Cryptography for Decentralized Systems (ACDS)",
        "kennung": "CIT333000",
        "anmerkung": "",
        "lernergebnisse": "After participating in the module, students can describe the goals and properties and internals of cryptography of selected decentralized systems and blockchain systems. They can describe the concepts of zero-knowledge-proof constructions and their application in decentralized systems. They will be able apply advanced security concepts such as threshold cryptography and trusted execution environments in a correct manner to solve security problems. They are able to assess performance properties of different cryptographic concepts for decentralized systems, and to develop solutions based on the methods and concepts they have learned.",
        "inhalt": "Cryptographic Proof Basics\n\u2022 Hash Functions, Commitment Schemes, ZKP Basics\n\u2022 Sigma Protocols\n\u2022 SNARK Constructions\n\nPolynomials in Cryptography (Secret Sharing, Polynomial\nCommitments)\n\u2022 Arithmetization\n\u2022 PlonK\n\nSNARK Applications\n\u2022 Circuit programming\n\u2022 zkVMs\n\nTrusted Execution Environments\n\u2022 Process and VM based solutions\n\u2022 Building blocks, Performance and use-cases\n\nSecure Multiparty Computation\n\u2022 Oblivious Transfer, Garbled Circuits\n\u2022 Beaver Triples, BGW and GMW protocols",
        "prerequisites": "- Introduction to Computer Networking and Distributed Systems\n(IN0010)\n- IT Security (IN0042) or Network Security (IN2101)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3494362&pOrgNr=1",
        "name": "Cryptography",
        "kennung": "CIT3330003",
        "anmerkung": "",
        "lernergebnisse": "After participating in the module, the student is able to\n- recognize the basic primitives of symmetric and asymmetric cryptography,\n- understand the theoretical foundations of these primitives,\n- analyze cryptographic methods based on it,\n- understand the most important security definitions.",
        "inhalt": "- Theoretical basics:\n++ Security definitions: perfect secrecy, computational security (IND-CPA,IND-CCA,IND-CCA2), semantic security\n++ Cryptographic primitives and pseudo-random: pseudo-random number generator (PRG), -functions (PRF) and -permutations (PRP), one-way functions (OWF) and -permutations (OWP) (with trapdoor (TDP)), cryptographic hash functions, tweakable blockcipher (TBC)\n++ Basics of group and number theory, elliptic curves\n- Symmetric cryptography:\n++ Block ciphers: AES, DES and stream ciphers: ChaCha\n++ Construction of encryption methods based on block ciphers.\n++ Construction of message authentication code: CBC-MAC, NMAC, HMAC\n- Asymmetric cryptography:\n++ The RSA problem and the encryption and signature methods derived from it: RSA-OAEP, RSA-FDH, RSA-PSS\n++ The discrete logarithm and methods derived from it: Diffie-Hellman protocol, El Gamal, DH-KEM, DSA",
        "prerequisites": "IN0011 Introduction to Theoretical Informatics, IN0015 Discrete Structures, IN0018 Discrete Probability Theory, IN0042 IT Security"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3287082&pOrgNr=1",
        "name": "Introduction to Emerging Computing Technologies",
        "kennung": "CIT3330001",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students will know the basic concepts of emerging technologies and their realizations from a design perspective. They will understand the potential of these technologies in principle and for what applications they can be used. In addition to that, students will get a rough overview how corresponding applications can be realized, how corresponding design steps differ from the design of conventional systems, and what methods are available for their design. Through the programming tasks/mini-projects, students will get hands-on experiences on those issues. Correspondingly considered emerging technologies include reversible computing, quantum computing, microfluidics, and field-coupled nanotechnologies.",
        "inhalt": "Computer technologies will change in the near future. The exponential growth of conventional technologies (according to Moore\u2019s Law) will come to a halt, since physical boundaries will be reached soon. At the same time, further system concepts beyond pure electronics emerge. As a consequence, researchers and engineers are currently considering alternative (emerging) computer technologies which work differently to established (conventional) computation paradigms. Examples include quantum computing, reversible circuits, microfludic devices (also known as Labs-on-a-Chip), or field-coupled nanotechnologies. This module provides an overview of these technologies and the corresponding paradigms. This covers an introduction into the respective concepts as well as possible applications. Afterwards, questions of how to efficiently design applications/solutions for these technologies are discussed.",
        "prerequisites": "* Basic knowledge in programming (e.g., in Python, C++, etc.)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3308453&pOrgNr=1",
        "name": "Introduction to Mobile Robotics",
        "kennung": "CIT3330000",
        "anmerkung": "",
        "lernergebnisse": "After successfully finishing this module, students will be able to design and develop mobile robots that can autonomously navigate in their environment. The key concepts taught in this course include basics of probability theory, recursive Bayes filtering, probabilistic sensor and motion models, probabilistic approaches to robot localization and mapping, techniques for simultaneous localization and mapping (SLAM), basic approaches to collision avoidance, path planning and exploration. In particular, students will acquire the following skills:\n\n- They can analyze sensors (ultrasound, LiDAR, Cameras) used for robot navigation and design probabilistic models for them.\n- They can design probabilistic motion models.\n- They can realize a probabilistic localization approach using either a particle filter, a discrete filter, or variants of the Kalman filter.\n- They are able to develop and realize an approach to learn occupancy grid maps from sensor data given the poses of the robot are known.\n- They have a fundamental understanding of recursive Bayes filtering, are able to derive its equation and can critically assess the advantages and disadvantages of different representations of distributions for the recursive Bayes filter.\n- They have a fundamental understanding of the problem of simultaneous localization and mapping (SLAM).\n- They have a basic understanding of motion-planning and collision avoidance methods.\n- They have the capability to develop a navigation system for wheeled mobile robots.",
        "inhalt": "- Wheeled locomotion\n- Proximity sensors\n- Probabilistic Robotics\n- Probabilistic Motion Models\n- Probabilistic Sensor Models\n- Bayes Filter \u2013 Discrete Filters\n- Bayes Filter \u2013 Kalman Filters\n- Bayes Filter \u2013 Particle Filter\n- Occupancy grid maps and reflection maps\n- SLAM \u2013 Simultaneous Localization and Mapping\n- SLAM \u2013 Landmark-based SLAM\n- SLAM \u2013 Grid-based SLAM\n- SLAM \u2013 Graph-based SLAM\n- Iterative Closest Point Algorithm\n- Path planning and Collision Avoidance\n- Exploration",
        "prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures\nIN0015 Discrete Structures\nIN0018 Discrete Probability Theory"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3470518&pOrgNr=1",
        "name": "IT Security 2",
        "kennung": "CIT3330002",
        "anmerkung": "",
        "lernergebnisse": "After participating in the module, students are able to evaluate complex security solutions. They are able to analyze the security level of applications. They will be able apply basic and advanced security concepts in a correct manner to solve security problems. They understand the causes of security problems in networks but also in mobile and embedded systems. They master the most important concepts for their protection and can also apply advanced approaches. They are able to identify possible security weaknesses in designs or protocols and to develop solutions based on the methods and concepts they have learned.",
        "inhalt": "The module treats selected types in depth and discusses special topics of IT security. Current concepts and solutions in the field of digital identity, such as smart cards, physically unclonable functions (PUF), SSI and token-based authentication in distributed systems are dealt with in depth. In the area of application security, selected issues such as the security of Instant Messenger services are discussed. In the area of system security, the module is dedicated to advanced concepts such as Trusted Computing, Trusted Execution Environments and Confidential Computing. It also discusses selected aspects of hardware-security. The module deals with the current and developing state of the security of wireless and mobile communication architectures (e.g. 5G) and with concepts for ad-hoc security in networked IoT devices (e.g. BluetoothLE). The module will also give an insight into the methodological development and evaluation of secure systems (security engineering).",
        "prerequisites": "IN0042 IT Security, IN0010 Introduction to Computer Networking and Distributed Systems, IN0009 Basic Principles: Operating Systems and System Software"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3470518&pOrgNr=1",
        "name": "IT Security 2",
        "kennung": "CIT3330002",
        "anmerkung": "",
        "lernergebnisse": "After participating in the module, students are able to evaluate complex security solutions. They are able to analyze the security level of applications. They will be able apply basic and advanced security concepts in a correct manner to solve security problems. They understand the causes of security problems in networks but also in mobile and embedded systems. They master the most important concepts for their protection and can also apply advanced approaches. They are able to identify possible security weaknesses in designs or protocols and to develop solutions based on the methods and concepts they have learned.",
        "inhalt": "The module treats selected types in depth and discusses special topics of IT security. Current concepts and solutions in the field of digital identity, such as smart cards, physically unclonable functions (PUF), SSI and token-based authentication in distributed systems are dealt with in depth. In the area of application security, selected issues such as the security of Instant Messenger services are discussed. In the area of system security, the module is dedicated to advanced concepts such as Trusted Computing, Trusted Execution Environments and Confidential Computing. It also discusses selected aspects of hardware-security. The module deals with the current and developing state of the security of wireless and mobile communication architectures (e.g. 5G) and with concepts for ad-hoc security in networked IoT devices (e.g. BluetoothLE). The module will also give an insight into the methodological development and evaluation of secure systems (security engineering).",
        "prerequisites": "IN0042 IT Security, IN0010 Introduction to Computer Networking and Distributed Systems, IN0009 Basic Principles: Operating Systems and System Software"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3494362&pOrgNr=1",
        "name": "Cryptography",
        "kennung": "CIT3330003",
        "anmerkung": "",
        "lernergebnisse": "After participating in the module, the student is able to\n- recognize the basic primitives of symmetric and asymmetric cryptography,\n- understand the theoretical foundations of these primitives,\n- analyze cryptographic methods based on it,\n- understand the most important security definitions.",
        "inhalt": "- Theoretical basics:\n++ Security definitions: perfect secrecy, computational security (IND-CPA,IND-CCA,IND-CCA2), semantic security\n++ Cryptographic primitives and pseudo-random: pseudo-random number generator (PRG), -functions (PRF) and -permutations (PRP), one-way functions (OWF) and -permutations (OWP) (with trapdoor (TDP)), cryptographic hash functions, tweakable blockcipher (TBC)\n++ Basics of group and number theory, elliptic curves\n- Symmetric cryptography:\n++ Block ciphers: AES, DES and stream ciphers: ChaCha\n++ Construction of encryption methods based on block ciphers.\n++ Construction of message authentication code: CBC-MAC, NMAC, HMAC\n- Asymmetric cryptography:\n++ The RSA problem and the encryption and signature methods derived from it: RSA-OAEP, RSA-FDH, RSA-PSS\n++ The discrete logarithm and methods derived from it: Diffie-Hellman protocol, El Gamal, DH-KEM, DSA",
        "prerequisites": "IN0011 Introduction to Theoretical Informatics, IN0015 Discrete Structures, IN0018 Discrete Probability Theory, IN0042 IT Security"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456996&pOrgNr=1",
        "name": "Network Security",
        "kennung": "IN2101",
        "anmerkung": "",
        "lernergebnisse": "Participants understand security goals for the Internet and the components in which communication protocols are implemented. They understand the possibilities available to attackers in the network. They understand the protection offered by cryptographic and network security mechanisms, and have the knowledge to apply network security protocols and implement architectures that can achieve specific security goals.",
        "inhalt": "The course provides an introduction to the field of network security. Starting with possible threats and attack scenarios, requirements for providing specific security services are derived. After introducing the basic concepts of security mechanisms, the integration of security mechanisms into network architectures and network protocols are discussed. Security vulnerabilities of existing network architectures are also discussed.\nAs a basis for the realization of security mechanisms, cryptographic algorithms (in particular symmetric cryptography, public key cryptography and cryptographic hash functions) are presented. Afterwards, the basics and methods for security protocols for authentication, authorization, access control, message integrity, confidentiality and non-repudiation are discussed. Subsequent sections present specific security mechanisms, in particular of the TCP/IP protocol family. The standard examples include PKI, Kerberos, IPSec, and TLS, Firewall-architectures and Intrusion Detection Systems.",
        "prerequisites": "IN0009 Basic Principles: Operating Systems and System Software, IN0010 Introduction to computer networking and distributed systems"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=458249&pOrgNr=1",
        "name": "Networks for Monetary Transactions",
        "kennung": "IN2161",
        "anmerkung": "",
        "lernergebnisse": "Verstehen und Einsch\u00e4tzen der Grundlagen, Architektur und Sicherheit von Netzwerken f\u00fcr den nationalen und internationalen Zahlungsverkehr sowie deren rechtliche Rahmenbedingungen",
        "inhalt": "Systemarchitektur (Hardware, Software)\nProtokollschichten und Protokolle (eg. ISO 8583)\nSicherheitsarchitekturen und Sicherheitsstandards\nAuthorisierungsl\u00f6sungen und Signaturen\nArten von Attacken\nMobile Architekturen und deren Sicherheitskonzepte (OTA Services)\nAnwendungen",
        "prerequisites": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=487459&pOrgNr=1",
        "name": "Peer-to-Peer-Systems and Security",
        "kennung": "IN2194",
        "anmerkung": "ab SoSe 13 5 SWS und 6 Credits",
        "lernergebnisse": "At the end of the module the students can describe the goals and properties of peer-to-peer systems. They can recite the internals of selected systems. They can utilize the fundamental mechanisms and protocols of peer-to-peer networks, in particular for search of data and managing membership.\nThey can explain security goals of such networks and discuss concepts to provide security services. They can assess various mechanisms to provide anonymity and can compare selected anonymity systems.\nFinally, they are able to apply this theoretical knowledge into the design and implementation of new protocols and applications, can explain their new design, predict its behavior and critially analyze its weaknesses.",
        "inhalt": "The course covers the following topics:\n- P2P applications, advantages and disadvantages of P2P systems\n- common problems and operations in P2P systems\n- routing in structured and unstructured overlay networks, in particular distributed hash tables\n- network address translation and traversal\n- decentralized network size estimation\n- reputation systems\n- common attacks on P2P protocols and defenses against them\n- anonymity, protocols to create anonymity and attacks on anonymity\n\nThe various protocols are described in theory and practical implementations of those ideas are discussed (in particular Freenet, Bittorrent, Tor, JAP, GNUnet, I2P and Gnutella). The course will also include a practical component focusing on the design and implementation of a new P2P protocol or application with design choices being discussed in class",
        "prerequisites": "IN0010 Introduction to Computer Networking and Distributed Systems, Knowledge in computer networks and the ability to program in C or Java are expected."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460596&pOrgNr=1",
        "name": "Security Engineering",
        "kennung": "IN2178",
        "anmerkung": "Erh\u00f6hung auf 5 Credits ab SoSe 2014",
        "lernergebnisse": "At the end of the module students are able to understand and apply processes and techniques required for analysis, design, evaluation and operation of secure IT applications, as well as for design, implementation and verification of secure software. Thus students are enabled to analyze and assess the IT security of applications, and to develop and represent systematically appropriate IT security solutions.",
        "inhalt": "A secure IT application requires both presence of desired security features (example: access control), and absence of undesired security flaws (example: processing of un-validated user input).\n\nWe discuss basic terms (example: security versus safety), and security goals as well as secure design principles (example: least privilege). We get familiar with the engineering process for security critical applications.\n\nWe focus on system analysis, threat and risk analysis, derivation of security requirements, and recommendation of potential security controls, also taking into account economical considerations. We learn how to specify security policies and how these policies reflect in a security architecture in the context of an overall system architecture. We exemplary take into account basic security controls (example: PKI). We address methods to validate and assess secure applications (example: Common Criteria) and deal with concepts for IT security management (example: ISO 2700x) and secure operation of applications. A further focal point is the development of secure software. We talk about basic attack vectors of hackers, crackers and malware authors. We experience, how insecure programming opens up vulnerabilities (example: cross site scripting). We learn how to detect such vulnerabilities in a systematical manner. We investigate the professional handling of security incidents and the work of Computer Emergency Response Teams (CERTs). We address principles of and guidelines for secure software design and implementation, as well as corresponding verification techniques. We exemplary take a closer look at Microsoft's Security Development Cycle, and get to know models to assess and improve the quality of a secure software development process (example: SSE-CMM).",
        "prerequisites": "IN2209 IT Security"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456346&pOrgNr=1",
        "name": "Algorithms for Scientific Computing",
        "kennung": "IN2001",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to identify, explain, and implement selected hierarchical methods that are of particular interest to the informatical aspects of scientific computing because of their algorithmic structure and their significance for practical applications.\nParticipants can analyse and judge the efficiency of such methods by deriving statements about the required computational cost and - where applicable - the achieved accuracy and by comparing them with corresponding results for other methods. \nThe students are able to transfer the methodology to new methods for related problems.",
        "inhalt": "Discrete Fourier transform and related transforms\n- FFT: derivation and implementation\n- Fast discrete cosine/sine transforms: derivation and implementation via FFT\n- Applications: multi-dimensional data (images, video, audio) and FFT-based solvers for linear systems of equations\n\nSpace-filling curves\n- Peano- and Hilbert curves: representation by algebraic and grammatical means\n- Applications: organisation of multi-dimensional data; parallel, adaptive, and cache oblivious algorithms\n\nHierarchical numerical methods\n- Hierarchical bases for one- and multi-dimensional problems\n- Computational cost versus accuracy; Sparse Grids\n- Adaptive representation of continuous data\n- Applications: numerical quadrature, differential equations\n- Outlook: multigrid methods, wavelets",
        "prerequisites": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456348&pOrgNr=1",
        "name": "Algorithms for Scientific Computing II",
        "kennung": "IN2002",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to adapt numerical methods to ambitious applications from the practice of scientific computing. They understand and are familiar with advanced problems and methods in scientific computing. These advanced methods comprise in particular hierarchical aspects that students are able to understand, explain and apply to more complex applications.",
        "inhalt": "Courses of this module exist in three different specifications:\n- Sparse Matrices (Huckle):\n++ Data structures, Sparsity Graphs\n++ Sparse BLAS\n++ Reordering\n++ Direct solution of linear equations and algebraic pivoting\n++ Iterative solution of linear equations and preconditioning.\n- Scientific Computing (Mendl):\n++ Introduction to quantum mechanics\n++ Bell inequalities\n++ Quantum circuits and algorithms\n++ Quantum error correction\n++ Mapping of NP problems to quantum ground states\n++ Numerical methods for quantum systems\n- Scientific Computing (Bungartz):\n++ Molecular dynamics simulation\n++ Sparse grid methods\n++ Algebraic multigrid methods",
        "prerequisites": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1816255&pOrgNr=1",
        "name": "Introduction to Quantum Computing",
        "kennung": "IN2381",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with the fundamentals and the mathematical formalism of quantum computing. They can analyse quantum algorithms, like Grover search, and construct quantum circuits for simple algorithms. The students can apply software tools (like Qiskit or Cirq), and can evaluate possible fields of applications of (future) quantum computers.",
        "inhalt": "- Mathematical formalism and foundations of quantum mechanics\n- Quantum circuits\n- Quantum teleportation\n- Bell inequality\n- Fundamental quantum algorithms",
        "prerequisites": "Linear Algebra, e.g., MA0901 Linear Algebra for Informatics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2981021&pOrgNr=1",
        "name": "Advanced Concepts of Quantum Computing",
        "kennung": "IN2400",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with advanced concepts and algorithms related to quantum computing, in particular the quantum Fourier transformation, quantum operations and quantum error correction. They can differentiate the quantum Fourier transform from other algorithms, understand its relevance for integer factorization, and apply the quantum Fourier transform in new scenarios. The students also understand the mathematical formalism of quantum error correction and related concepts like the stabilizer formalism.",
        "inhalt": "- Quantum Fourier transform\n- Shor's algorithm for integer factorization\n- Quantum operations\n- Quantum error-correction",
        "prerequisites": "- Introduction to Quantum Computing (IN2381)\n- Linear Algebra, e.g., MA0901 Linear Algebra for Informatics\n- Analysis (for Quantum Fourier transform), e.g., MA0902 Analysis for Computer Science\n- Fundamentals of group theory helpful (for quantum error correction), but not strictly required, e.g., MA2010 Algebra"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1060581&pOrgNr=1",
        "name": "Parallel Program Engineering",
        "kennung": "IN2310",
        "anmerkung": "",
        "lernergebnisse": "The participants will be able to apply a structured approach in the development of parallel applications. They are able to assess and apply existing tools for a given problem. They understand tool development infrastructures and are able to design and implement own solutions to issues in the development process of parallel software.",
        "inhalt": "This module starts with a short introduction to parallel programming, programming models and languages, applications, and the parallelization approach. It presents the software development process focusing on aspects and requirements for parallel and high performance applications. Development environments supporting the orchestration of parallel programs are introduced. The module then concentrates on concepts and tools for engineering parallel programs focusing on: e.g. omain decomposition, Debugging, Performance analysis, Performance modeling and prediction, Application tuning, Performance engineering workflows, and tool development infrastructures.",
        "prerequisites": "IN2076 Advanced Computer Architecture, IN2147 Parallel Programming"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=457062&pOrgNr=1",
        "name": "Parallel Programming",
        "kennung": "IN2147",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module students are able to create parallel programs in MPI and OpenMP. They understand the performance aspects of different parallelization strategies and can evaluate those parallelization strategies in the context of applications. They are able to apply data dependence analysis and program transformations. They can analyze and tune the performance of parallel applications.",
        "inhalt": "The module starts with a motivation for parallel programming and a classification of parallel architectures. It focuses first on parallelization for distributed memory architectures with MPI. It introduces the major concepts, e.g., point to point communication, collective operations, communicators, virtual topologies, non-blocking communication, single-sided communication and parallel IO. In addition, it covers the overall parallelization approach based on four phases, i.e., decomposition, assignment, orchestration and mapping. The next section presents dependence analysis as the major theoretical basis for parallelization. It introduces program transformations and discusses their profitability and safety based on data dependence analysis. The second major programming interface in the module is OpenMP for shared memory systems. This section covers most of the language concepts as well as proposed extensions. In the last part, the module presents novel programming interfaces, such as PGAS languages, threading building blocks, CUDA, OpenCL, and OpenACC.",
        "prerequisites": "IN2076 Advanced Computer Architecture"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2809143&pOrgNr=1",
        "name": "Tensor Networks",
        "kennung": "IN2388",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with the mathematical formalism and graphical notation for tensor networks. They can assess and apply tensor network approaches for approximating high-dimensional data. They understand why tensor network methods are suitable for simulating strongly correlated quantum systems, and are familiar with corresponding algorithms.",
        "inhalt": "- Fundamentals and graphical representation of tensor networks\n- Mathematical approximation theory\n- Backpropagation through tensor network operations\n- Simulating strongly correlated quantum systems and digital quantum computers\n- Probability distribution sampling using tensor networks",
        "prerequisites": "\u2022 MA0901 Linear Algebra for Informatics\n\u2022 MA0902 Analysis for Informatics\n\u2022 IN0018 Discrete Probability Theory\n\u2022 Knowledge about quantum mechanics or computing helpful (but not a formal prerequisite)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2809326&pOrgNr=1",
        "name": "Time Integration and Differential Equations",
        "kennung": "IN2387",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of the module students will be able to develop solvers for initial value problems of certain classes of partial differential equations. Furthermore, they will be able to evaluate some of them regarding various numerical properties. They will be able to understand the interplay between time and various space discretizations. Finally, they will be able to apply advanced time integration methods.",
        "inhalt": "- Basics\n-- Basics of ordinary differential equations\n-- Basics of standard time integration (Runge-Kutta)\n-- Dispersion properties\n-- Splitting methods\n- Partial differential equations (PDEs)\n-- Classification\n-- Analytical properties and solutions\n- Discretization of spatial dimension\n- Discretization of PDE operators\n- DE solvers on high-performance computers\n- Advanced time integration (examples)\n-- Semi-Lagrangian Methods\n-- Spectral Deferred Correction Methods\n-- Exponential time integration\n-- Parareal\n-- Parallel Full Approximation Scheme in Space and Time (PFASST)",
        "prerequisites": "MA0902 Analysis for Informatics\nBasic knowledge on numerics (e.g. via course on numerical programming), Basic Python programming skills for the tutorials"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=456372&pOrgNr=1",
        "name": "Augmented Reality",
        "kennung": "IN2018",
        "anmerkung": "Ab WS13/14 6 Credits",
        "lernergebnisse": "At the end of the module students are able to describe and analyze the underlying mathematical and programming aspects (tracking and rendering) of AR systems, and they can extend them towards own, further-reaching solutions. They can also evaluate existing input and output devices regarding their suitability for special application scenarios.",
        "inhalt": "Foundations of Augmented Reality\n- Geometric transformations (homogeneous matrices, projective geometry, scene graph)\n- Three-dimensional information presentation (OpenGL, 3D APIs)\n- Head-mounted displays and other display devices\n- Physical foundations of several tracking devices\n- Mathematical foundations of optical tracking, sensor fusion and device calibration\n- Concepts: augmented reality in comparison with mixed reality, ubiquitous computing, etc.",
        "prerequisites": "IN0001 Introduction to Informatics, IN0006 Introduction to Software Engineering, IN0007 Fundamentals of Algorithms and Data Structures, MA0901 Linear Algebra for Informatics, Basic mathematical and programming skills."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=460540&pOrgNr=1",
        "name": "eLearning - Techniques and Infrastructures",
        "kennung": "IN2093",
        "anmerkung": "",
        "lernergebnisse": "After attending the module, students are able to oversee te state of the art in eLearning. They can judge the value of Learning/Teaching Environments and evaluate the functionality, architecture and implementation of eLearning environments. They understand the basic technical embedding of eLearning systems into the general functions of campus management systems. Basic skills in programming XML are acquired and can be applied to the definition of eLearning programs.",
        "inhalt": "- Introduction to eLearning:\n- eLearning in Universities\n- Pedagogy and didactics: learning process, elements of eLearning, design and structure.\n- eLearning concepts, systems and services\n- eLearning architectures: CSCW, eLearning portals, Learning Management Systems, Content Management Systems\n- Tools: Authoring tools\n- eLearning integration into University information management systems: User management (LDAP), campus management\n- Production of eLearning content with XML: eLearning XML languages, transformation of XML documents\n- Standards and integration: Learning Technology Standards, eLearning metadata, LMS integration\n- Knowledge Management",
        "prerequisites": "IN2038 Distributed and Web Information Systems"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1698301&pOrgNr=1",
        "name": "Fundamentals of Human-Centered Robotics",
        "kennung": "IN2371",
        "anmerkung": "",
        "lernergebnisse": "Upon completion of this module, students will be able to understand and evaluate the various methods and technologies of safe physical human-robot interaction. They know how to apply the theoretical principles of robot control for safe human-robot interaction. They will be able to develop robot programs based on the latest methods for global motion planning in dynamic environments. In addition, they have an overview of motion planning algorithms for collision avoidance and can implement them practically in robotics. Starting from a specific problem, they can develop safe and human-friendly programs for physical human-robot interaction and implement and evaluate them in practice.",
        "inhalt": "The Human-Centered Robotics lecture covers a thorough introduction into the technology and intelligent control of collaborative robotic systems. The theoretical foundation and potential applications of interacting robots are discussed in depth. Tutorials deepen conceptual understanding of interactive robotics and corresponding software tools. The students will learn the basics of robot safety, human-friendly AI-based task and path planning in dynamic environments. To gain practical experience and apply the course concepts in cutting-edge robot technology, Robothons are offered that aim to solve real-world challenges with highly motivated student teams consisting of 4-6 members from different disciplines.\nThe course outline is illustrated below.\n\nI. Introduction\n- A short history of robotics\n- What is Human-Friendly Robotics?\n\nII. Mechanical design and dynamic modelling for safety and performance\n- Rigid robots\n- Robots with flexible elements\n- Intrinsically compliant robots\n- Safety for physical Human-Robot Interaction\n\nIII. Control methods for unknown environments and Human-Robot Interaction\n- Perception and actuation for interactive robotics\n- Motion control\n- Force and impedance control\n- Collision handling\n\nIV. Real-time motion planning\n- Real-time trajectory planning\n- Environment sensing and perception\n- Real-time motion planning and obstacle avoidance behavior\n- Hierarchical motion control\n\n\nExercises will focus on following topics:\n- Robot Modeling \u2013 Introduction into the modeling of rigid and flexible joint robots\n- Robot Control \u2013 Introduction into applied robot control in dynamic environments focusing on human safety\n- Motion Planning \u2013 Design and execution of safe dynamic trajectory planning\n\nDuring the Robothon, students will gain hands-on experience in solving real-world problems using robotic systems. Students will work together in interdisciplinary teams, where each team selects a desired robotic task to implement, with a focus on human-robot collaboration. The students are responsible for managing the entire project, creating the project plan, executing the project in an interdisciplinary team, finishing the project on time, and demonstrating their results to the course participants. For project examples from previous Robothons in Hannover, see the following: https://www.roboterfabrik.uni-hannover.de",
        "prerequisites": "Control Systems 1\nRobotics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473857&pOrgNr=1",
        "name": "3D User Interfaces",
        "kennung": "IN2111",
        "anmerkung": "",
        "lernergebnisse": "Students receive in-detail knowledge on the advance conception and implementation of 3D user interfaces in interactive, immersive computer applications. At the end of the module they can analyze current concepts of three-dimensional interaction regarding their requirements on input and output devices and with respect to their functionality and usability. Furthermore, they can create and implement novel interaction concepts.",
        "inhalt": "In-depth coverage of concepts of three-dimensional human computer interaction\n- Current input and output devices\n- Interaction techniques: selection, manipulation, travel, wayfinding, system control\n- Evaluation of 3D user interfaces\n- Future 3D user interfaces",
        "prerequisites": "IN0001 Introduction to Informatics, IN0006 Introduction to Software Engineering, IN0007 Fundamentals of Algorithms and Data Structures, MA0901 Linear Algebra for Informatics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3307469&pOrgNr=1",
        "name": "Advanced Concepts of Programming Languages",
        "kennung": "CIT3230000",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module, students are familiar with an assortment of programming language constructs from popular programming languages. They understand the semantics of these constructs as well as the implementation consequences, that they inflict on the implementation as well as the runtime behavior of compiler and runtime system. They are able to analyze and compare different language based approaches, to discuss their relative merits and potential workarounds in case certain language features are missing. By means of this knowledge, they are able to extend existing compilers to handle the aforementioned constructs as well as able to re-encode concepts from one language by means of another language.",
        "inhalt": "This is not a beginners programming course \u2013 Instead, this lecture focusses on the semantics of various programming language concepts, and their implementation from the point of view of a compiler engineer. Topics may include, among others:\n- Relaxed Memory Models\n- Wait-/Lock-free Programming\n- Locks, Monitors & Condition Variables\n- Transactional Memory\n- Gotos, Co-Routines and Continuations\n- Single/Multi-Dispatching\n- (Multiple-) Inheritance\n- Delegation and Prototype Based Programming\n- Aspect Oriented Programming\n- Meta programming",
        "prerequisites": "IN0001 Introduction to Informatics,\nIN0002 Fundamentals of Programming (Exercises & Laboratory),\nIN0003 Functional Programming and Verification,\nat least one programming language"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3453883&pOrgNr=1",
        "name": "Cloud Information Systems",
        "kennung": "CIT3230002",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n- understand and analyze public cloud services.\n- define the requirements and challenges when architecting, implementing and managing cloud-native information systems.\n- design cost-efficient and scalable cloud information systems using current cloud technologies.",
        "inhalt": "- Introduction to foundational technologies (virtualization, containers, orchestration)\n- Architecture of cloud-native information systems (client/server, middleware, microservices)\n- Cost optimization in public clouds (cost and pricing models)\n- Economic cloud architecture comparison\n- Multi-cloud deployments\n- Implications of SaaS (DevOps, security)\n- Case studies of public clouds\n- Case studies of cloud-native information system architectures and their building blocks (e.g., cloud object stores, key/value stores, OLTP DBMS, OLAP DBMS)",
        "prerequisites": "IN0010 Introduction to Computer Networking and Distributed Systems (recommended)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3310961&pOrgNr=1",
        "name": "Code Generation for Data Processing",
        "kennung": "CIT3230001",
        "anmerkung": "",
        "lernergebnisse": "Students are able to implement an efficient execution environment for data processing programs based on code generation. Further, students can design appropriate program representations for high-level languages, database queries, as well as machine code and compile these to performant machine code using appropriate optimizations and sandboxing measures.",
        "inhalt": "- Execution models of programs (interpretation, bytecode, machine code generation, etc.)\n- Program representations (source code, intermediate representations (IRs), different forms of bytecode)\n- Classical techniques of code generation\n- SSA and optimization techniques, exemplary described on LLVM-IR\n- Machine code generation: instruction selection and register allocation\n- Execution of programs in virtual machines (e.g., WebAssembly, BPF, JavaScript)\n- Sandboxing and optimizations for JIT compilation\n- Execution of database queries (e.g., SQL, data frame API)\n- Execution models and code representations\n- Execution of machine code/binary translation (e.g., RISC-V)\n- Specifics when translating machine code",
        "prerequisites": "IN0004 Introduction to Computer Organization and Technology - Computer Architecture;\nIN0008 Fundamentals of Databases"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4110214&pOrgNr=1",
        "name": "Concepts of C++ Programming",
        "kennung": "CIT323000",
        "anmerkung": "",
        "lernergebnisse": "The participants master the concepts of C++ programming\nmentioned below. They are able to independently analyze them and to apply the corresponding analysis to related programming problems. Furthermore, the participants are able to use the handled programming concepts, to modify them if necessary, and to compare the quality of different solutions.",
        "inhalt": "First, the module studies the basic concepts of the C++ language (syntax, strong typing, type deduction, focus on runtime efficiency). Then, the module studies the central, modern C++ programming concepts.\n- Concepts for efficient resource management: The module presents RAII, smart pointers, universal references, ownership and copy/move.\n- Concepts for procedural programming: The module investigates C++ mechanisms for procedural programming, such as functions, parameter passing, lambdas, overloads, and error handling.\n- Concepts for object-oriented programming: The module presents classes, inheritance (single and multiple), polymorphy, and RTTI.\n- Concepts for generic programming: The module investigates templates, variadic templates and fold expressions, expression templates for lazy evaluation, and typical patterns such as CRTP.\n- Concepts of compile-time programming: The module investigates concepts such as template recursion, constexpr, and type traits.\n- Concepts for containers, iterators, and ranges: The module presents the STL standard containers, algorithms and runtime guarantees, iterator concepts as well as views and ranges.\n- Concepts for build systems and dependency management: concepts for automatic compilation, linking and management of dependencies are studied. Additionally, concepts for continuous testing and integration are investigated.\n- Optionally, concepts for parallel programming are investigated, such as threads, atomics and async/futures, as well as recent C++ extensions such as concepts and modules.",
        "prerequisites": "IN0001: Introduction to Informatics\nIN0002: Fundamentals of Programming (Exercises & Laboratory)\nIN0007: Fundamentals of Algorithms and Data Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3499417&pOrgNr=1",
        "name": "Data Processing on Modern Hardware",
        "kennung": "CIT3230004",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of this module, students are able to:\n\n* implement data processing engines that run faster on modern machines using a variety of techniques:\n- optimize data structures and algorithms for the memory hierarchy\n- effectively adjust the program structure of the execution engine and the data pipelines to better exploit modern hardware features (AVX, SGX,\n- apply custom-parallelization techniques to most common data-processing algorithms\n- efficiently synchronize data structures\n\n* learn how to best leverage new hardware technologies in the context of (distributed) data processing engines:\n- accelerators (e.g., FPGAs, smart NICs, etc.)\n- low-latency high-bandwidth networks\n- modern storage and memory (non-volatile, memory extensions, far memory, CXL)\n\n* reason about software abstractions and programming models for modern hardware, especially in the context of data-intensive applications.\n\n* apply the knowledge in real data management systems:\n- understand what happens in the background\n- do performance analysis and debugging of hot spots and bottlenecks\n- optimize algorithms and data structures to run well both in isolation and alongside other programs (e.g., multi-tenancy).",
        "inhalt": "* Cache hierarchy awareness and how it influences the design of modern data storage formats and indexes.\n* Memory-, threading- and execution models for data processing on modern machines\n* Latest practices for query execution, compilation and optimization\n* Exploiting parallelism in multi-core machines for in-memory data management systems, with particular focus on crafting for non-uniformity in memory access latencies\n* Building efficient distributed data processing at scale through the use of modern network and storage technologies",
        "prerequisites": "IN0004 Introduction to Computer Organization and Technology \u2013 Computer Architecture\nIN0008 Fundamentals of Databases\nIN0007 Fundamentals of Algorithms and Data Structures"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3471253&pOrgNr=1",
        "name": "Data Structure Engineering",
        "kennung": "CIT3230003",
        "anmerkung": "",
        "lernergebnisse": "Students can design efficient and compact data structures. They are capable of implementing custom, domain-specific data structure variants and of synchronizing them for multi-core processors in a scalable fashion.",
        "inhalt": "Data structure engineering is the process of designing and implementing in-memory and out-of-memory data structures to support the efficient storage, organization, and retrieval of data. On modern hardware a low asymptotic complexity alone does not guarantee high performance; one must also take features of today's processors and storage technologies into account. The course first introduces the necessary hardware background, before studying different data structures such as hash tables, search trees, and tries and how to optimize them for modern hardware.",
        "prerequisites": "IN0007 Fundamentals of Algorithms and Data Structures (recommended)\nIN0004 Introduction to Computer Organization and Technology - Computer Architecture (recommended)\nKnowledge of low-level language, e.g., C/C++, Rust"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1350593&pOrgNr=1",
        "name": "Lecture Series: What is digitalization?",
        "kennung": "IN2348",
        "anmerkung": "",
        "lernergebnisse": "After attending this class, students can understand, analyze and contextualize different facets of digitalization at the level of university education. They can identify trade-offs and conflicting goals.",
        "inhalt": "Aspects of digitalization from the perspective of different disciplines: informatics, information systems, law, economics, politics, sociology, philosophy and ethics, security and privacy, and from the perspective of industrial applications.",
        "prerequisites": "Basic understanding of the fundamentals of informatics"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3664085&pOrgNr=1",
        "name": "Advisor Training",
        "kennung": "CIT6330002",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme am Modul ist der Studierende in der Lage gruppendynamische Prozesse zu erkennen und zu bewerten. Durch intensives Zusammenarbeiten der Gruppe innerhalb des advisor Trainings und das kontinuierliche Coaching durch externe Trainer erf\u00e4hrt jeder Teilnehmer eine intensive Pers\u00f6nlichkeitsentwicklung, welche sich wesentlich an seinen St\u00e4rken und Schw\u00e4chen orientiert.",
        "inhalt": "Das Modul besteht aus mehrt\u00e4gigen professionellen Seminaren (Pr\u00e4senzzeit 12,5d \u00e0 8h = 100h) in welchen den Teilnehmern folgende Inhalte auf theoretischer Basis vermittelt werden:\n- Teamarbeit, F\u00fchrung, Kommunikation\n- Lerntechniken, Zeitmanagement\n- Rhetorik und Pr\u00e4sentation\n- Moderation\n- Stressbew\u00e4ltigung\nIm Rahmen der Guppenphase des adveisor Tutoriums (eigenst\u00e4ndiges Modul im fachlichen Wahlbereich des Bachelorstudiengangs) werden die in den Seminaren erlernten theoretischen Inhalte praktisch angewandt. Hierf\u00fcr \u00fcbernehmen die Teilnehmer die Vorbereitung (Eigenstudium 9 \u00e0 3h = 27h) und die Leitung der Gruppenstunden (Pr\u00e4senzeit 9 \u00e0 1,5h = 13,5h).\nIm Anschluss an das Wintersemester erhalten die einzelnen Gruppen des adveisor Tutoriums eine klar definierte, praktische Aufgabe aus dem Bereich der Elektrotechnik und Informationstechnik, wie beispielsweise ein Fahrzeug zu bauen, das einer vorgegebenen Linie folgen kann. Aufgabe der Teilnehmer des adveisor Trainings ist es im Sommersemester jeweils eine Gruppe bei der Umsetzung des Projekts zu unterst\u00fctzen und zu begleiten sowie die Gruppendynamik zu bewerten (Eigenstudium 40h).",
        "prerequisites": "Voraussetzung f\u00fcr die Teilnahme am Modul ist die Teilnahme als Tutor am advisor Programm der CIT."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3664089&pOrgNr=1",
        "name": "Advisor Tutorium",
        "kennung": "CIT6330001",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme am Modul kennen die Studierenden die einzelnen Bestandteile sozialer Kompetenz, deren Wichtigkeit und deren Auswirkung auf einzelne Personen sowie Gruppen im Hinblick auf ein Projekt. Die Absolventen des Moduls haben das theoretische Wissen aus dem Seminar in der Projektphase angewendet und kennen einen Teambildungsprozess sowie m\u00f6gliche auftretende Schwierigkeiten w\u00e4hrend eines Projekts.",
        "inhalt": "Das Modul besteht aus einem Seminar (Pr\u00e4senzzeit) und einem praktischen Projekt (Eigenstudium), wof\u00fcr die Teilnehmer zu Beginn des Moduls in Gruppen eingeteilt werden.\nIm Seminar werden Inhalte der sozialen Kompetenz besprochen:\n- Kommunikation\n- Teambildung\n- Zeit- und Selbstmanagement\n- Pr\u00e4sentationstechniken\n- Stressbew\u00e4ltigung\n- Projektmanagement\nDie einzelnen Gruppen lernen sich kennen, arbeiten zusammen mit einem Tutor an den einzelnen, oben genannten Themen und bereiten sich so als Team auf die anschlie\u00dfende Projektphase vor. In der Projektphase bekommen die einzelnen Gruppen eine klar definierte, praktische technische Aufgabe, wie beispielsweise ein Fahrzeug zu bauen, das einer vorgegebenen Linie folgen kann. Daf\u00fcr werden ein technisches Konzept und ein Projektplan erarbeitet, die vor einer Jury pr\u00e4sentiert werden m\u00fcssen. Anschlie\u00dfend steht den Gruppen ein begrenzter Zeitraum f\u00fcr die Umsetzung zur Verf\u00fcgung. Das Modul wird mit der Pr\u00e4sentation der Projektergebnisse auf einer gro\u00dfen Abschlussveranstaltung durch die Studierenden abgeschlossen.",
        "prerequisites": "Das Modul richtet sich ausschlie\u00dflich an Studierende im ersten Fachsemester der Bachelorstudieng\u00e4nge der CIT.\nVoraussetzung f\u00fcr die Teilnahme am Modul ist die gleichzeitige Teilnahme am advisor Programm der CIT."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=4390207&pOrgNr=1",
        "name": "AI Governance",
        "kennung": "CIT323002",
        "anmerkung": "",
        "lernergebnisse": "After attending this class, students can understand, assess, and contextualize different facets of AI governance based on the EU AI Act and its operationalization at the level of university education.",
        "inhalt": "As AI technologies increasingly permeate various sectors, it is crucial for future developers to understand the ethical, legal, and social dimensions of their work. The lecture series \u201cAI Governance\u201d will invite experts to talk about topics ranging from responsible AI over participatory AI to the European AI Act. The structure of the lecture series is provided by the EU AI Act's obligations to high-risk AI system providers, including data and data governance, transparency, human oversight, or risk management. The lecture series will provide students with both theoretical and practical approaches to AI governance based on the European legal framework.\nAll lectures will link to \"Responsible AI\" and \u201cParticipatory AI\u201d, covering principles such as fairness, accountability, and transparency, and exploring the role of diverse stakeholders in the AI development process. Thereby, methods for engaging communities and ensuring that AI solutions reflect a wide range of perspectives and needs will be highlighted. With a focus on regulatory frameworks, particularly the EU AI Act, students will learn about risk assessment, compliance, and the responsibilities of AI practitioners in adhering to the AI Act.\n\nThe lecture series will include sessions on:\n- The context of the EU AI Act\n- The EU AI Act as legal framework\n- Risk Management (Art 9)\n- Risk Management (e.g., NIST)\n- Data and Data Governance (Art 10)\n- Record-Keeping (Art 12)\n- Transparency (Art 13)\n- Human Oversight (Art 14)\n- Accuracy and Robustness (Art 15)\n- Cybersecurity (Art 15)\n- Post-Market Monitoring (Art 72)\n- Quality Management System (Art 17)\n- AI literacy (Art 4)\n- Fundamental Rights Impact Assessment (Art 27)\n- AI Audits",
        "prerequisites": "Basic understanding of the fundamentals of artificial intelligence"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1095636&pOrgNr=1",
        "name": "Data Privacy",
        "kennung": "IN9044",
        "anmerkung": "",
        "lernergebnisse": "Participants possess the necessary methodological and interdisciplinary skills to independently prepare, present and discuss scientific seminar papers on more challenging topics in the field of data protection. They can work with scientific literature (research, categorize, prioritize, cite). They will master the required presentation and discussion techniques.\nAfter successfully completing the module, students are thus able to integrate the relevant data protection aspects into their future professional practice. They are thus in a position to protect the rights of data subjects in accordance with the law. In addition to protecting the data of others, they are also able to deal with their own data in a conscious and self-determined manner. They are able to critically question new trends in IT with regard to data protection and, as future trendsetters in IT, to achieve competitive advantages by taking data protection aspects into account.",
        "inhalt": "- History of data protection\n- Principles and foundation of data protection\n- The data proctection official in companies and public autorities\n- Data protection within the EU\n- Checking data protection\n- Data protection by individuals\n- Data protection and security: commonalities and conflicts\n- Data protection within the job-related practice in IT environments\n- Data protection aspects in Cloud Computing\n- Data protection in scoring agencies\n- Data protection in public health\n- Data protection in research\n- Current scandales in data protection",
        "prerequisites": "none"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473930&pOrgNr=1",
        "name": "Pedagogical Training in Didactics for Tutors",
        "kennung": "IN9028",
        "anmerkung": "",
        "lernergebnisse": "The students are understand and are able to apply basic methods and results of educational research and learning psychology. In addition, they are able to apply appopriate methods of planning, organization and execution of tutorials. They choose, assess, and execute teaching methods and media to support the individual learning progress.",
        "inhalt": "1. Basic methods and results of educational research on teaching and learning, in particular of learning psychology. Basic concepts of constructivism.\n2. Techniques and tools for teaching Informatics\n3. Performance assessment, gender aspects and effects\n4. Conception, presentation and evaluation of tutorials in Informatics\n5. Planning, organization and conduction of tutorials in informatic",
        "prerequisites": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=2814357&pOrgNr=1",
        "name": "Introduction to Data Protection Law",
        "kennung": "IN9050",
        "anmerkung": "",
        "lernergebnisse": "After successful participation in this module, students are able to\n- outline the historical development of data protection law and its constitutional background.\n- understand the systematics of data protection law and examine its scope of application.\n- grasp the effects of the basic principles of data protection law and apply them to concrete examples.\n- examine the permissibility of processing personal data under the DPA in various individual cases.\n- name and exercise the rights of data subjects and the organizational duties of the data controller.\n- explain the special features of the transfer of personal data abroad.\n- link data protection violations and the appropriate sanctions, such as fines, monetary penalties and imprisonment.",
        "inhalt": "The following technical contents are taught in the module:\nChapter 1: History of data protection law and constitutional background\nChapter 2: Classification and scope of data protection law\n1. systematics\n2. scope of application of the German and European data protection law\n3. relevant actors in data protection law\nChapter 3: Basic principles of data protection law\n1. overview\n2. legality\n3. transparency\n4. earmarking\n5. data minimization\n6. accountability principle\nChapter 4: Permissibility of the processing of personal data\n1. legal bases of data processing according to the DSGVO\n2. consent of the person concerned\n3. contractual relations\n4. fulfilment of legal obligations\n5. protection of vital interests\n6. performance of public tasks\n7. predominant interest of the data processor\n8. special categories of personal data\nChapter 5: Rights of data subjects\n1. general information\n2. information duties of the responsible person and right of access of the data subject\n3. right of rectification\n4. cancellation claim of the person concerned (\"right to be forgotten\")\n5. data portability\n6. right of objection and automated individual case decisions\nChapter 6: Organizational duties of the responsible person\n1. strengthening of the organizational duties by the DSGVO\n2. dependence of the scope of obligations on the risk of processing\n3. data protection through technology design and data protection-friendly presettings\n4. data security\n5. message of \"data mishaps\n6. data protection impact assessment\n7. processing list)\n8. appointment of a data protection officer\n9. summary\nChapter 7: Transfer of personal data abroad\n1. general information\n2. two-step test\n3. adequacy decision of the EU\n4th EU-US Privacy Shield\n5. appropriate guarantees\n6. exceptions for certain cases\nChapter 8: Sanctions for data protection violations\n1. overview: Data protection violations and data protection offences\n2. fines for violations of data protection regulations\n3. sanctions for data protection offences\n4. offences under general criminal law\nChapter 9: Practical examples\n1. data protection on the Internet: Case study\n2. data protection on the Internet: Cookies\n3. data protection in the employment relationship: case study\n4. admissibility of a corona tracing app",
        "prerequisites": "None"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473891&pOrgNr=1",
        "name": "Entrepreneurship for Small Software-oriented Enterprises",
        "kennung": "IN9006",
        "anmerkung": "",
        "lernergebnisse": "After the successful completion of this module, students are familiar with the basic knowledge for successful foundation and long-term management of a small software-oriented enterprise.\nIn particular, students are able\n- to use the Business Model Canvas to conceptualize and detail their target business model,\n- to perform a SWOT analysis of their business model,\n- to develop a three-year financial plan for their startup company,\n- to pitch their startup idea confidently and thoroughly, backed by the knowledge and feedback they have received.",
        "inhalt": "Contents include:\n- Techniques for market analysis\n- Procedures for financial planning\n- Methods for developing a business plan\n- Concept of \"unique selling proposition\"",
        "prerequisites": "None"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473910&pOrgNr=1",
        "name": "Entrepreneurship",
        "kennung": "IN9017",
        "anmerkung": "",
        "lernergebnisse": "After participation, the students will know the essential principles of setting up a company and will be familiar with the basics of creating a business plan. They can develop a (real or fictitious) business idea with the help of the business plan until it is ready to be founded. They are able to explain the business idea and the central aspects of the business plan to an audience in a compact and understandable way.",
        "inhalt": "1. Corporation Law\n2. Financing\n3. Intellectual Property /Patents\n4. Tax Law\n5. Marketing and Sales\n6. Business Plan Preparation",
        "prerequisites": "keine"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1339018&pOrgNr=1",
        "name": "Innovation Generation in the Healthcare Domain",
        "kennung": "IN9048",
        "anmerkung": "",
        "lernergebnisse": "The learning of this module includes:\n\u2022 To learn and apply tools and methods to evaluate the innovation degree of an idea\n\u2022 To apply tools and methods to validate the innovation/market of an invention\n\u2022 To learn methodology to conduct innovation games to develop ideas in a structured way\n\u2022 To apply use of business model and value proposition canvas\n\u2022 To learn, understand and apply product management and project management methods and tools\n\u2022 To understand the medical market, its payer models and healthcare reimbursement\n\u2022 To understand the business in the biomedical market\n\u2022 To learn apply methods and tools to translate the inventions to innovations\n\u2022 To learn soft skills how to present ideas in front of a review/investment committee",
        "inhalt": "The modul focuses on customer validation and development around novel ideas in healthcare with the focus on medical imaging systems, medical technology & healthcare services. It focuses on the value proposition design and validation of system requirements.\nStudents will learn how to get user/customer feedback from medical professionals, learn methods to generate ideas and validate them quickly and derive business cases using state of the art methods for customer development and business generation. Furthermore, a basic understanding of markets in the medical domain and the various healthcare systems will be provided in overview lectures. The students will work on real life examples and use cases and with close contact to the Munich university clinics.\nIn all lecture blocks we will also work with a set of INNOVATION Games on identifying problems and solutions as well as generating novel concepts and ideas - very useful for identifying translational ideas and also for analyzing and improving complex project or task that eventually could result in a venture and new business generation.",
        "prerequisites": "You know the basics of imaging and image guidance and you are interested in understanding the difference between research and clinical solutions. You are highly motivated, eager to work in a team and you want to understand how the healthcare system works and validate an idea if it is an innovation (will someone apply and buy it). It will be of advantage if you have already an idea (e.g. through the Image Guided Surgery module) and you want to validate throughout the module if this is an innovation (i.e. it has potential in a market) or if it is only a great idea/invention."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1200390&pOrgNr=1",
        "name": "IT Law in Public Administrations: E-Government Act, IT Security and Procurement",
        "kennung": "IN9046",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind die Studierenden in der Lage, die grundlegenden Rahmenbedingungen des Einsatzes von IT in der \u00f6ffentlichen Verwaltung zu benennen und wichtige Begriffe des IT-Rechts in der \u00f6ffentlichen Verwaltung zu definieren. Dar\u00fcber hinaus sind die Studierenden in der Lage, die wesentlichen Regelungen des E-Government-Gesetzes, des Rechts der IT-Sicherheit und des Rechts der IT-Auftragsvergabe zu verstehen und anzuwenden.",
        "inhalt": "- Grundlagen des IT-Rechts in der \u00f6ffentlichen Verwaltung\n- E-Government-Gesetz (BayEGovG, Bundes-EGovG Bund und De-Mail-Gesetz)\n- Rechtsgrundlagen im Bereich IT-Sicherheit (Grundz\u00fcge BSI-Gesetz, TKG und TMG, Verh\u00e4ltnis zum BayDSG)\n- Rechtsgrundlagen der IT-Auftragsvergabe (GWB, VOL/A, VgV)\n- Besondere Vertragsbedingungen bei IT-Vertr\u00e4gen der \u00f6ffentlichen Verwaltung (EVB-IT)",
        "prerequisites": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3501529&pOrgNr=1",
        "name": "Learning through Teaching: Programming Courses at Schools",
        "kennung": "CIT6230000",
        "anmerkung": "",
        "lernergebnisse": "Upon successful completion of the module, participants will be able to:\n- Communicate enthusiasm for computer science\n- Communicate basic programming skills to people with no IT experience\n- Apply digital presentation techniques and online facilitation methods\n- Communicate with, collaborate with, and meet the individual needs of people who are not familiar with IT\n- Provide self-efficacy to young people as role model\n- Teach the importance of basic IT skills, digital literacy, and media literacy\n- Pass on the importance of creativity and critical thinking as well as a positive culture of making mistakes",
        "inhalt": "This hands-on course takes place entirely virtually. Participants inspire students with programming courses at a simple level. Through small programs and games, they provide young people with insights into digital topics, strengthen their IT skills and share their passion for their choice of studies. The participants work in teams and independently supervise young people in a school class. They improve their communication on IT topics with young people without IT experience, apply presentation techniques, practice moderation skills and exercise creativity in new situations. The lecturers of the course prepare the participants for the assignment: with practice-proven and didactically sound concepts for programming courses in different languages and topics such as Scratch, HTML, Python, Bash and Swift.",
        "prerequisites": "- Basic programming skills (IN0001 and IN0002 or equivalent).\n- Willingness to learn entry-level technologies (such as Scratch, HTML, Python, Bash, or Swift)\n- German language skills (at least B2)"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=557078&pOrgNr=1",
        "name": "Medical Technology Entrepreneurship",
        "kennung": "IN9038",
        "anmerkung": "Ab SS 2011 4 statt 2 Credits",
        "lernergebnisse": "After attending this module, participants are able to write a business plan in the area of medical imaging. They have an overview on special regulations, in particular regarding certification of soft- and hardware. They understand basics of team building for start-ups, patents, marketing, sales and finances for companies in the area of medical imaging.",
        "inhalt": "- Basics in life sciences and Medical Imaging\n- qualifications of a medical imaging entrepreneur\n- necessary criteria for a startup\n- basics of IP, marketing, sales, finance\n- basics of business plan creation\n- How to finance the venture\n- 2 team assignments: (a) idea creation, description, and R&D, (b) creation of a small business plan (max. 20 pages)",
        "prerequisites": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=3342019&pOrgNr=1",
        "name": "Sanit\u00e4tsausbildung",
        "kennung": "CIT3640001",
        "anmerkung": "",
        "lernergebnisse": "Nach der Teilnahme an dem Modul sind Studierende in der Lage, Notfallpatienten eigenst\u00e4ndig zu versorgen. Hierzu notwendiges Wissen \u00fcber Notfallbilder, Anatomie, Vitalfunktionen und eingesetztes Material kann wiedergegeben werden.",
        "inhalt": "Vitalfunktionen, Erkrankungen der Atmung und des Herzkreislaufsystems, Einf\u00fchrung in Aufbau und Funktion des Bewegungsapparates, Versorgung von Wunden und anderen Verletzungen, Versorgung von Sportverletzungen, Erkennen und Versorgen weiterer Erkrankungen (z.B. Herzinfarkt, Schlaganfall, temperaturbedingte Erkrankungen), Reanimation, Rechtliche Rahmenbedingungen im Sanit\u00e4tsdienst, Vorgehen und Einsatztaktik in der Patientenversorgung",
        "prerequisites": "Vorliegen eines Nachweises \u00fcber einen aktuellen Erste-Hilfe-Kurs."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473906&pOrgNr=1",
        "name": "Seminar: Project Management",
        "kennung": "IN9011",
        "anmerkung": "",
        "lernergebnisse": "At the end of this course, the participants have acquired basic skills and knowledge with respect to the treated topics in project management. They are able to apply their knowledge to simple scenarios, for example, to define goals and phases of a project, work out resource plans, leading personnel in projects, etc. Furthermore, they are able to use a common project management tool exemplarily and to present aspects from the field of project management in an adequate manner.",
        "inhalt": "Basics of project management, international quasi-standards for project management, project phases, controlling and ensuring quality and success, planning and managing resources, software tools for project management, time management.",
        "prerequisites": ""
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473902&pOrgNr=1",
        "name": "Seminar: Science and Ethics",
        "kennung": "IN9010",
        "anmerkung": "",
        "lernergebnisse": "At the end of the module, students are able to analyse and evaluate ethical aspects of different behaviour related to scientific research (goals of scientific research, procedure of research, and possible applications of research) as well as to present them in an adequate manner.",
        "inhalt": "- Biographies of distinguished scientists (Meitner, Einstein, Russell, Heisenberg, v. Braun,...)\n- Research under dictatorships\n- Faud, mistakes, and plagiarism,\n- Ethics in computer science (Monitoring, freedom of the www, Open Source, Star Wars,...)\n- Genetic research, intelligent design, animal tests.",
        "prerequisites": "none"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473898&pOrgNr=1",
        "name": "SET-Tutor",
        "kennung": "IN9007",
        "anmerkung": "",
        "lernergebnisse": "Participants are able to guide a group. They can take responsibility in conception and manage group dynamic processes.",
        "inhalt": "Participants prepare the introduction days (SET) for first-year students and are in charge of a group of first-year students. They communicate the most important facts for the begin of studies and support first-year students getting to know each other and forming study groups by using basic principles of organisation, management and motivation of small groups.",
        "prerequisites": "A minimum of two semesters of studies completed at the department of Informatics at TUM"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473900&pOrgNr=1",
        "name": "Leading Yourself and Others",
        "kennung": "IN9009",
        "anmerkung": "",
        "lernergebnisse": "At the end of the course, participants have improved their personal skills for leadership, especially based on experience by means of feedback and reflexion. They have extended their strengths and reduced their shortcomings, based on a realistic self-assessment. They are able to give and receive constructive feedback.",
        "inhalt": "- Individual definition of leadership; competence profile of successful executives\n- Determining your position: strengths and weaknesses, claim of leadership\n- Perception, assessment, communication, feedback\n- Leading individual staff members: situations of leadership, dialogs\n- Leading groups: group dynamics, resistance\n- Conflict handling\n- Giving presentations, leading meetings\n- Instruments and styles of leadership (including coaching)\n- Leadership in the case of conflicting interests of the corporation and the employees",
        "prerequisites": "Participants should be in the active phase of confrontation with their future occupation. First leadership experiences in their professional / private / social environment are useful."
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=1446514&pOrgNr=1",
        "name": "Technology and Law",
        "kennung": "IN9049",
        "anmerkung": "",
        "lernergebnisse": "After successful completion of this module students will be able to:\n\u2022 outline the most important phases in the development of technology law, and describe the relationship between technology and law.\n\u2022 understand the most important fundamentals of civil and criminal liability and their application to autonomous systems.\n\u2022 identify duty of care standards and thus be able to adequately analyse questions of negligence.\n\u2022 outline potential civil and criminal liability questions, based on technical issues, arising in previously unseen hypothetical cases.\n\u2022 explain the most important structures and principles of data protection law and understand European influences on this area of law.\n\u2022 set out and explain the legality of driver assistance systems and the challenges, for example in the area of civil liability, arising from the use of autonomous vehicles.\n\u2022 be able to differentiate the responsibilities of providers under the Telemedia Act and discuss specific problematic issues.\n\u2022 apply what they have learned to previously unseen cases and independently develop solutions in which they link legal aspects with technical ones. Thus they will be able to draw the line between \"legally permissible\" and \"technically possible\".",
        "inhalt": "The following subject specific contents are taught in the module:\n1. Introduction\na) The relationship between technology and law\nb) The history of technology law\n\n2. Fundamentals of civil liability\na) Basics\nb) The challenges of autonomics\nc) Relevant court judgments\nd) Case examples of contractual liability\n\n3. Fundamentals of criminal liability\na) Basics\nb) Relevant offences\nc) The challenges of autonomics\nd) Relevant court judgments\ne) Case examples of criminal liability\n\n4. Data protection and data security\na) The legal-historical and legal-political background of data protection law\nb) Scope of the German Federal Data Protection Act (BDSG)\nc) Regulated activities\nd) Rights and duties\ne) Data security\nf) Relevant court judgments\ng) The challenges of autonomics\nh) Case examples on data protection\n\n5. Driver assistance systems in road transport\na) Road transport law and technical approval law\nb) Amendments to the Vienna Convention made in March 2016\nc) Legal implications of the operation of automated vehicles on civil liability\nd) Relevant court judgments\ne) Case examples\n\n6. Provider liability\na) Basics\ne) The German Telemedia Act (TMG)\nf) The liability of providers under TMG",
        "prerequisites": "None"
    },
    {
        "url": "https://campus.tum.de/tumonline/WBMODHB.wbShowMHBReadOnly?pKnotenNr=473924&pOrgNr=1",
        "name": "Trendseminar CDTM",
        "kennung": "IN9026",
        "anmerkung": "",
        "lernergebnisse": "Work in interdisciplinary teams, creating a seminar papers in English, presentation of work results in English, basics of scientific work, basics of trend research.",
        "inhalt": "Technological, social, and economical impact of current trends",
        "prerequisites": "Only for students of the CDTM program Technology Management"
    }
]